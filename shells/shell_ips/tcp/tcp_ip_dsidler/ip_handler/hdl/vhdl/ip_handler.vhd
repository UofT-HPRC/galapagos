-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ip_handler is
port (
    s_axis_raw_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_raw_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    s_axis_raw_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_ARP_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_ARP_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_ARP_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_ICMP_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_ICMP_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_ICMP_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_UDP_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_UDP_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_UDP_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_TCP_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axis_TCP_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axis_TCP_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axis_raw_TVALID : IN STD_LOGIC;
    s_axis_raw_TREADY : OUT STD_LOGIC;
    m_axis_ARP_TVALID : OUT STD_LOGIC;
    m_axis_ARP_TREADY : IN STD_LOGIC;
    m_axis_ICMP_TVALID : OUT STD_LOGIC;
    m_axis_ICMP_TREADY : IN STD_LOGIC;
    m_axis_UDP_TVALID : OUT STD_LOGIC;
    m_axis_UDP_TREADY : IN STD_LOGIC;
    m_axis_TCP_TVALID : OUT STD_LOGIC;
    m_axis_TCP_TREADY : IN STD_LOGIC );
end;


architecture behav of ip_handler is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ip_handler,hls_ip_2015_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx690tffg1761-2,HLS_INPUT_CLOCK=6.400000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=5.580000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1072,HLS_SYN_LUT=1724}";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_true : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_ap_start : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_ap_done : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_ap_continue : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_ap_idle : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_ap_ready : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_s_axis_raw_TVALID : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_ipDataFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal ip_handler_detect_mac_protocol_U0_ipDataFifo_V_full_n : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_ipDataFifo_V_write : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_m_axis_ARP_TREADY : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_s_axis_raw_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal ip_handler_detect_mac_protocol_U0_s_axis_raw_TREADY : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_s_axis_raw_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal ip_handler_detect_mac_protocol_U0_s_axis_raw_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ip_handler_detect_mac_protocol_U0_m_axis_ARP_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal ip_handler_detect_mac_protocol_U0_m_axis_ARP_TVALID : STD_LOGIC;
    signal ip_handler_detect_mac_protocol_U0_m_axis_ARP_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal ip_handler_detect_mac_protocol_U0_m_axis_ARP_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_hs_continue : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_ap_start : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_ap_done : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_ap_continue : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_ap_idle : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_ap_ready : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_ipDataFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ip_handler_check_ip_checksum_U0_ipDataFifo_V_empty_n : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_ipDataFifo_V_read : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_iph_subSumsFifoOut_V_din : STD_LOGIC_VECTOR (68 downto 0);
    signal ip_handler_check_ip_checksum_U0_iph_subSumsFifoOut_V_full_n : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_iph_subSumsFifoOut_V_write : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_ipDataCheckFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal ip_handler_check_ip_checksum_U0_ipDataCheckFifo_V_full_n : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_ipDataCheckFifo_V_write : STD_LOGIC;
    signal ip_handler_check_ip_checksum_U0_myIpAddress_V : STD_LOGIC_VECTOR (31 downto 0);
    signal ip_handler_iph_check_ip_checksum_U0_ap_start : STD_LOGIC := '0';
    signal ip_handler_iph_check_ip_checksum_U0_ap_done : STD_LOGIC;
    signal ip_handler_iph_check_ip_checksum_U0_ap_continue : STD_LOGIC;
    signal ip_handler_iph_check_ip_checksum_U0_ap_idle : STD_LOGIC;
    signal ip_handler_iph_check_ip_checksum_U0_ap_ready : STD_LOGIC;
    signal ip_handler_iph_check_ip_checksum_U0_iph_subSumsFifoOut_V_dout : STD_LOGIC_VECTOR (68 downto 0);
    signal ip_handler_iph_check_ip_checksum_U0_iph_subSumsFifoOut_V_empty_n : STD_LOGIC;
    signal ip_handler_iph_check_ip_checksum_U0_iph_subSumsFifoOut_V_read : STD_LOGIC;
    signal ip_handler_iph_check_ip_checksum_U0_ipValidFifo_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal ip_handler_iph_check_ip_checksum_U0_ipValidFifo_V_full_n : STD_LOGIC;
    signal ip_handler_iph_check_ip_checksum_U0_ipValidFifo_V_write : STD_LOGIC;
    signal ip_handler_ip_invalid_dropper_U0_ap_start : STD_LOGIC := '0';
    signal ip_handler_ip_invalid_dropper_U0_ap_done : STD_LOGIC;
    signal ip_handler_ip_invalid_dropper_U0_ap_continue : STD_LOGIC;
    signal ip_handler_ip_invalid_dropper_U0_ap_idle : STD_LOGIC;
    signal ip_handler_ip_invalid_dropper_U0_ap_ready : STD_LOGIC;
    signal ip_handler_ip_invalid_dropper_U0_ipDataCheckFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ip_handler_ip_invalid_dropper_U0_ipDataCheckFifo_V_empty_n : STD_LOGIC;
    signal ip_handler_ip_invalid_dropper_U0_ipDataCheckFifo_V_read : STD_LOGIC;
    signal ip_handler_ip_invalid_dropper_U0_ipValidFifo_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ip_handler_ip_invalid_dropper_U0_ipValidFifo_V_empty_n : STD_LOGIC;
    signal ip_handler_ip_invalid_dropper_U0_ipValidFifo_V_read : STD_LOGIC;
    signal ip_handler_ip_invalid_dropper_U0_ipDataDropFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal ip_handler_ip_invalid_dropper_U0_ipDataDropFifo_V_full_n : STD_LOGIC;
    signal ip_handler_ip_invalid_dropper_U0_ipDataDropFifo_V_write : STD_LOGIC;
    signal ip_handler_cut_length_U0_ap_start : STD_LOGIC := '0';
    signal ip_handler_cut_length_U0_ap_done : STD_LOGIC;
    signal ip_handler_cut_length_U0_ap_continue : STD_LOGIC;
    signal ip_handler_cut_length_U0_ap_idle : STD_LOGIC;
    signal ip_handler_cut_length_U0_ap_ready : STD_LOGIC;
    signal ip_handler_cut_length_U0_ipDataDropFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ip_handler_cut_length_U0_ipDataDropFifo_V_empty_n : STD_LOGIC;
    signal ip_handler_cut_length_U0_ipDataDropFifo_V_read : STD_LOGIC;
    signal ip_handler_cut_length_U0_ipDataCutFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal ip_handler_cut_length_U0_ipDataCutFifo_V_full_n : STD_LOGIC;
    signal ip_handler_cut_length_U0_ipDataCutFifo_V_write : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_ap_start : STD_LOGIC := '0';
    signal ip_handler_detect_ip_protocol_U0_ap_done : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_ap_continue : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_ap_idle : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_ap_ready : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_ipDataCutFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ip_handler_detect_ip_protocol_U0_ipDataCutFifo_V_empty_n : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_ipDataCutFifo_V_read : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_m_axis_TCP_TREADY : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_m_axis_UDP_TREADY : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TREADY : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TVALID : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ip_handler_detect_ip_protocol_U0_m_axis_UDP_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal ip_handler_detect_ip_protocol_U0_m_axis_UDP_TVALID : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_m_axis_UDP_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal ip_handler_detect_ip_protocol_U0_m_axis_UDP_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ip_handler_detect_ip_protocol_U0_m_axis_TCP_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal ip_handler_detect_ip_protocol_U0_m_axis_TCP_TVALID : STD_LOGIC;
    signal ip_handler_detect_ip_protocol_U0_m_axis_TCP_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal ip_handler_detect_ip_protocol_U0_m_axis_TCP_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ipDataFifo_V_U_ap_dummy_ce : STD_LOGIC;
    signal ipDataFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataFifo_V_full_n : STD_LOGIC;
    signal ipDataFifo_V_write : STD_LOGIC;
    signal ipDataFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataFifo_V_empty_n : STD_LOGIC;
    signal ipDataFifo_V_read : STD_LOGIC;
    signal iph_subSumsFifoOut_V_U_ap_dummy_ce : STD_LOGIC;
    signal iph_subSumsFifoOut_V_din : STD_LOGIC_VECTOR (68 downto 0);
    signal iph_subSumsFifoOut_V_full_n : STD_LOGIC;
    signal iph_subSumsFifoOut_V_write : STD_LOGIC;
    signal iph_subSumsFifoOut_V_dout : STD_LOGIC_VECTOR (68 downto 0);
    signal iph_subSumsFifoOut_V_empty_n : STD_LOGIC;
    signal iph_subSumsFifoOut_V_read : STD_LOGIC;
    signal ipDataCheckFifo_V_U_ap_dummy_ce : STD_LOGIC;
    signal ipDataCheckFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataCheckFifo_V_full_n : STD_LOGIC;
    signal ipDataCheckFifo_V_write : STD_LOGIC;
    signal ipDataCheckFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataCheckFifo_V_empty_n : STD_LOGIC;
    signal ipDataCheckFifo_V_read : STD_LOGIC;
    signal ipValidFifo_V_U_ap_dummy_ce : STD_LOGIC;
    signal ipValidFifo_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal ipValidFifo_V_full_n : STD_LOGIC;
    signal ipValidFifo_V_write : STD_LOGIC;
    signal ipValidFifo_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal ipValidFifo_V_empty_n : STD_LOGIC;
    signal ipValidFifo_V_read : STD_LOGIC;
    signal ipDataDropFifo_V_U_ap_dummy_ce : STD_LOGIC;
    signal ipDataDropFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataDropFifo_V_full_n : STD_LOGIC;
    signal ipDataDropFifo_V_write : STD_LOGIC;
    signal ipDataDropFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataDropFifo_V_empty_n : STD_LOGIC;
    signal ipDataDropFifo_V_read : STD_LOGIC;
    signal ipDataCutFifo_V_U_ap_dummy_ce : STD_LOGIC;
    signal ipDataCutFifo_V_din : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataCutFifo_V_full_n : STD_LOGIC;
    signal ipDataCutFifo_V_write : STD_LOGIC;
    signal ipDataCutFifo_V_dout : STD_LOGIC_VECTOR (72 downto 0);
    signal ipDataCutFifo_V_empty_n : STD_LOGIC;
    signal ipDataCutFifo_V_read : STD_LOGIC;
    signal ap_CS : STD_LOGIC;
    signal ap_reg_procdone_ip_handler_detect_mac_protocol_U0 : STD_LOGIC := '0';
    signal ap_reg_procdone_ip_handler_detect_ip_protocol_U0 : STD_LOGIC := '0';
    signal ap_sig_hs_done : STD_LOGIC;

    component ip_handler_detect_mac_protocol IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_raw_TVALID : IN STD_LOGIC;
        ipDataFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        ipDataFifo_V_full_n : IN STD_LOGIC;
        ipDataFifo_V_write : OUT STD_LOGIC;
        m_axis_ARP_TREADY : IN STD_LOGIC;
        s_axis_raw_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        s_axis_raw_TREADY : OUT STD_LOGIC;
        s_axis_raw_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        s_axis_raw_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axis_ARP_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_ARP_TVALID : OUT STD_LOGIC;
        m_axis_ARP_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_ARP_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ip_handler_check_ip_checksum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        ipDataFifo_V_empty_n : IN STD_LOGIC;
        ipDataFifo_V_read : OUT STD_LOGIC;
        iph_subSumsFifoOut_V_din : OUT STD_LOGIC_VECTOR (68 downto 0);
        iph_subSumsFifoOut_V_full_n : IN STD_LOGIC;
        iph_subSumsFifoOut_V_write : OUT STD_LOGIC;
        ipDataCheckFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        ipDataCheckFifo_V_full_n : IN STD_LOGIC;
        ipDataCheckFifo_V_write : OUT STD_LOGIC;
        myIpAddress_V : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ip_handler_iph_check_ip_checksum IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        iph_subSumsFifoOut_V_dout : IN STD_LOGIC_VECTOR (68 downto 0);
        iph_subSumsFifoOut_V_empty_n : IN STD_LOGIC;
        iph_subSumsFifoOut_V_read : OUT STD_LOGIC;
        ipValidFifo_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        ipValidFifo_V_full_n : IN STD_LOGIC;
        ipValidFifo_V_write : OUT STD_LOGIC );
    end component;


    component ip_handler_ip_invalid_dropper IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataCheckFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        ipDataCheckFifo_V_empty_n : IN STD_LOGIC;
        ipDataCheckFifo_V_read : OUT STD_LOGIC;
        ipValidFifo_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        ipValidFifo_V_empty_n : IN STD_LOGIC;
        ipValidFifo_V_read : OUT STD_LOGIC;
        ipDataDropFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        ipDataDropFifo_V_full_n : IN STD_LOGIC;
        ipDataDropFifo_V_write : OUT STD_LOGIC );
    end component;


    component ip_handler_cut_length IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataDropFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        ipDataDropFifo_V_empty_n : IN STD_LOGIC;
        ipDataDropFifo_V_read : OUT STD_LOGIC;
        ipDataCutFifo_V_din : OUT STD_LOGIC_VECTOR (72 downto 0);
        ipDataCutFifo_V_full_n : IN STD_LOGIC;
        ipDataCutFifo_V_write : OUT STD_LOGIC );
    end component;


    component ip_handler_detect_ip_protocol IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ipDataCutFifo_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
        ipDataCutFifo_V_empty_n : IN STD_LOGIC;
        ipDataCutFifo_V_read : OUT STD_LOGIC;
        m_axis_TCP_TREADY : IN STD_LOGIC;
        m_axis_UDP_TREADY : IN STD_LOGIC;
        m_axis_ICMP_TREADY : IN STD_LOGIC;
        m_axis_ICMP_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_ICMP_TVALID : OUT STD_LOGIC;
        m_axis_ICMP_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_ICMP_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_UDP_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_UDP_TVALID : OUT STD_LOGIC;
        m_axis_UDP_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_UDP_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_TCP_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axis_TCP_TVALID : OUT STD_LOGIC;
        m_axis_TCP_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axis_TCP_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component FIFO_ip_handler_ipDataFifo_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_ip_handler_iph_subSumsFifoOut_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (68 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (68 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_ip_handler_ipDataCheckFifo_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_ip_handler_ipValidFifo_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_ip_handler_ipDataDropFifo_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component FIFO_ip_handler_ipDataCutFifo_V IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (72 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (72 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    ip_handler_detect_mac_protocol_U0 : component ip_handler_detect_mac_protocol
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_detect_mac_protocol_U0_ap_start,
        ap_done => ip_handler_detect_mac_protocol_U0_ap_done,
        ap_continue => ip_handler_detect_mac_protocol_U0_ap_continue,
        ap_idle => ip_handler_detect_mac_protocol_U0_ap_idle,
        ap_ready => ip_handler_detect_mac_protocol_U0_ap_ready,
        s_axis_raw_TVALID => ip_handler_detect_mac_protocol_U0_s_axis_raw_TVALID,
        ipDataFifo_V_din => ip_handler_detect_mac_protocol_U0_ipDataFifo_V_din,
        ipDataFifo_V_full_n => ip_handler_detect_mac_protocol_U0_ipDataFifo_V_full_n,
        ipDataFifo_V_write => ip_handler_detect_mac_protocol_U0_ipDataFifo_V_write,
        m_axis_ARP_TREADY => ip_handler_detect_mac_protocol_U0_m_axis_ARP_TREADY,
        s_axis_raw_TDATA => ip_handler_detect_mac_protocol_U0_s_axis_raw_TDATA,
        s_axis_raw_TREADY => ip_handler_detect_mac_protocol_U0_s_axis_raw_TREADY,
        s_axis_raw_TKEEP => ip_handler_detect_mac_protocol_U0_s_axis_raw_TKEEP,
        s_axis_raw_TLAST => ip_handler_detect_mac_protocol_U0_s_axis_raw_TLAST,
        m_axis_ARP_TDATA => ip_handler_detect_mac_protocol_U0_m_axis_ARP_TDATA,
        m_axis_ARP_TVALID => ip_handler_detect_mac_protocol_U0_m_axis_ARP_TVALID,
        m_axis_ARP_TKEEP => ip_handler_detect_mac_protocol_U0_m_axis_ARP_TKEEP,
        m_axis_ARP_TLAST => ip_handler_detect_mac_protocol_U0_m_axis_ARP_TLAST);

    ip_handler_check_ip_checksum_U0 : component ip_handler_check_ip_checksum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_check_ip_checksum_U0_ap_start,
        ap_done => ip_handler_check_ip_checksum_U0_ap_done,
        ap_continue => ip_handler_check_ip_checksum_U0_ap_continue,
        ap_idle => ip_handler_check_ip_checksum_U0_ap_idle,
        ap_ready => ip_handler_check_ip_checksum_U0_ap_ready,
        ipDataFifo_V_dout => ip_handler_check_ip_checksum_U0_ipDataFifo_V_dout,
        ipDataFifo_V_empty_n => ip_handler_check_ip_checksum_U0_ipDataFifo_V_empty_n,
        ipDataFifo_V_read => ip_handler_check_ip_checksum_U0_ipDataFifo_V_read,
        iph_subSumsFifoOut_V_din => ip_handler_check_ip_checksum_U0_iph_subSumsFifoOut_V_din,
        iph_subSumsFifoOut_V_full_n => ip_handler_check_ip_checksum_U0_iph_subSumsFifoOut_V_full_n,
        iph_subSumsFifoOut_V_write => ip_handler_check_ip_checksum_U0_iph_subSumsFifoOut_V_write,
        ipDataCheckFifo_V_din => ip_handler_check_ip_checksum_U0_ipDataCheckFifo_V_din,
        ipDataCheckFifo_V_full_n => ip_handler_check_ip_checksum_U0_ipDataCheckFifo_V_full_n,
        ipDataCheckFifo_V_write => ip_handler_check_ip_checksum_U0_ipDataCheckFifo_V_write,
        myIpAddress_V => ip_handler_check_ip_checksum_U0_myIpAddress_V);

    ip_handler_iph_check_ip_checksum_U0 : component ip_handler_iph_check_ip_checksum
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_iph_check_ip_checksum_U0_ap_start,
        ap_done => ip_handler_iph_check_ip_checksum_U0_ap_done,
        ap_continue => ip_handler_iph_check_ip_checksum_U0_ap_continue,
        ap_idle => ip_handler_iph_check_ip_checksum_U0_ap_idle,
        ap_ready => ip_handler_iph_check_ip_checksum_U0_ap_ready,
        iph_subSumsFifoOut_V_dout => ip_handler_iph_check_ip_checksum_U0_iph_subSumsFifoOut_V_dout,
        iph_subSumsFifoOut_V_empty_n => ip_handler_iph_check_ip_checksum_U0_iph_subSumsFifoOut_V_empty_n,
        iph_subSumsFifoOut_V_read => ip_handler_iph_check_ip_checksum_U0_iph_subSumsFifoOut_V_read,
        ipValidFifo_V_din => ip_handler_iph_check_ip_checksum_U0_ipValidFifo_V_din,
        ipValidFifo_V_full_n => ip_handler_iph_check_ip_checksum_U0_ipValidFifo_V_full_n,
        ipValidFifo_V_write => ip_handler_iph_check_ip_checksum_U0_ipValidFifo_V_write);

    ip_handler_ip_invalid_dropper_U0 : component ip_handler_ip_invalid_dropper
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_ip_invalid_dropper_U0_ap_start,
        ap_done => ip_handler_ip_invalid_dropper_U0_ap_done,
        ap_continue => ip_handler_ip_invalid_dropper_U0_ap_continue,
        ap_idle => ip_handler_ip_invalid_dropper_U0_ap_idle,
        ap_ready => ip_handler_ip_invalid_dropper_U0_ap_ready,
        ipDataCheckFifo_V_dout => ip_handler_ip_invalid_dropper_U0_ipDataCheckFifo_V_dout,
        ipDataCheckFifo_V_empty_n => ip_handler_ip_invalid_dropper_U0_ipDataCheckFifo_V_empty_n,
        ipDataCheckFifo_V_read => ip_handler_ip_invalid_dropper_U0_ipDataCheckFifo_V_read,
        ipValidFifo_V_dout => ip_handler_ip_invalid_dropper_U0_ipValidFifo_V_dout,
        ipValidFifo_V_empty_n => ip_handler_ip_invalid_dropper_U0_ipValidFifo_V_empty_n,
        ipValidFifo_V_read => ip_handler_ip_invalid_dropper_U0_ipValidFifo_V_read,
        ipDataDropFifo_V_din => ip_handler_ip_invalid_dropper_U0_ipDataDropFifo_V_din,
        ipDataDropFifo_V_full_n => ip_handler_ip_invalid_dropper_U0_ipDataDropFifo_V_full_n,
        ipDataDropFifo_V_write => ip_handler_ip_invalid_dropper_U0_ipDataDropFifo_V_write);

    ip_handler_cut_length_U0 : component ip_handler_cut_length
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_cut_length_U0_ap_start,
        ap_done => ip_handler_cut_length_U0_ap_done,
        ap_continue => ip_handler_cut_length_U0_ap_continue,
        ap_idle => ip_handler_cut_length_U0_ap_idle,
        ap_ready => ip_handler_cut_length_U0_ap_ready,
        ipDataDropFifo_V_dout => ip_handler_cut_length_U0_ipDataDropFifo_V_dout,
        ipDataDropFifo_V_empty_n => ip_handler_cut_length_U0_ipDataDropFifo_V_empty_n,
        ipDataDropFifo_V_read => ip_handler_cut_length_U0_ipDataDropFifo_V_read,
        ipDataCutFifo_V_din => ip_handler_cut_length_U0_ipDataCutFifo_V_din,
        ipDataCutFifo_V_full_n => ip_handler_cut_length_U0_ipDataCutFifo_V_full_n,
        ipDataCutFifo_V_write => ip_handler_cut_length_U0_ipDataCutFifo_V_write);

    ip_handler_detect_ip_protocol_U0 : component ip_handler_detect_ip_protocol
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ip_handler_detect_ip_protocol_U0_ap_start,
        ap_done => ip_handler_detect_ip_protocol_U0_ap_done,
        ap_continue => ip_handler_detect_ip_protocol_U0_ap_continue,
        ap_idle => ip_handler_detect_ip_protocol_U0_ap_idle,
        ap_ready => ip_handler_detect_ip_protocol_U0_ap_ready,
        ipDataCutFifo_V_dout => ip_handler_detect_ip_protocol_U0_ipDataCutFifo_V_dout,
        ipDataCutFifo_V_empty_n => ip_handler_detect_ip_protocol_U0_ipDataCutFifo_V_empty_n,
        ipDataCutFifo_V_read => ip_handler_detect_ip_protocol_U0_ipDataCutFifo_V_read,
        m_axis_TCP_TREADY => ip_handler_detect_ip_protocol_U0_m_axis_TCP_TREADY,
        m_axis_UDP_TREADY => ip_handler_detect_ip_protocol_U0_m_axis_UDP_TREADY,
        m_axis_ICMP_TREADY => ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TREADY,
        m_axis_ICMP_TDATA => ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TDATA,
        m_axis_ICMP_TVALID => ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TVALID,
        m_axis_ICMP_TKEEP => ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TKEEP,
        m_axis_ICMP_TLAST => ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TLAST,
        m_axis_UDP_TDATA => ip_handler_detect_ip_protocol_U0_m_axis_UDP_TDATA,
        m_axis_UDP_TVALID => ip_handler_detect_ip_protocol_U0_m_axis_UDP_TVALID,
        m_axis_UDP_TKEEP => ip_handler_detect_ip_protocol_U0_m_axis_UDP_TKEEP,
        m_axis_UDP_TLAST => ip_handler_detect_ip_protocol_U0_m_axis_UDP_TLAST,
        m_axis_TCP_TDATA => ip_handler_detect_ip_protocol_U0_m_axis_TCP_TDATA,
        m_axis_TCP_TVALID => ip_handler_detect_ip_protocol_U0_m_axis_TCP_TVALID,
        m_axis_TCP_TKEEP => ip_handler_detect_ip_protocol_U0_m_axis_TCP_TKEEP,
        m_axis_TCP_TLAST => ip_handler_detect_ip_protocol_U0_m_axis_TCP_TLAST);

    ipDataFifo_V_U : component FIFO_ip_handler_ipDataFifo_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ipDataFifo_V_U_ap_dummy_ce,
        if_write_ce => ipDataFifo_V_U_ap_dummy_ce,
        if_din => ipDataFifo_V_din,
        if_full_n => ipDataFifo_V_full_n,
        if_write => ipDataFifo_V_write,
        if_dout => ipDataFifo_V_dout,
        if_empty_n => ipDataFifo_V_empty_n,
        if_read => ipDataFifo_V_read);

    iph_subSumsFifoOut_V_U : component FIFO_ip_handler_iph_subSumsFifoOut_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => iph_subSumsFifoOut_V_U_ap_dummy_ce,
        if_write_ce => iph_subSumsFifoOut_V_U_ap_dummy_ce,
        if_din => iph_subSumsFifoOut_V_din,
        if_full_n => iph_subSumsFifoOut_V_full_n,
        if_write => iph_subSumsFifoOut_V_write,
        if_dout => iph_subSumsFifoOut_V_dout,
        if_empty_n => iph_subSumsFifoOut_V_empty_n,
        if_read => iph_subSumsFifoOut_V_read);

    ipDataCheckFifo_V_U : component FIFO_ip_handler_ipDataCheckFifo_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ipDataCheckFifo_V_U_ap_dummy_ce,
        if_write_ce => ipDataCheckFifo_V_U_ap_dummy_ce,
        if_din => ipDataCheckFifo_V_din,
        if_full_n => ipDataCheckFifo_V_full_n,
        if_write => ipDataCheckFifo_V_write,
        if_dout => ipDataCheckFifo_V_dout,
        if_empty_n => ipDataCheckFifo_V_empty_n,
        if_read => ipDataCheckFifo_V_read);

    ipValidFifo_V_U : component FIFO_ip_handler_ipValidFifo_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ipValidFifo_V_U_ap_dummy_ce,
        if_write_ce => ipValidFifo_V_U_ap_dummy_ce,
        if_din => ipValidFifo_V_din,
        if_full_n => ipValidFifo_V_full_n,
        if_write => ipValidFifo_V_write,
        if_dout => ipValidFifo_V_dout,
        if_empty_n => ipValidFifo_V_empty_n,
        if_read => ipValidFifo_V_read);

    ipDataDropFifo_V_U : component FIFO_ip_handler_ipDataDropFifo_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ipDataDropFifo_V_U_ap_dummy_ce,
        if_write_ce => ipDataDropFifo_V_U_ap_dummy_ce,
        if_din => ipDataDropFifo_V_din,
        if_full_n => ipDataDropFifo_V_full_n,
        if_write => ipDataDropFifo_V_write,
        if_dout => ipDataDropFifo_V_dout,
        if_empty_n => ipDataDropFifo_V_empty_n,
        if_read => ipDataDropFifo_V_read);

    ipDataCutFifo_V_U : component FIFO_ip_handler_ipDataCutFifo_V
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ipDataCutFifo_V_U_ap_dummy_ce,
        if_write_ce => ipDataCutFifo_V_U_ap_dummy_ce,
        if_din => ipDataCutFifo_V_din,
        if_full_n => ipDataCutFifo_V_full_n,
        if_write => ipDataCutFifo_V_write,
        if_dout => ipDataCutFifo_V_dout,
        if_empty_n => ipDataCutFifo_V_empty_n,
        if_read => ipDataCutFifo_V_read);





    -- ap_reg_procdone_ip_handler_detect_ip_protocol_U0 assign process. --
    ap_reg_procdone_ip_handler_detect_ip_protocol_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_ip_handler_detect_ip_protocol_U0 <= ap_const_logic_0;
            else
            end if;
        end if;
    end process;


    -- ap_reg_procdone_ip_handler_detect_mac_protocol_U0 assign process. --
    ap_reg_procdone_ip_handler_detect_mac_protocol_U0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_reg_procdone_ip_handler_detect_mac_protocol_U0 <= ap_const_logic_0;
            else
            end if;
        end if;
    end process;


    -- ip_handler_cut_length_U0_ap_start assign process. --
    ip_handler_cut_length_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ip_handler_cut_length_U0_ap_start <= ap_const_logic_0;
            else
                ip_handler_cut_length_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ip_handler_detect_ip_protocol_U0_ap_start assign process. --
    ip_handler_detect_ip_protocol_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ip_handler_detect_ip_protocol_U0_ap_start <= ap_const_logic_0;
            else
                ip_handler_detect_ip_protocol_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ip_handler_ip_invalid_dropper_U0_ap_start assign process. --
    ip_handler_ip_invalid_dropper_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ip_handler_ip_invalid_dropper_U0_ap_start <= ap_const_logic_0;
            else
                ip_handler_ip_invalid_dropper_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ip_handler_iph_check_ip_checksum_U0_ap_start assign process. --
    ip_handler_iph_check_ip_checksum_U0_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ip_handler_iph_check_ip_checksum_U0_ap_start <= ap_const_logic_0;
            else
                ip_handler_iph_check_ip_checksum_U0_ap_start <= ap_const_logic_1;
            end if;
        end if;
    end process;


    -- ap_CS assign process. --
    ap_CS_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_CS <= ap_const_logic_0;
        end if;
    end process;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sig_hs_continue <= ap_const_logic_0;

    -- ap_sig_hs_done assign process. --
    ap_sig_hs_done_assign_proc : process(ap_reg_procdone_ip_handler_detect_mac_protocol_U0, ap_reg_procdone_ip_handler_detect_ip_protocol_U0)
    begin
        if (((ap_const_logic_1 = ap_reg_procdone_ip_handler_detect_mac_protocol_U0) and (ap_const_logic_1 = ap_reg_procdone_ip_handler_detect_ip_protocol_U0))) then 
            ap_sig_hs_done <= ap_const_logic_1;
        else 
            ap_sig_hs_done <= ap_const_logic_0;
        end if; 
    end process;

    ipDataCheckFifo_V_U_ap_dummy_ce <= ap_const_logic_1;
    ipDataCheckFifo_V_din <= ip_handler_check_ip_checksum_U0_ipDataCheckFifo_V_din;
    ipDataCheckFifo_V_read <= ip_handler_ip_invalid_dropper_U0_ipDataCheckFifo_V_read;
    ipDataCheckFifo_V_write <= ip_handler_check_ip_checksum_U0_ipDataCheckFifo_V_write;
    ipDataCutFifo_V_U_ap_dummy_ce <= ap_const_logic_1;
    ipDataCutFifo_V_din <= ip_handler_cut_length_U0_ipDataCutFifo_V_din;
    ipDataCutFifo_V_read <= ip_handler_detect_ip_protocol_U0_ipDataCutFifo_V_read;
    ipDataCutFifo_V_write <= ip_handler_cut_length_U0_ipDataCutFifo_V_write;
    ipDataDropFifo_V_U_ap_dummy_ce <= ap_const_logic_1;
    ipDataDropFifo_V_din <= ip_handler_ip_invalid_dropper_U0_ipDataDropFifo_V_din;
    ipDataDropFifo_V_read <= ip_handler_cut_length_U0_ipDataDropFifo_V_read;
    ipDataDropFifo_V_write <= ip_handler_ip_invalid_dropper_U0_ipDataDropFifo_V_write;
    ipDataFifo_V_U_ap_dummy_ce <= ap_const_logic_1;
    ipDataFifo_V_din <= ip_handler_detect_mac_protocol_U0_ipDataFifo_V_din;
    ipDataFifo_V_read <= ip_handler_check_ip_checksum_U0_ipDataFifo_V_read;
    ipDataFifo_V_write <= ip_handler_detect_mac_protocol_U0_ipDataFifo_V_write;
    ipValidFifo_V_U_ap_dummy_ce <= ap_const_logic_1;
    ipValidFifo_V_din <= ip_handler_iph_check_ip_checksum_U0_ipValidFifo_V_din;
    ipValidFifo_V_read <= ip_handler_ip_invalid_dropper_U0_ipValidFifo_V_read;
    ipValidFifo_V_write <= ip_handler_iph_check_ip_checksum_U0_ipValidFifo_V_write;
    ip_handler_check_ip_checksum_U0_ap_continue <= ap_const_logic_1;
    ip_handler_check_ip_checksum_U0_ap_start <= ap_const_logic_1;
    ip_handler_check_ip_checksum_U0_ipDataCheckFifo_V_full_n <= ipDataCheckFifo_V_full_n;
    ip_handler_check_ip_checksum_U0_ipDataFifo_V_dout <= ipDataFifo_V_dout;
    ip_handler_check_ip_checksum_U0_ipDataFifo_V_empty_n <= ipDataFifo_V_empty_n;
    ip_handler_check_ip_checksum_U0_iph_subSumsFifoOut_V_full_n <= iph_subSumsFifoOut_V_full_n;
    ip_handler_check_ip_checksum_U0_myIpAddress_V <= myIpAddress_V;
    ip_handler_cut_length_U0_ap_continue <= ap_const_logic_1;
    ip_handler_cut_length_U0_ipDataCutFifo_V_full_n <= ipDataCutFifo_V_full_n;
    ip_handler_cut_length_U0_ipDataDropFifo_V_dout <= ipDataDropFifo_V_dout;
    ip_handler_cut_length_U0_ipDataDropFifo_V_empty_n <= ipDataDropFifo_V_empty_n;
    ip_handler_detect_ip_protocol_U0_ap_continue <= ap_const_logic_1;
    ip_handler_detect_ip_protocol_U0_ipDataCutFifo_V_dout <= ipDataCutFifo_V_dout;
    ip_handler_detect_ip_protocol_U0_ipDataCutFifo_V_empty_n <= ipDataCutFifo_V_empty_n;
    ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TREADY <= m_axis_ICMP_TREADY;
    ip_handler_detect_ip_protocol_U0_m_axis_TCP_TREADY <= m_axis_TCP_TREADY;
    ip_handler_detect_ip_protocol_U0_m_axis_UDP_TREADY <= m_axis_UDP_TREADY;
    ip_handler_detect_mac_protocol_U0_ap_continue <= ap_const_logic_1;
    ip_handler_detect_mac_protocol_U0_ap_start <= ap_const_logic_1;
    ip_handler_detect_mac_protocol_U0_ipDataFifo_V_full_n <= ipDataFifo_V_full_n;
    ip_handler_detect_mac_protocol_U0_m_axis_ARP_TREADY <= m_axis_ARP_TREADY;
    ip_handler_detect_mac_protocol_U0_s_axis_raw_TDATA <= s_axis_raw_TDATA;
    ip_handler_detect_mac_protocol_U0_s_axis_raw_TKEEP <= s_axis_raw_TKEEP;
    ip_handler_detect_mac_protocol_U0_s_axis_raw_TLAST <= s_axis_raw_TLAST;
    ip_handler_detect_mac_protocol_U0_s_axis_raw_TVALID <= s_axis_raw_TVALID;
    ip_handler_ip_invalid_dropper_U0_ap_continue <= ap_const_logic_1;
    ip_handler_ip_invalid_dropper_U0_ipDataCheckFifo_V_dout <= ipDataCheckFifo_V_dout;
    ip_handler_ip_invalid_dropper_U0_ipDataCheckFifo_V_empty_n <= ipDataCheckFifo_V_empty_n;
    ip_handler_ip_invalid_dropper_U0_ipDataDropFifo_V_full_n <= ipDataDropFifo_V_full_n;
    ip_handler_ip_invalid_dropper_U0_ipValidFifo_V_dout <= ipValidFifo_V_dout;
    ip_handler_ip_invalid_dropper_U0_ipValidFifo_V_empty_n <= ipValidFifo_V_empty_n;
    ip_handler_iph_check_ip_checksum_U0_ap_continue <= ap_const_logic_1;
    ip_handler_iph_check_ip_checksum_U0_ipValidFifo_V_full_n <= ipValidFifo_V_full_n;
    ip_handler_iph_check_ip_checksum_U0_iph_subSumsFifoOut_V_dout <= iph_subSumsFifoOut_V_dout;
    ip_handler_iph_check_ip_checksum_U0_iph_subSumsFifoOut_V_empty_n <= iph_subSumsFifoOut_V_empty_n;
    iph_subSumsFifoOut_V_U_ap_dummy_ce <= ap_const_logic_1;
    iph_subSumsFifoOut_V_din <= ip_handler_check_ip_checksum_U0_iph_subSumsFifoOut_V_din;
    iph_subSumsFifoOut_V_read <= ip_handler_iph_check_ip_checksum_U0_iph_subSumsFifoOut_V_read;
    iph_subSumsFifoOut_V_write <= ip_handler_check_ip_checksum_U0_iph_subSumsFifoOut_V_write;
    m_axis_ARP_TDATA <= ip_handler_detect_mac_protocol_U0_m_axis_ARP_TDATA;
    m_axis_ARP_TKEEP <= ip_handler_detect_mac_protocol_U0_m_axis_ARP_TKEEP;
    m_axis_ARP_TLAST <= ip_handler_detect_mac_protocol_U0_m_axis_ARP_TLAST;
    m_axis_ARP_TVALID <= ip_handler_detect_mac_protocol_U0_m_axis_ARP_TVALID;
    m_axis_ICMP_TDATA <= ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TDATA;
    m_axis_ICMP_TKEEP <= ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TKEEP;
    m_axis_ICMP_TLAST <= ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TLAST;
    m_axis_ICMP_TVALID <= ip_handler_detect_ip_protocol_U0_m_axis_ICMP_TVALID;
    m_axis_TCP_TDATA <= ip_handler_detect_ip_protocol_U0_m_axis_TCP_TDATA;
    m_axis_TCP_TKEEP <= ip_handler_detect_ip_protocol_U0_m_axis_TCP_TKEEP;
    m_axis_TCP_TLAST <= ip_handler_detect_ip_protocol_U0_m_axis_TCP_TLAST;
    m_axis_TCP_TVALID <= ip_handler_detect_ip_protocol_U0_m_axis_TCP_TVALID;
    m_axis_UDP_TDATA <= ip_handler_detect_ip_protocol_U0_m_axis_UDP_TDATA;
    m_axis_UDP_TKEEP <= ip_handler_detect_ip_protocol_U0_m_axis_UDP_TKEEP;
    m_axis_UDP_TLAST <= ip_handler_detect_ip_protocol_U0_m_axis_UDP_TLAST;
    m_axis_UDP_TVALID <= ip_handler_detect_ip_protocol_U0_m_axis_UDP_TVALID;
    s_axis_raw_TREADY <= ip_handler_detect_mac_protocol_U0_s_axis_raw_TREADY;
end behav;
