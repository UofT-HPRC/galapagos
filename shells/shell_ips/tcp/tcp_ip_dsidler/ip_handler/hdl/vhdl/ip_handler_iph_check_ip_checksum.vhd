-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ip_handler_iph_check_ip_checksum is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    iph_subSumsFifoOut_V_dout : IN STD_LOGIC_VECTOR (68 downto 0);
    iph_subSumsFifoOut_V_empty_n : IN STD_LOGIC;
    iph_subSumsFifoOut_V_read : OUT STD_LOGIC;
    ipValidFifo_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    ipValidFifo_V_full_n : IN STD_LOGIC;
    ipValidFifo_V_write : OUT STD_LOGIC );
end;


architecture behav of ip_handler_iph_check_ip_checksum is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm0_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_ST_st2_fsm1_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st3_fsm2_1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_ST_st0_fsm1_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_st0_fsm2_0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm0 : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm0_0 : STD_LOGIC;
    signal ap_sig_bdd_26 : BOOLEAN;
    signal ap_CS_fsm1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding of ap_CS_fsm1 : signal is "none";
    signal ap_sig_cseq_ST_st0_fsm1_0 : STD_LOGIC;
    signal ap_sig_bdd_37 : BOOLEAN;
    signal ap_CS_fsm2 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding of ap_CS_fsm2 : signal is "none";
    signal ap_sig_cseq_ST_st0_fsm2_0 : STD_LOGIC;
    signal ap_sig_bdd_45 : BOOLEAN;
    signal tmp_nbreadreq_fu_70_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_63 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm1_1 : STD_LOGIC;
    signal ap_sig_bdd_69 : BOOLEAN;
    signal tmp_reg_233 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_reg_233_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_81 : BOOLEAN;
    signal ap_sig_cseq_ST_st3_fsm2_1 : STD_LOGIC;
    signal ap_sig_bdd_86 : BOOLEAN;
    signal ap_reg_ppstg_tmp_reg_233_pp0_it0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_reg_237 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_fu_146_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_102_reg_242 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_105_reg_247 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_158_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_106_reg_252 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_113_reg_257 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_tmp_113_reg_257_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_262 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_fu_102_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_sum2_V_load_new1_fu_92_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_sum1_V_load_new_fu_122_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_sum3_V_load_new_fu_112_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_106_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_26_fu_132_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_103_fu_170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_104_fu_173_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_107_fu_182_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_sum1_V_fu_185_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_sum1_V_cast_fu_190_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_cast_fu_178_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_27_fu_194_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_109_fu_200_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_111_fu_212_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_110_fu_208_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_112_fu_216_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm2 : STD_LOGIC_VECTOR (1 downto 0);


begin




    -- the current state (ap_CS_fsm0) of the state machine. --
    ap_CS_fsm0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm0 <= ap_ST_st1_fsm0_0;
            else
                ap_CS_fsm0 <= ap_NS_fsm0;
            end if;
        end if;
    end process;


    -- the current state (ap_CS_fsm1) of the state machine. --
    ap_CS_fsm1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm1 <= ap_ST_st0_fsm1_0;
            else
                ap_CS_fsm1 <= ap_NS_fsm1;
            end if;
        end if;
    end process;


    -- the current state (ap_CS_fsm2) of the state machine. --
    ap_CS_fsm2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm2 <= ap_ST_st0_fsm2_0;
            else
                ap_CS_fsm2 <= ap_NS_fsm2;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_81)))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or (ap_sig_bdd_81 and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1)))))) then
                ap_reg_ppstg_tmp_113_reg_257_pp0_it1 <= tmp_113_reg_257;
                ap_reg_ppstg_tmp_reg_233_pp0_it1 <= tmp_reg_233;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_70_p3 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_81 and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1)))))) then
                tmp_101_reg_237 <= tmp_s_fu_106_p2(16 downto 16);
                tmp_102_reg_242 <= tmp_102_fu_146_p1;
                tmp_105_reg_247 <= tmp_26_fu_132_p2(16 downto 16);
                tmp_106_reg_252 <= tmp_106_fu_158_p1;
                tmp_113_reg_257 <= iph_subSumsFifoOut_V_dout(68 downto 68);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or (ap_sig_bdd_81 and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1)))) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_233_pp0_it0)))) then
                tmp_28_reg_262 <= tmp_28_fu_222_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_81 and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1)))))) then
                tmp_reg_233 <= tmp_nbreadreq_fu_70_p3;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm2) of the state machine. --
    ap_NS_fsm2_assign_proc : process (ap_done_reg, ap_CS_fsm2, ap_sig_cseq_ST_st2_fsm1_1, ap_sig_bdd_81, ap_sig_cseq_ST_st3_fsm2_1)
    begin
        case ap_CS_fsm2 is
            when ap_ST_st3_fsm2_1 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_81)))) then
                    ap_NS_fsm2 <= ap_ST_st3_fsm2_1;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_81)) and not((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1)))) then
                    ap_NS_fsm2 <= ap_ST_st0_fsm2_0;
                else
                    ap_NS_fsm2 <= ap_ST_st3_fsm2_1;
                end if;
            when ap_ST_st0_fsm2_0 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm1_1) and not(((ap_done_reg = ap_const_logic_1) or (ap_sig_bdd_81 and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1)))))) then
                    ap_NS_fsm2 <= ap_ST_st3_fsm2_1;
                else
                    ap_NS_fsm2 <= ap_ST_st0_fsm2_0;
                end if;
            when others =>  
                ap_NS_fsm2 <= "XX";
        end case;
    end process;

    -- the next state (ap_NS_fsm1) of the state machine. --
    ap_NS_fsm1_assign_proc : process (ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_CS_fsm1, ap_sig_bdd_63, ap_sig_bdd_81, ap_sig_cseq_ST_st3_fsm2_1)
    begin
        case ap_CS_fsm1 is
            when ap_ST_st2_fsm1_1 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or (ap_sig_bdd_81 and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1)))) and not(ap_sig_bdd_63))) then
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_sig_bdd_81 and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1)))) and (not((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and ap_sig_bdd_63)))) then
                    ap_NS_fsm1 <= ap_ST_st0_fsm1_0;
                else
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                end if;
            when ap_ST_st0_fsm1_0 => 
                if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_81 and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1)))))) then
                    ap_NS_fsm1 <= ap_ST_st2_fsm1_1;
                else
                    ap_NS_fsm1 <= ap_ST_st0_fsm1_0;
                end if;
            when others =>  
                ap_NS_fsm1 <= "XX";
        end case;
    end process;

    -- the next state (ap_NS_fsm0) of the state machine. --
    ap_NS_fsm0_assign_proc : process (ap_done_reg, ap_CS_fsm0, ap_sig_bdd_63, ap_sig_bdd_81, ap_sig_cseq_ST_st3_fsm2_1)
    begin
        case ap_CS_fsm0 is
            when ap_ST_st1_fsm0_0 => 
                ap_NS_fsm0 <= ap_ST_st1_fsm0_0;
            when others =>  
                ap_NS_fsm0 <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_bdd_81, ap_sig_cseq_ST_st3_fsm2_1)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_81))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_cseq_ST_st0_fsm1_0, ap_sig_cseq_ST_st0_fsm2_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st0_fsm1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st0_fsm2_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, ap_sig_bdd_63, ap_sig_bdd_81, ap_sig_cseq_ST_st3_fsm2_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_81 and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_reg_ppstg_tmp_reg_233_pp0_it0 <= tmp_reg_233;

    -- ap_sig_bdd_26 assign process. --
    ap_sig_bdd_26_assign_proc : process(ap_CS_fsm0)
    begin
                ap_sig_bdd_26 <= (ap_CS_fsm0(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_37 assign process. --
    ap_sig_bdd_37_assign_proc : process(ap_CS_fsm1)
    begin
                ap_sig_bdd_37 <= (ap_const_lv1_1 = ap_CS_fsm1(0 downto 0));
    end process;


    -- ap_sig_bdd_45 assign process. --
    ap_sig_bdd_45_assign_proc : process(ap_CS_fsm2)
    begin
                ap_sig_bdd_45 <= (ap_const_lv1_1 = ap_CS_fsm2(0 downto 0));
    end process;


    -- ap_sig_bdd_63 assign process. --
    ap_sig_bdd_63_assign_proc : process(ap_start, ap_done_reg, iph_subSumsFifoOut_V_empty_n, tmp_nbreadreq_fu_70_p3)
    begin
                ap_sig_bdd_63 <= (((iph_subSumsFifoOut_V_empty_n = ap_const_logic_0) and not((tmp_nbreadreq_fu_70_p3 = ap_const_lv1_0))) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_69 assign process. --
    ap_sig_bdd_69_assign_proc : process(ap_CS_fsm1)
    begin
                ap_sig_bdd_69 <= (ap_const_lv1_1 = ap_CS_fsm1(1 downto 1));
    end process;


    -- ap_sig_bdd_81 assign process. --
    ap_sig_bdd_81_assign_proc : process(ipValidFifo_V_full_n, ap_reg_ppstg_tmp_reg_233_pp0_it1)
    begin
                ap_sig_bdd_81 <= ((ipValidFifo_V_full_n = ap_const_logic_0) and not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_233_pp0_it1)));
    end process;


    -- ap_sig_bdd_86 assign process. --
    ap_sig_bdd_86_assign_proc : process(ap_CS_fsm2)
    begin
                ap_sig_bdd_86 <= (ap_const_lv1_1 = ap_CS_fsm2(1 downto 1));
    end process;


    -- ap_sig_cseq_ST_st0_fsm1_0 assign process. --
    ap_sig_cseq_ST_st0_fsm1_0_assign_proc : process(ap_sig_bdd_37)
    begin
        if (ap_sig_bdd_37) then 
            ap_sig_cseq_ST_st0_fsm1_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st0_fsm1_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st0_fsm2_0 assign process. --
    ap_sig_cseq_ST_st0_fsm2_0_assign_proc : process(ap_sig_bdd_45)
    begin
        if (ap_sig_bdd_45) then 
            ap_sig_cseq_ST_st0_fsm2_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st0_fsm2_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm0_0 assign process. --
    ap_sig_cseq_ST_st1_fsm0_0_assign_proc : process(ap_sig_bdd_26)
    begin
        if (ap_sig_bdd_26) then 
            ap_sig_cseq_ST_st1_fsm0_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm0_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm1_1 assign process. --
    ap_sig_cseq_ST_st2_fsm1_1_assign_proc : process(ap_sig_bdd_69)
    begin
        if (ap_sig_bdd_69) then 
            ap_sig_cseq_ST_st2_fsm1_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm1_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm2_1 assign process. --
    ap_sig_cseq_ST_st3_fsm2_1_assign_proc : process(ap_sig_bdd_86)
    begin
        if (ap_sig_bdd_86) then 
            ap_sig_cseq_ST_st3_fsm2_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm2_1 <= ap_const_logic_0;
        end if; 
    end process;

    ipValidFifo_V_din <= (tmp_28_reg_262 and ap_reg_ppstg_tmp_113_reg_257_pp0_it1);

    -- ipValidFifo_V_write assign process. --
    ipValidFifo_V_write_assign_proc : process(ap_done_reg, ap_reg_ppstg_tmp_reg_233_pp0_it1, ap_sig_bdd_81, ap_sig_cseq_ST_st3_fsm2_1)
    begin
        if ((not((ap_const_lv1_0 = ap_reg_ppstg_tmp_reg_233_pp0_it1)) and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_81)))) then 
            ipValidFifo_V_write <= ap_const_logic_1;
        else 
            ipValidFifo_V_write <= ap_const_logic_0;
        end if; 
    end process;


    -- iph_subSumsFifoOut_V_read assign process. --
    iph_subSumsFifoOut_V_read_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm0_0, tmp_nbreadreq_fu_70_p3, ap_sig_bdd_63, ap_sig_bdd_81, ap_sig_cseq_ST_st3_fsm2_1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm0_0) and not((tmp_nbreadreq_fu_70_p3 = ap_const_lv1_0)) and not(((ap_done_reg = ap_const_logic_1) or ap_sig_bdd_63 or (ap_sig_bdd_81 and (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm2_1)))))) then 
            iph_subSumsFifoOut_V_read <= ap_const_logic_1;
        else 
            iph_subSumsFifoOut_V_read <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_fu_178_p1 <= std_logic_vector(resize(unsigned(tmp_104_fu_173_p2),17));
    tmp_100_fu_102_p1 <= iph_subSumsFifoOut_V_dout(17 - 1 downto 0);
    tmp_102_fu_146_p1 <= tmp_s_fu_106_p2(16 - 1 downto 0);
    tmp_103_fu_170_p1 <= std_logic_vector(resize(unsigned(tmp_101_reg_237),16));
    tmp_104_fu_173_p2 <= std_logic_vector(unsigned(tmp_103_fu_170_p1) + unsigned(tmp_102_reg_242));
    tmp_106_fu_158_p1 <= tmp_26_fu_132_p2(16 - 1 downto 0);
    tmp_107_fu_182_p1 <= std_logic_vector(resize(unsigned(tmp_105_reg_247),16));
    tmp_109_fu_200_p3 <= tmp_27_fu_194_p2(16 downto 16);
    tmp_110_fu_208_p1 <= tmp_27_fu_194_p2(16 - 1 downto 0);
    tmp_111_fu_212_p1 <= std_logic_vector(resize(unsigned(tmp_109_fu_200_p3),16));
    tmp_112_fu_216_p2 <= std_logic_vector(unsigned(tmp_111_fu_212_p1) + unsigned(tmp_110_fu_208_p1));
    tmp_26_fu_132_p2 <= std_logic_vector(unsigned(tmp_sum1_V_load_new_fu_122_p4) + unsigned(tmp_sum3_V_load_new_fu_112_p4));
    tmp_27_fu_194_p2 <= std_logic_vector(unsigned(tmp_sum1_V_cast_fu_190_p1) + unsigned(p_cast_fu_178_p1));
    tmp_28_fu_222_p2 <= "1" when (tmp_112_fu_216_p2 = ap_const_lv16_FFFF) else "0";
    tmp_nbreadreq_fu_70_p3 <= (0=>iph_subSumsFifoOut_V_empty_n, others=>'-');
    tmp_s_fu_106_p2 <= std_logic_vector(unsigned(tmp_100_fu_102_p1) + unsigned(tmp_sum2_V_load_new1_fu_92_p4));
    tmp_sum1_V_cast_fu_190_p1 <= std_logic_vector(resize(unsigned(tmp_sum1_V_fu_185_p2),17));
    tmp_sum1_V_fu_185_p2 <= std_logic_vector(unsigned(tmp_107_fu_182_p1) + unsigned(tmp_106_reg_252));
    tmp_sum1_V_load_new_fu_122_p4 <= iph_subSumsFifoOut_V_dout(33 downto 17);
    tmp_sum2_V_load_new1_fu_92_p4 <= iph_subSumsFifoOut_V_dout(50 downto 34);
    tmp_sum3_V_load_new_fu_112_p4 <= iph_subSumsFifoOut_V_dout(67 downto 51);
end behav;
