// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module tcp_slowrttoe_updateReplyHandler (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        sessionUpdate_rsp_V_dout,
        sessionUpdate_rsp_V_empty_n,
        sessionUpdate_rsp_V_read,
        slc_sessionInsert_rsp_V_source_din,
        slc_sessionInsert_rsp_V_source_full_n,
        slc_sessionInsert_rsp_V_source_write,
        slc_sessionInsert_rsp_V_op_din,
        slc_sessionInsert_rsp_V_op_full_n,
        slc_sessionInsert_rsp_V_op_write,
        slc_sessionInsert_rsp_V_sessio_din,
        slc_sessionInsert_rsp_V_sessio_full_n,
        slc_sessionInsert_rsp_V_sessio_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_pp0_stg0_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] sessionUpdate_rsp_V_dout;
input   sessionUpdate_rsp_V_empty_n;
output   sessionUpdate_rsp_V_read;
output  [0:0] slc_sessionInsert_rsp_V_source_din;
input   slc_sessionInsert_rsp_V_source_full_n;
output   slc_sessionInsert_rsp_V_source_write;
output  [0:0] slc_sessionInsert_rsp_V_op_din;
input   slc_sessionInsert_rsp_V_op_full_n;
output   slc_sessionInsert_rsp_V_op_write;
output  [13:0] slc_sessionInsert_rsp_V_sessio_din;
input   slc_sessionInsert_rsp_V_sessio_full_n;
output   slc_sessionInsert_rsp_V_sessio_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg sessionUpdate_rsp_V_read;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_pp0_stg0_fsm_0;
reg    ap_sig_bdd_20;
wire    ap_reg_ppiten_pp0_it0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
wire   [0:0] tmp15_nbreadreq_fu_68_p3;
reg    ap_sig_bdd_49;
wire    slc_sessionInsert_rsp_V_op1_status;
reg   [0:0] tmp15_reg_119;
reg   [0:0] tmp_713_reg_128;
reg    ap_sig_bdd_60;
wire   [0:0] tmp_source_fu_97_p1;
reg   [0:0] tmp_source_reg_123;
reg   [13:0] tmp_sessionID_V_reg_132;
reg    slc_sessionInsert_rsp_V_op1_update;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_pprstidle_pp0;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_pp0_stg0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_done_reg == ap_const_logic_1) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_49) | (ap_sig_bdd_60 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_done_reg == ap_const_logic_1) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_49) | (ap_sig_bdd_60 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
            ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~((ap_done_reg == ap_const_logic_1) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_49) | (ap_sig_bdd_60 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        tmp15_reg_119 <= tmp15_nbreadreq_fu_68_p3;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(tmp15_nbreadreq_fu_68_p3 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_49) | (ap_sig_bdd_60 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        tmp_713_reg_128 <= sessionUpdate_rsp_V_dout[ap_const_lv32_1];
        tmp_sessionID_V_reg_132 <= {{sessionUpdate_rsp_V_dout[ap_const_lv32_F : ap_const_lv32_2]}};
        tmp_source_reg_123 <= tmp_source_fu_97_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_49 or ap_sig_bdd_60)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_done_reg == ap_const_logic_1) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_49) | (ap_sig_bdd_60 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_reg_ppiten_pp0_it1))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_49 or ap_sig_bdd_60)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~((ap_done_reg == ap_const_logic_1) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_49) | (ap_sig_bdd_60 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_pp0_stg0_fsm_0 assign process. ///
always @ (ap_sig_bdd_20)
begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_pp0_stg0_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_pprstidle_pp0 assign process. ///
always @ (ap_start or ap_reg_ppiten_pp0_it0)
begin
    if (((ap_const_logic_0 == ap_reg_ppiten_pp0_it0) & (ap_const_logic_0 == ap_start))) begin
        ap_sig_pprstidle_pp0 = ap_const_logic_1;
    end else begin
        ap_sig_pprstidle_pp0 = ap_const_logic_0;
    end
end

/// sessionUpdate_rsp_V_read assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or tmp15_nbreadreq_fu_68_p3 or ap_sig_bdd_49 or ap_sig_bdd_60)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(tmp15_nbreadreq_fu_68_p3 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_49) | (ap_sig_bdd_60 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        sessionUpdate_rsp_V_read = ap_const_logic_1;
    end else begin
        sessionUpdate_rsp_V_read = ap_const_logic_0;
    end
end

/// slc_sessionInsert_rsp_V_op1_update assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_pp0_stg0_fsm_0 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_49 or tmp15_reg_119 or tmp_713_reg_128 or ap_sig_bdd_60)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_pp0_stg0_fsm_0) & ~(ap_const_lv1_0 == tmp15_reg_119) & (ap_const_lv1_0 == tmp_713_reg_128) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~((ap_done_reg == ap_const_logic_1) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ap_sig_bdd_49) | (ap_sig_bdd_60 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1))))) begin
        slc_sessionInsert_rsp_V_op1_update = ap_const_logic_1;
    end else begin
        slc_sessionInsert_rsp_V_op1_update = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_done_reg or ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_49 or ap_sig_bdd_60 or ap_sig_pprstidle_pp0)
begin
    case (ap_CS_fsm)
        ap_ST_pp0_stg0_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_pp0_stg0_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_reg_ppiten_pp0_it0 = ap_start;

/// ap_sig_bdd_20 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_49 assign process. ///
always @ (ap_start or ap_done_reg or sessionUpdate_rsp_V_empty_n or tmp15_nbreadreq_fu_68_p3)
begin
    ap_sig_bdd_49 = (((sessionUpdate_rsp_V_empty_n == ap_const_logic_0) & ~(tmp15_nbreadreq_fu_68_p3 == ap_const_lv1_0)) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_60 assign process. ///
always @ (slc_sessionInsert_rsp_V_op1_status or tmp15_reg_119 or tmp_713_reg_128)
begin
    ap_sig_bdd_60 = ((slc_sessionInsert_rsp_V_op1_status == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp15_reg_119) & (ap_const_lv1_0 == tmp_713_reg_128));
end
assign slc_sessionInsert_rsp_V_op1_status = (slc_sessionInsert_rsp_V_source_full_n & slc_sessionInsert_rsp_V_op_full_n & slc_sessionInsert_rsp_V_sessio_full_n);
assign slc_sessionInsert_rsp_V_op_din = ap_const_lv1_0;
assign slc_sessionInsert_rsp_V_op_write = slc_sessionInsert_rsp_V_op1_update;
assign slc_sessionInsert_rsp_V_sessio_din = tmp_sessionID_V_reg_132;
assign slc_sessionInsert_rsp_V_sessio_write = slc_sessionInsert_rsp_V_op1_update;
assign slc_sessionInsert_rsp_V_source_din = tmp_source_reg_123;
assign slc_sessionInsert_rsp_V_source_write = slc_sessionInsert_rsp_V_op1_update;
assign tmp15_nbreadreq_fu_68_p3 = sessionUpdate_rsp_V_empty_n;
assign tmp_source_fu_97_p1 = sessionUpdate_rsp_V_dout[0:0];


endmodule //tcp_slowrttoe_updateReplyHandler

