-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity icmp_server_udpPortUnreachable is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    udpIn_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    udpIn_TVALID : IN STD_LOGIC;
    udpIn_TREADY : OUT STD_LOGIC;
    udpIn_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    udpIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    ttlIn_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    ttlIn_TVALID : IN STD_LOGIC;
    ttlIn_TREADY : OUT STD_LOGIC;
    ttlIn_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    ttlIn_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    udpPort2addIpHeader_data_V_dat_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    udpPort2addIpHeader_data_V_dat_full_n : IN STD_LOGIC;
    udpPort2addIpHeader_data_V_dat_write : OUT STD_LOGIC;
    udpPort2addIpHeader_data_V_kee_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    udpPort2addIpHeader_data_V_kee_full_n : IN STD_LOGIC;
    udpPort2addIpHeader_data_V_kee_write : OUT STD_LOGIC;
    udpPort2addIpHeader_data_V_las_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    udpPort2addIpHeader_data_V_las_full_n : IN STD_LOGIC;
    udpPort2addIpHeader_data_V_las_write : OUT STD_LOGIC;
    udpPort2addIpHeader_header_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    udpPort2addIpHeader_header_V_V_full_n : IN STD_LOGIC;
    udpPort2addIpHeader_header_V_V_write : OUT STD_LOGIC;
    checksumStreams_V_V_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    checksumStreams_V_V_1_full_n : IN STD_LOGIC;
    checksumStreams_V_V_1_write : OUT STD_LOGIC );
end;


architecture behav of icmp_server_udpPortUnreachable is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_103 : STD_LOGIC_VECTOR (8 downto 0) := "100000011";
    constant ap_const_lv9_B : STD_LOGIC_VECTOR (8 downto 0) := "000001011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv20_FFFFF : STD_LOGIC_VECTOR (19 downto 0) := "11111111111111111111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal udpState : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ipWordCounter_V : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal streamSource_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal udpChecksum_V : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal tmp_last_V_9_phi_fu_230_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_nbwritereq_fu_150_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nbwritereq_fu_165_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal udpPort2addIpHeader_data_V_dat1_status : STD_LOGIC;
    signal tmp_22_nbwritereq_fu_210_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_684_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_139 : BOOLEAN;
    signal tmp_keep_V_9_phi_fu_240_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_19_phi_fu_250_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_last_V_10_phi_fu_260_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_10_phi_fu_270_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_18_phi_fu_280_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_17_phi_fu_291_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_nbreadreq_fu_126_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_nbreadreq_fu_138_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal udpPort2addIpHeader_data_V_dat1_update : STD_LOGIC;
    signal tmp_data_V_6_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_666_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_Val2_s_fu_447_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_28_fu_550_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_31_fu_648_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_33_cast_fu_717_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_95_fu_379_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_387_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_cast_fu_383_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_cast_fu_397_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_97_fu_411_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_96_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_98_fu_415_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_401_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_99_fu_425_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_cast_fu_421_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_1_fu_433_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_25_fu_437_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_26_cast_fu_443_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_s_fu_470_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_8_fu_480_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_9_fu_498_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_101_fu_512_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_cast_fu_494_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_36_cast_fu_490_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_26_fu_520_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_40_cast_cast_fu_516_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_38_cast_cast_fu_508_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp2_fu_530_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_41_cast_fu_526_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp2_cast_fu_536_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_27_fu_540_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_43_cast_fu_546_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_10_fu_568_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_11_fu_578_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_12_fu_596_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_102_fu_610_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_48_cast_fu_592_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_47_cast_fu_588_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_29_fu_618_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_50_cast_cast_fu_614_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_49_cast_cast_fu_606_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp1_fu_628_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_51_cast_fu_624_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_cast_fu_634_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_30_fu_638_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_53_cast_fu_644_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Val2_16_cast1_fu_708_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_480 : BOOLEAN;
    signal ap_sig_bdd_125 : BOOLEAN;
    signal ap_sig_bdd_478 : BOOLEAN;
    signal ap_sig_bdd_486 : BOOLEAN;
    signal ap_sig_bdd_488 : BOOLEAN;
    signal ap_sig_bdd_485 : BOOLEAN;
    signal ap_sig_bdd_494 : BOOLEAN;
    signal ap_sig_bdd_497 : BOOLEAN;
    signal ap_sig_bdd_198 : BOOLEAN;
    signal ap_sig_bdd_76 : BOOLEAN;
    signal ap_sig_bdd_88 : BOOLEAN;
    signal ap_sig_bdd_117 : BOOLEAN;
    signal ap_sig_bdd_126 : BOOLEAN;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal ap_sig_bdd_84 : BOOLEAN;
    signal ap_sig_bdd_479 : BOOLEAN;
    signal ap_sig_bdd_205 : BOOLEAN;
    signal ap_sig_bdd_210 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_139))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ipWordCounter_V assign process. --
    ipWordCounter_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_478) then
                if (ap_sig_bdd_125) then 
                    ipWordCounter_V <= ap_const_lv3_0;
                elsif (ap_sig_bdd_480) then 
                    ipWordCounter_V <= tmp_33_fu_666_p2;
                end if;
            end if; 
        end if;
    end process;

    -- streamSource_V assign process. --
    streamSource_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_198) then
                if (not((ap_const_lv1_0 = tmp_nbreadreq_fu_126_p5))) then 
                    streamSource_V <= ap_const_lv1_0;
                elsif (ap_sig_bdd_486) then 
                    streamSource_V <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    -- udpChecksum_V assign process. --
    udpChecksum_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_142) then
                if (ap_sig_bdd_126) then 
                    udpChecksum_V <= tmp_33_cast_fu_717_p1;
                elsif (ap_sig_bdd_117) then 
                    udpChecksum_V <= tmp_31_fu_648_p2;
                elsif (ap_sig_bdd_88) then 
                    udpChecksum_V <= tmp_28_fu_550_p2;
                elsif (ap_sig_bdd_76) then 
                    udpChecksum_V <= p_Val2_s_fu_447_p2;
                end if;
            end if; 
        end if;
    end process;

    -- udpState assign process. --
    udpState_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_142) then
                if (ap_sig_bdd_126) then 
                    udpState <= ap_const_lv2_1;
                elsif (ap_sig_bdd_210) then 
                    udpState <= ap_const_lv2_2;
                elsif (ap_sig_bdd_205) then 
                    udpState <= ap_const_lv2_3;
                elsif (ap_sig_bdd_76) then 
                    udpState <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_139)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_139)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_139)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_139)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_139))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_117 assign process. --
    ap_sig_bdd_117_assign_proc : process(udpState, grp_fu_319_p2, grp_nbwritereq_fu_165_p5, tmp_22_nbwritereq_fu_210_p3)
    begin
                ap_sig_bdd_117 <= (not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3)));
    end process;


    -- ap_sig_bdd_125 assign process. --
    ap_sig_bdd_125_assign_proc : process(udpState, brmerge_fu_684_p2)
    begin
                ap_sig_bdd_125 <= ((ap_const_lv2_0 = udpState) and not((ap_const_lv1_0 = brmerge_fu_684_p2)));
    end process;


    -- ap_sig_bdd_126 assign process. --
    ap_sig_bdd_126_assign_proc : process(udpState, grp_nbwritereq_fu_165_p5, brmerge_fu_684_p2)
    begin
                ap_sig_bdd_126 <= (not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (ap_const_lv2_0 = udpState) and not((ap_const_lv1_0 = brmerge_fu_684_p2)));
    end process;


    -- ap_sig_bdd_139 assign process. --
    ap_sig_bdd_139_assign_proc : process(ap_start, ap_done_reg, udpIn_TVALID, ttlIn_TVALID, udpState, streamSource_V, udpPort2addIpHeader_header_V_V_full_n, checksumStreams_V_V_1_full_n, tmp_23_nbwritereq_fu_150_p3, grp_fu_319_p2, grp_nbwritereq_fu_165_p5, udpPort2addIpHeader_data_V_dat1_status, tmp_22_nbwritereq_fu_210_p3, brmerge_fu_684_p2)
    begin
                ap_sig_bdd_139 <= (((checksumStreams_V_V_1_full_n = ap_const_logic_0) and (udpState = ap_const_lv2_3) and not((ap_const_lv1_0 = tmp_23_nbwritereq_fu_150_p3))) or ((udpIn_TVALID = ap_const_logic_0) and (udpState = ap_const_lv2_2) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (ap_const_lv1_0 = streamSource_V)) or ((udpState = ap_const_lv2_2) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (ttlIn_TVALID = ap_const_logic_0) and not((ap_const_lv1_0 = streamSource_V))) or ((udpState = ap_const_lv2_2) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (udpPort2addIpHeader_data_V_dat1_status = ap_const_logic_0)) or ((udpIn_TVALID = ap_const_logic_0) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (ap_const_lv1_0 = streamSource_V) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3))) or (not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (ttlIn_TVALID = ap_const_logic_0) and not((ap_const_lv1_0 = streamSource_V)) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3))) or (not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (udpPort2addIpHeader_data_V_dat1_status = ap_const_logic_0) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3))) or (not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3)) and (udpPort2addIpHeader_header_V_V_full_n = ap_const_logic_0)) or (not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (udpPort2addIpHeader_data_V_dat1_status = ap_const_logic_0) and (ap_const_lv2_0 = udpState) and not((ap_const_lv1_0 = brmerge_fu_684_p2))) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_139)
    begin
                ap_sig_bdd_142 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_139));
    end process;


    -- ap_sig_bdd_198 assign process. --
    ap_sig_bdd_198_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, udpState, grp_nbwritereq_fu_165_p5, brmerge_fu_684_p2, ap_sig_bdd_139)
    begin
                ap_sig_bdd_198 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (ap_const_lv2_0 = udpState) and not((ap_const_lv1_0 = brmerge_fu_684_p2)) and not(ap_sig_bdd_139));
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_205 assign process. --
    ap_sig_bdd_205_assign_proc : process(udpState, tmp_last_V_9_phi_fu_230_p4, grp_fu_319_p2, grp_nbwritereq_fu_165_p5)
    begin
                ap_sig_bdd_205 <= ((udpState = ap_const_lv2_2) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and not((ap_const_lv1_0 = tmp_last_V_9_phi_fu_230_p4)));
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(udpState, grp_fu_319_p2, grp_nbwritereq_fu_165_p5, tmp_22_nbwritereq_fu_210_p3, tmp_32_fu_660_p2)
    begin
                ap_sig_bdd_210 <= (not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3)) and not((ap_const_lv1_0 = tmp_32_fu_660_p2)));
    end process;


    -- ap_sig_bdd_478 assign process. --
    ap_sig_bdd_478_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, grp_nbwritereq_fu_165_p5, ap_sig_bdd_139)
    begin
                ap_sig_bdd_478 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and not(ap_sig_bdd_139));
    end process;


    -- ap_sig_bdd_479 assign process. --
    ap_sig_bdd_479_assign_proc : process(udpState, grp_fu_319_p2, tmp_22_nbwritereq_fu_210_p3)
    begin
                ap_sig_bdd_479 <= (not((ap_const_lv1_0 = grp_fu_319_p2)) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3)));
    end process;


    -- ap_sig_bdd_480 assign process. --
    ap_sig_bdd_480_assign_proc : process(udpState, grp_fu_319_p2, tmp_22_nbwritereq_fu_210_p3, tmp_32_fu_660_p2)
    begin
                ap_sig_bdd_480 <= (not((ap_const_lv1_0 = grp_fu_319_p2)) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3)) and (ap_const_lv1_0 = tmp_32_fu_660_p2));
    end process;


    -- ap_sig_bdd_485 assign process. --
    ap_sig_bdd_485_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, udpState, grp_nbwritereq_fu_165_p5, brmerge_fu_684_p2)
    begin
                ap_sig_bdd_485 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (ap_const_lv2_0 = udpState) and not((ap_const_lv1_0 = brmerge_fu_684_p2)));
    end process;


    -- ap_sig_bdd_486 assign process. --
    ap_sig_bdd_486_assign_proc : process(tmp_nbreadreq_fu_126_p5, tmp_17_nbreadreq_fu_138_p5)
    begin
                ap_sig_bdd_486 <= ((ap_const_lv1_0 = tmp_nbreadreq_fu_126_p5) and not((ap_const_lv1_0 = tmp_17_nbreadreq_fu_138_p5)));
    end process;


    -- ap_sig_bdd_488 assign process. --
    ap_sig_bdd_488_assign_proc : process(tmp_nbreadreq_fu_126_p5, tmp_17_nbreadreq_fu_138_p5)
    begin
                ap_sig_bdd_488 <= ((ap_const_lv1_0 = tmp_nbreadreq_fu_126_p5) and (ap_const_lv1_0 = tmp_17_nbreadreq_fu_138_p5));
    end process;


    -- ap_sig_bdd_494 assign process. --
    ap_sig_bdd_494_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, udpState, grp_fu_319_p2, grp_nbwritereq_fu_165_p5, tmp_22_nbwritereq_fu_210_p3)
    begin
                ap_sig_bdd_494 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3)));
    end process;


    -- ap_sig_bdd_497 assign process. --
    ap_sig_bdd_497_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, udpState, grp_fu_319_p2, grp_nbwritereq_fu_165_p5)
    begin
                ap_sig_bdd_497 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (udpState = ap_const_lv2_2) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)));
    end process;


    -- ap_sig_bdd_76 assign process. --
    ap_sig_bdd_76_assign_proc : process(udpState, tmp_23_nbwritereq_fu_150_p3)
    begin
                ap_sig_bdd_76 <= ((udpState = ap_const_lv2_3) and not((ap_const_lv1_0 = tmp_23_nbwritereq_fu_150_p3)));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(udpState, grp_fu_319_p2)
    begin
                ap_sig_bdd_84 <= ((udpState = ap_const_lv2_2) and not((ap_const_lv1_0 = grp_fu_319_p2)));
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(udpState, grp_fu_319_p2, grp_nbwritereq_fu_165_p5)
    begin
                ap_sig_bdd_88 <= ((udpState = ap_const_lv2_2) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    brmerge_fu_684_p2 <= (tmp_nbreadreq_fu_126_p5 or tmp_17_nbreadreq_fu_138_p5);
    checksumStreams_V_V_1_din <= p_Val2_s_fu_447_p2(16 - 1 downto 0);

    -- checksumStreams_V_V_1_write assign process. --
    checksumStreams_V_V_1_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, udpState, tmp_23_nbwritereq_fu_150_p3, ap_sig_bdd_139)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (udpState = ap_const_lv2_3) and not((ap_const_lv1_0 = tmp_23_nbwritereq_fu_150_p3)) and not(ap_sig_bdd_139))) then 
            checksumStreams_V_V_1_write <= ap_const_logic_1;
        else 
            checksumStreams_V_V_1_write <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_303_p2 <= (streamSource_V xor ap_const_lv1_1);
    grp_fu_308_p2 <= (tmp_nbreadreq_fu_126_p5 and grp_fu_303_p2);
    grp_fu_314_p2 <= (streamSource_V and tmp_17_nbreadreq_fu_138_p5);
    grp_fu_319_p2 <= (grp_fu_308_p2 or grp_fu_314_p2);
    grp_nbwritereq_fu_165_p5 <= (0=>(udpPort2addIpHeader_data_V_dat_full_n and udpPort2addIpHeader_data_V_kee_full_n and udpPort2addIpHeader_data_V_las_full_n), others=>'-');
    p_1_cast_fu_421_p1 <= std_logic_vector(resize(unsigned(tmp_98_fu_415_p2),17));
    p_Result_10_fu_568_p4 <= p_Val2_18_phi_fu_280_p4(63 downto 48);
    p_Result_11_fu_578_p4 <= p_Val2_18_phi_fu_280_p4(47 downto 32);
    p_Result_12_fu_596_p4 <= p_Val2_18_phi_fu_280_p4(31 downto 16);
    p_Result_8_fu_480_p4 <= p_Val2_19_phi_fu_250_p4(47 downto 32);
    p_Result_9_fu_498_p4 <= p_Val2_19_phi_fu_250_p4(31 downto 16);
    p_Result_s_fu_470_p4 <= p_Val2_19_phi_fu_250_p4(63 downto 48);
        p_Val2_16_cast1_fu_708_p1 <= std_logic_vector(resize(signed(p_Val2_17_phi_fu_291_p6),10));


    -- p_Val2_17_phi_fu_291_p6 assign process. --
    p_Val2_17_phi_fu_291_p6_assign_proc : process(tmp_nbreadreq_fu_126_p5, ap_sig_bdd_486, ap_sig_bdd_488, ap_sig_bdd_485)
    begin
        if (ap_sig_bdd_485) then
            if (ap_sig_bdd_488) then 
                p_Val2_17_phi_fu_291_p6 <= ap_const_lv9_0;
            elsif (ap_sig_bdd_486) then 
                p_Val2_17_phi_fu_291_p6 <= ap_const_lv9_B;
            elsif (not((ap_const_lv1_0 = tmp_nbreadreq_fu_126_p5))) then 
                p_Val2_17_phi_fu_291_p6 <= ap_const_lv9_103;
            else 
                p_Val2_17_phi_fu_291_p6 <= "XXXXXXXXX";
            end if;
        else 
            p_Val2_17_phi_fu_291_p6 <= "XXXXXXXXX";
        end if; 
    end process;


    -- p_Val2_18_phi_fu_280_p4 assign process. --
    p_Val2_18_phi_fu_280_p4_assign_proc : process(udpIn_TDATA, ttlIn_TDATA, streamSource_V, ap_sig_bdd_494)
    begin
        if (ap_sig_bdd_494) then
            if ((ap_const_lv1_0 = streamSource_V)) then 
                p_Val2_18_phi_fu_280_p4 <= udpIn_TDATA;
            elsif (not((ap_const_lv1_0 = streamSource_V))) then 
                p_Val2_18_phi_fu_280_p4 <= ttlIn_TDATA;
            else 
                p_Val2_18_phi_fu_280_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            p_Val2_18_phi_fu_280_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- p_Val2_19_phi_fu_250_p4 assign process. --
    p_Val2_19_phi_fu_250_p4_assign_proc : process(udpIn_TDATA, ttlIn_TDATA, streamSource_V, ap_sig_bdd_497)
    begin
        if (ap_sig_bdd_497) then
            if ((ap_const_lv1_0 = streamSource_V)) then 
                p_Val2_19_phi_fu_250_p4 <= udpIn_TDATA;
            elsif (not((ap_const_lv1_0 = streamSource_V))) then 
                p_Val2_19_phi_fu_250_p4 <= ttlIn_TDATA;
            else 
                p_Val2_19_phi_fu_250_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            p_Val2_19_phi_fu_250_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    p_Val2_s_fu_447_p2 <= (tmp_26_cast_fu_443_p1 xor ap_const_lv20_FFFFF);
    p_cast_fu_383_p1 <= std_logic_vector(resize(unsigned(tmp_95_fu_379_p1),17));
    r_V_1_fu_433_p1 <= std_logic_vector(resize(unsigned(tmp_99_fu_425_p3),17));
    r_V_cast_fu_397_p1 <= std_logic_vector(resize(unsigned(r_V_fu_387_p4),17));
    r_V_fu_387_p4 <= udpChecksum_V(19 downto 16);
    tmp1_cast_fu_634_p1 <= std_logic_vector(resize(unsigned(tmp1_fu_628_p2),18));
    tmp1_fu_628_p2 <= std_logic_vector(unsigned(tmp_50_cast_cast_fu_614_p1) + unsigned(tmp_49_cast_cast_fu_606_p1));
    tmp2_cast_fu_536_p1 <= std_logic_vector(resize(unsigned(tmp2_fu_530_p2),18));
    tmp2_fu_530_p2 <= std_logic_vector(unsigned(tmp_40_cast_cast_fu_516_p1) + unsigned(tmp_38_cast_cast_fu_508_p1));
    tmp_101_fu_512_p1 <= p_Val2_19_phi_fu_250_p4(16 - 1 downto 0);
    tmp_102_fu_610_p1 <= p_Val2_18_phi_fu_280_p4(16 - 1 downto 0);
    tmp_17_nbreadreq_fu_138_p5 <= (0=>(ttlIn_TVALID), others=>'-');
    tmp_22_nbwritereq_fu_210_p3 <= (0=>udpPort2addIpHeader_header_V_V_full_n, others=>'-');
    tmp_23_nbwritereq_fu_150_p3 <= (0=>checksumStreams_V_V_1_full_n, others=>'-');
    tmp_25_fu_437_p2 <= std_logic_vector(unsigned(p_1_cast_fu_421_p1) + unsigned(r_V_1_fu_433_p1));
    tmp_26_cast_fu_443_p1 <= std_logic_vector(resize(unsigned(tmp_25_fu_437_p2),20));
    tmp_26_fu_520_p2 <= std_logic_vector(unsigned(tmp_37_cast_fu_494_p1) + unsigned(tmp_36_cast_fu_490_p1));
    tmp_27_fu_540_p2 <= std_logic_vector(unsigned(tmp_41_cast_fu_526_p1) + unsigned(tmp2_cast_fu_536_p1));
    tmp_28_fu_550_p2 <= std_logic_vector(unsigned(tmp_43_cast_fu_546_p1) + unsigned(udpChecksum_V));
    tmp_29_fu_618_p2 <= std_logic_vector(unsigned(tmp_48_cast_fu_592_p1) + unsigned(tmp_47_cast_fu_588_p1));
    tmp_30_fu_638_p2 <= std_logic_vector(unsigned(tmp_51_cast_fu_624_p1) + unsigned(tmp1_cast_fu_634_p1));
    tmp_31_fu_648_p2 <= std_logic_vector(unsigned(tmp_53_cast_fu_644_p1) + unsigned(udpChecksum_V));
    tmp_32_fu_660_p2 <= "1" when (ipWordCounter_V = ap_const_lv3_2) else "0";
    tmp_33_cast_fu_717_p1 <= std_logic_vector(resize(unsigned(p_Val2_16_cast1_fu_708_p1),20));
    tmp_33_fu_666_p2 <= std_logic_vector(unsigned(ipWordCounter_V) + unsigned(ap_const_lv3_1));
    tmp_36_cast_fu_490_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_470_p4),17));
    tmp_37_cast_fu_494_p1 <= std_logic_vector(resize(unsigned(p_Result_8_fu_480_p4),17));
    tmp_38_cast_cast_fu_508_p1 <= std_logic_vector(resize(unsigned(p_Result_9_fu_498_p4),17));
    tmp_40_cast_cast_fu_516_p1 <= std_logic_vector(resize(unsigned(tmp_101_fu_512_p1),17));
    tmp_41_cast_fu_526_p1 <= std_logic_vector(resize(unsigned(tmp_26_fu_520_p2),18));
    tmp_43_cast_fu_546_p1 <= std_logic_vector(resize(unsigned(tmp_27_fu_540_p2),20));
    tmp_47_cast_fu_588_p1 <= std_logic_vector(resize(unsigned(p_Result_10_fu_568_p4),17));
    tmp_48_cast_fu_592_p1 <= std_logic_vector(resize(unsigned(p_Result_11_fu_578_p4),17));
    tmp_49_cast_cast_fu_606_p1 <= std_logic_vector(resize(unsigned(p_Result_12_fu_596_p4),17));
    tmp_50_cast_cast_fu_614_p1 <= std_logic_vector(resize(unsigned(tmp_102_fu_610_p1),17));
    tmp_51_cast_fu_624_p1 <= std_logic_vector(resize(unsigned(tmp_29_fu_618_p2),18));
    tmp_53_cast_fu_644_p1 <= std_logic_vector(resize(unsigned(tmp_30_fu_638_p2),20));
    tmp_95_fu_379_p1 <= udpChecksum_V(16 - 1 downto 0);
    tmp_96_fu_407_p1 <= udpChecksum_V(16 - 1 downto 0);
    tmp_97_fu_411_p1 <= std_logic_vector(resize(unsigned(r_V_fu_387_p4),16));
    tmp_98_fu_415_p2 <= std_logic_vector(unsigned(tmp_97_fu_411_p1) + unsigned(tmp_96_fu_407_p1));
    tmp_99_fu_425_p3 <= tmp_s_fu_401_p2(16 downto 16);
    tmp_data_V_6_fu_712_p1 <= std_logic_vector(resize(unsigned(p_Val2_16_cast1_fu_708_p1),64));

    -- tmp_keep_V_10_phi_fu_270_p4 assign process. --
    tmp_keep_V_10_phi_fu_270_p4_assign_proc : process(udpIn_TKEEP, ttlIn_TKEEP, streamSource_V, ap_sig_bdd_494)
    begin
        if (ap_sig_bdd_494) then
            if ((ap_const_lv1_0 = streamSource_V)) then 
                tmp_keep_V_10_phi_fu_270_p4 <= udpIn_TKEEP;
            elsif (not((ap_const_lv1_0 = streamSource_V))) then 
                tmp_keep_V_10_phi_fu_270_p4 <= ttlIn_TKEEP;
            else 
                tmp_keep_V_10_phi_fu_270_p4 <= "XXXXXXXX";
            end if;
        else 
            tmp_keep_V_10_phi_fu_270_p4 <= "XXXXXXXX";
        end if; 
    end process;


    -- tmp_keep_V_9_phi_fu_240_p4 assign process. --
    tmp_keep_V_9_phi_fu_240_p4_assign_proc : process(udpIn_TKEEP, ttlIn_TKEEP, streamSource_V, ap_sig_bdd_497)
    begin
        if (ap_sig_bdd_497) then
            if ((ap_const_lv1_0 = streamSource_V)) then 
                tmp_keep_V_9_phi_fu_240_p4 <= udpIn_TKEEP;
            elsif (not((ap_const_lv1_0 = streamSource_V))) then 
                tmp_keep_V_9_phi_fu_240_p4 <= ttlIn_TKEEP;
            else 
                tmp_keep_V_9_phi_fu_240_p4 <= "XXXXXXXX";
            end if;
        else 
            tmp_keep_V_9_phi_fu_240_p4 <= "XXXXXXXX";
        end if; 
    end process;


    -- tmp_last_V_10_phi_fu_260_p4 assign process. --
    tmp_last_V_10_phi_fu_260_p4_assign_proc : process(udpIn_TLAST, ttlIn_TLAST, streamSource_V, ap_sig_bdd_494)
    begin
        if (ap_sig_bdd_494) then
            if ((ap_const_lv1_0 = streamSource_V)) then 
                tmp_last_V_10_phi_fu_260_p4 <= udpIn_TLAST;
            elsif (not((ap_const_lv1_0 = streamSource_V))) then 
                tmp_last_V_10_phi_fu_260_p4 <= ttlIn_TLAST;
            else 
                tmp_last_V_10_phi_fu_260_p4 <= "X";
            end if;
        else 
            tmp_last_V_10_phi_fu_260_p4 <= "X";
        end if; 
    end process;


    -- tmp_last_V_9_phi_fu_230_p4 assign process. --
    tmp_last_V_9_phi_fu_230_p4_assign_proc : process(udpIn_TLAST, ttlIn_TLAST, streamSource_V, ap_sig_bdd_497)
    begin
        if (ap_sig_bdd_497) then
            if ((ap_const_lv1_0 = streamSource_V)) then 
                tmp_last_V_9_phi_fu_230_p4 <= udpIn_TLAST;
            elsif (not((ap_const_lv1_0 = streamSource_V))) then 
                tmp_last_V_9_phi_fu_230_p4 <= ttlIn_TLAST;
            else 
                tmp_last_V_9_phi_fu_230_p4 <= "X";
            end if;
        else 
            tmp_last_V_9_phi_fu_230_p4 <= "X";
        end if; 
    end process;

    tmp_nbreadreq_fu_126_p5 <= (0=>(udpIn_TVALID), others=>'-');
    tmp_s_fu_401_p2 <= std_logic_vector(unsigned(p_cast_fu_383_p1) + unsigned(r_V_cast_fu_397_p1));

    -- ttlIn_TREADY assign process. --
    ttlIn_TREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, udpState, streamSource_V, grp_fu_319_p2, grp_nbwritereq_fu_165_p5, tmp_22_nbwritereq_fu_210_p3, ap_sig_bdd_139)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (udpState = ap_const_lv2_2) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and not((ap_const_lv1_0 = streamSource_V)) and not(ap_sig_bdd_139)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and not((ap_const_lv1_0 = streamSource_V)) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3)) and not(ap_sig_bdd_139)))) then 
            ttlIn_TREADY <= ap_const_logic_1;
        else 
            ttlIn_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- udpIn_TREADY assign process. --
    udpIn_TREADY_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, udpState, streamSource_V, grp_fu_319_p2, grp_nbwritereq_fu_165_p5, tmp_22_nbwritereq_fu_210_p3, ap_sig_bdd_139)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (udpState = ap_const_lv2_2) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (ap_const_lv1_0 = streamSource_V) and not(ap_sig_bdd_139)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (ap_const_lv1_0 = streamSource_V) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3)) and not(ap_sig_bdd_139)))) then 
            udpIn_TREADY <= ap_const_logic_1;
        else 
            udpIn_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    udpPort2addIpHeader_data_V_dat1_status <= (udpPort2addIpHeader_data_V_dat_full_n and udpPort2addIpHeader_data_V_kee_full_n and udpPort2addIpHeader_data_V_las_full_n);

    -- udpPort2addIpHeader_data_V_dat1_update assign process. --
    udpPort2addIpHeader_data_V_dat1_update_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, udpState, grp_fu_319_p2, grp_nbwritereq_fu_165_p5, tmp_22_nbwritereq_fu_210_p3, brmerge_fu_684_p2, ap_sig_bdd_139)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (udpState = ap_const_lv2_2) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and not(ap_sig_bdd_139)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3)) and not(ap_sig_bdd_139)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (ap_const_lv2_0 = udpState) and not((ap_const_lv1_0 = brmerge_fu_684_p2)) and not(ap_sig_bdd_139)))) then 
            udpPort2addIpHeader_data_V_dat1_update <= ap_const_logic_1;
        else 
            udpPort2addIpHeader_data_V_dat1_update <= ap_const_logic_0;
        end if; 
    end process;


    -- udpPort2addIpHeader_data_V_dat_din assign process. --
    udpPort2addIpHeader_data_V_dat_din_assign_proc : process(p_Val2_19_phi_fu_250_p4, p_Val2_18_phi_fu_280_p4, tmp_data_V_6_fu_712_p1, ap_sig_bdd_125, ap_sig_bdd_478, ap_sig_bdd_84, ap_sig_bdd_479)
    begin
        if (ap_sig_bdd_478) then
            if (ap_sig_bdd_125) then 
                udpPort2addIpHeader_data_V_dat_din <= tmp_data_V_6_fu_712_p1;
            elsif (ap_sig_bdd_479) then 
                udpPort2addIpHeader_data_V_dat_din <= p_Val2_18_phi_fu_280_p4;
            elsif (ap_sig_bdd_84) then 
                udpPort2addIpHeader_data_V_dat_din <= p_Val2_19_phi_fu_250_p4;
            else 
                udpPort2addIpHeader_data_V_dat_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            udpPort2addIpHeader_data_V_dat_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    udpPort2addIpHeader_data_V_dat_write <= udpPort2addIpHeader_data_V_dat1_update;

    -- udpPort2addIpHeader_data_V_kee_din assign process. --
    udpPort2addIpHeader_data_V_kee_din_assign_proc : process(tmp_keep_V_9_phi_fu_240_p4, tmp_keep_V_10_phi_fu_270_p4, ap_sig_bdd_125, ap_sig_bdd_478, ap_sig_bdd_84, ap_sig_bdd_479)
    begin
        if (ap_sig_bdd_478) then
            if (ap_sig_bdd_125) then 
                udpPort2addIpHeader_data_V_kee_din <= ap_const_lv8_FF;
            elsif (ap_sig_bdd_479) then 
                udpPort2addIpHeader_data_V_kee_din <= tmp_keep_V_10_phi_fu_270_p4;
            elsif (ap_sig_bdd_84) then 
                udpPort2addIpHeader_data_V_kee_din <= tmp_keep_V_9_phi_fu_240_p4;
            else 
                udpPort2addIpHeader_data_V_kee_din <= "XXXXXXXX";
            end if;
        else 
            udpPort2addIpHeader_data_V_kee_din <= "XXXXXXXX";
        end if; 
    end process;

    udpPort2addIpHeader_data_V_kee_write <= udpPort2addIpHeader_data_V_dat1_update;

    -- udpPort2addIpHeader_data_V_las_din assign process. --
    udpPort2addIpHeader_data_V_las_din_assign_proc : process(tmp_last_V_9_phi_fu_230_p4, tmp_last_V_10_phi_fu_260_p4, ap_sig_bdd_125, ap_sig_bdd_478, ap_sig_bdd_84, ap_sig_bdd_479)
    begin
        if (ap_sig_bdd_478) then
            if (ap_sig_bdd_125) then 
                udpPort2addIpHeader_data_V_las_din <= ap_const_lv1_0;
            elsif (ap_sig_bdd_479) then 
                udpPort2addIpHeader_data_V_las_din <= tmp_last_V_10_phi_fu_260_p4;
            elsif (ap_sig_bdd_84) then 
                udpPort2addIpHeader_data_V_las_din <= tmp_last_V_9_phi_fu_230_p4;
            else 
                udpPort2addIpHeader_data_V_las_din <= "X";
            end if;
        else 
            udpPort2addIpHeader_data_V_las_din <= "X";
        end if; 
    end process;

    udpPort2addIpHeader_data_V_las_write <= udpPort2addIpHeader_data_V_dat1_update;
    udpPort2addIpHeader_header_V_V_din <= p_Val2_18_phi_fu_280_p4;

    -- udpPort2addIpHeader_header_V_V_write assign process. --
    udpPort2addIpHeader_header_V_V_write_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, udpState, grp_fu_319_p2, grp_nbwritereq_fu_165_p5, tmp_22_nbwritereq_fu_210_p3, ap_sig_bdd_139)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = grp_fu_319_p2)) and not((ap_const_lv1_0 = grp_nbwritereq_fu_165_p5)) and (udpState = ap_const_lv2_1) and not((ap_const_lv1_0 = tmp_22_nbwritereq_fu_210_p3)) and not(ap_sig_bdd_139))) then 
            udpPort2addIpHeader_header_V_V_write <= ap_const_logic_1;
        else 
            udpPort2addIpHeader_header_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
