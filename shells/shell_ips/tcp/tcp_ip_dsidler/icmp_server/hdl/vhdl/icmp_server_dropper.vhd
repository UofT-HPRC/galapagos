-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity icmp_server_dropper is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    packageBuffer1_V_dout : IN STD_LOGIC_VECTOR (72 downto 0);
    packageBuffer1_V_empty_n : IN STD_LOGIC;
    packageBuffer1_V_read : OUT STD_LOGIC;
    validFifo_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    validFifo_V_empty_n : IN STD_LOGIC;
    validFifo_V_read : OUT STD_LOGIC;
    dataStreams_V_data_V_0_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataStreams_V_data_V_0_full_n : IN STD_LOGIC;
    dataStreams_V_data_V_0_write : OUT STD_LOGIC;
    dataStreams_V_keep_V_0_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataStreams_V_keep_V_0_full_n : IN STD_LOGIC;
    dataStreams_V_keep_V_0_write : OUT STD_LOGIC;
    dataStreams_V_last_V_0_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dataStreams_V_last_V_0_full_n : IN STD_LOGIC;
    dataStreams_V_last_V_0_write : OUT STD_LOGIC );
end;


architecture behav of icmp_server_dropper is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal d_isFirstWord : STD_LOGIC_VECTOR (0 downto 0) := "1";
    signal d_drop : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal d_isFirstWord_flag_phi_fu_118_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_nbreadreq_fu_74_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataStreams_V_data_V_01_status : STD_LOGIC;
    signal tmp_6_nbreadreq_fu_101_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_88 : BOOLEAN;
    signal d_drop_flag_1_phi_fu_138_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_183_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataStreams_V_data_V_01_update : STD_LOGIC;
    signal tmp_data_V_fu_204_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_data_V_9_fu_209_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_d_isFirstWord_flag_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_d_drop_flag_1_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_190 : BOOLEAN;
    signal ap_sig_bdd_193 : BOOLEAN;
    signal ap_sig_bdd_189 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_88))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not(ap_sig_bdd_88) and not((ap_const_lv1_0 = p_d_drop_flag_1_fu_220_p2)))) then
                d_drop <= not_tmp_s_fu_226_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not(ap_sig_bdd_88) and not((ap_const_lv1_0 = p_d_isFirstWord_flag_fu_214_p2)))) then
                d_isFirstWord <= packageBuffer1_V_dout(72 downto 72);
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_88)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_88)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_88)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_88)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_88))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_189 assign process. --
    ap_sig_bdd_189_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, tmp_nbreadreq_fu_74_p3, ap_sig_bdd_88)
    begin
                ap_sig_bdd_189 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not(ap_sig_bdd_88));
    end process;


    -- ap_sig_bdd_190 assign process. --
    ap_sig_bdd_190_assign_proc : process(d_isFirstWord, d_drop)
    begin
                ap_sig_bdd_190 <= ((ap_const_lv1_0 = d_isFirstWord) and (ap_const_lv1_0 = d_drop));
    end process;


    -- ap_sig_bdd_193 assign process. --
    ap_sig_bdd_193_assign_proc : process(d_isFirstWord, validFifo_V_dout, tmp_6_nbreadreq_fu_101_p3)
    begin
                ap_sig_bdd_193 <= (not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) and not((ap_const_lv1_0 = validFifo_V_dout)));
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_88 assign process. --
    ap_sig_bdd_88_assign_proc : process(ap_start, ap_done_reg, packageBuffer1_V_empty_n, d_isFirstWord, d_drop, validFifo_V_dout, validFifo_V_empty_n, tmp_nbreadreq_fu_74_p3, dataStreams_V_data_V_01_status, tmp_6_nbreadreq_fu_101_p3)
    begin
                ap_sig_bdd_88 <= (((packageBuffer1_V_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and (ap_const_lv1_0 = d_isFirstWord)) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and (ap_const_lv1_0 = d_isFirstWord) and (dataStreams_V_data_V_01_status = ap_const_logic_0) and (ap_const_lv1_0 = d_drop)) or ((packageBuffer1_V_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3))) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) and (validFifo_V_empty_n = ap_const_logic_0)) or (not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and (dataStreams_V_data_V_01_status = ap_const_logic_0) and not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) and not((ap_const_lv1_0 = validFifo_V_dout))) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- d_drop_flag_1_phi_fu_138_p10 assign process. --
    d_drop_flag_1_phi_fu_138_p10_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, d_isFirstWord, d_drop, validFifo_V_dout, tmp_nbreadreq_fu_74_p3, tmp_6_nbreadreq_fu_101_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) and (ap_const_lv1_0 = validFifo_V_dout))) then 
            d_drop_flag_1_phi_fu_138_p10 <= ap_const_lv1_1;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and (ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and (ap_const_lv1_0 = d_isFirstWord) and not((ap_const_lv1_0 = d_drop))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and (ap_const_lv1_0 = d_isFirstWord) and (ap_const_lv1_0 = d_drop)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) and not((ap_const_lv1_0 = validFifo_V_dout))))) then 
            d_drop_flag_1_phi_fu_138_p10 <= ap_const_lv1_0;
        else 
            d_drop_flag_1_phi_fu_138_p10 <= "X";
        end if; 
    end process;


    -- d_isFirstWord_flag_phi_fu_118_p10 assign process. --
    d_isFirstWord_flag_phi_fu_118_p10_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, d_isFirstWord, d_drop, validFifo_V_dout, tmp_nbreadreq_fu_74_p3, tmp_6_nbreadreq_fu_101_p3)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) and (ap_const_lv1_0 = validFifo_V_dout)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) and not((ap_const_lv1_0 = validFifo_V_dout))))) then 
            d_isFirstWord_flag_phi_fu_118_p10 <= ap_const_lv1_1;
        elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and (ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and (ap_const_lv1_0 = d_isFirstWord) and not((ap_const_lv1_0 = d_drop))) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and (ap_const_lv1_0 = d_isFirstWord) and (ap_const_lv1_0 = d_drop)))) then 
            d_isFirstWord_flag_phi_fu_118_p10 <= ap_const_lv1_0;
        else 
            d_isFirstWord_flag_phi_fu_118_p10 <= "X";
        end if; 
    end process;

    dataStreams_V_data_V_01_status <= (dataStreams_V_data_V_0_full_n and dataStreams_V_keep_V_0_full_n and dataStreams_V_last_V_0_full_n);

    -- dataStreams_V_data_V_01_update assign process. --
    dataStreams_V_data_V_01_update_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, d_isFirstWord, d_drop, validFifo_V_dout, tmp_nbreadreq_fu_74_p3, tmp_6_nbreadreq_fu_101_p3, ap_sig_bdd_88)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and (ap_const_lv1_0 = d_isFirstWord) and (ap_const_lv1_0 = d_drop) and not(ap_sig_bdd_88)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) and not((ap_const_lv1_0 = validFifo_V_dout)) and not(ap_sig_bdd_88)))) then 
            dataStreams_V_data_V_01_update <= ap_const_logic_1;
        else 
            dataStreams_V_data_V_01_update <= ap_const_logic_0;
        end if; 
    end process;


    -- dataStreams_V_data_V_0_din assign process. --
    dataStreams_V_data_V_0_din_assign_proc : process(tmp_data_V_fu_204_p1, tmp_data_V_9_fu_209_p1, ap_sig_bdd_190, ap_sig_bdd_193, ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then
            if (ap_sig_bdd_193) then 
                dataStreams_V_data_V_0_din <= tmp_data_V_9_fu_209_p1;
            elsif (ap_sig_bdd_190) then 
                dataStreams_V_data_V_0_din <= tmp_data_V_fu_204_p1;
            else 
                dataStreams_V_data_V_0_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            dataStreams_V_data_V_0_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dataStreams_V_data_V_0_write <= dataStreams_V_data_V_01_update;
    dataStreams_V_keep_V_0_din <= packageBuffer1_V_dout(71 downto 64);
    dataStreams_V_keep_V_0_write <= dataStreams_V_data_V_01_update;
    dataStreams_V_last_V_0_din <= grp_fu_183_p3;
    dataStreams_V_last_V_0_write <= dataStreams_V_data_V_01_update;
    grp_fu_183_p3 <= packageBuffer1_V_dout(72 downto 72);
    not_tmp_s_fu_226_p2 <= (grp_fu_183_p3 xor ap_const_lv1_1);
    p_d_drop_flag_1_fu_220_p2 <= (grp_fu_183_p3 or d_drop_flag_1_phi_fu_138_p10);
    p_d_isFirstWord_flag_fu_214_p2 <= (grp_fu_183_p3 or d_isFirstWord_flag_phi_fu_118_p10);

    -- packageBuffer1_V_read assign process. --
    packageBuffer1_V_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, d_isFirstWord, tmp_nbreadreq_fu_74_p3, tmp_6_nbreadreq_fu_101_p3, ap_sig_bdd_88)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and (ap_const_lv1_0 = d_isFirstWord) and not(ap_sig_bdd_88)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) and not(ap_sig_bdd_88)))) then 
            packageBuffer1_V_read <= ap_const_logic_1;
        else 
            packageBuffer1_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_6_nbreadreq_fu_101_p3 <= (0=>validFifo_V_empty_n, others=>'-');
    tmp_data_V_9_fu_209_p1 <= packageBuffer1_V_dout(64 - 1 downto 0);
    tmp_data_V_fu_204_p1 <= packageBuffer1_V_dout(64 - 1 downto 0);
    tmp_nbreadreq_fu_74_p3 <= (0=>packageBuffer1_V_empty_n, others=>'-');

    -- validFifo_V_read assign process. --
    validFifo_V_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, d_isFirstWord, tmp_nbreadreq_fu_74_p3, tmp_6_nbreadreq_fu_101_p3, ap_sig_bdd_88)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_const_lv1_0 = tmp_nbreadreq_fu_74_p3)) and not((ap_const_lv1_0 = d_isFirstWord)) and not((ap_const_lv1_0 = tmp_6_nbreadreq_fu_101_p3)) and not(ap_sig_bdd_88))) then 
            validFifo_V_read <= ap_const_logic_1;
        else 
            validFifo_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
