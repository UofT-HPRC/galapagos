-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2015.1
-- Copyright (C) 2015 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity icmp_server_udpAddIpHeader is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    udpPort2addIpHeader_header_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    udpPort2addIpHeader_header_V_V_empty_n : IN STD_LOGIC;
    udpPort2addIpHeader_header_V_V_read : OUT STD_LOGIC;
    dataStreams_V_data_V_1_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    dataStreams_V_data_V_1_full_n : IN STD_LOGIC;
    dataStreams_V_data_V_1_write : OUT STD_LOGIC;
    dataStreams_V_keep_V_1_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    dataStreams_V_keep_V_1_full_n : IN STD_LOGIC;
    dataStreams_V_keep_V_1_write : OUT STD_LOGIC;
    dataStreams_V_last_V_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dataStreams_V_last_V_1_full_n : IN STD_LOGIC;
    dataStreams_V_last_V_1_write : OUT STD_LOGIC;
    udpPort2addIpHeader_data_V_dat_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    udpPort2addIpHeader_data_V_dat_empty_n : IN STD_LOGIC;
    udpPort2addIpHeader_data_V_dat_read : OUT STD_LOGIC;
    udpPort2addIpHeader_data_V_kee_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    udpPort2addIpHeader_data_V_kee_empty_n : IN STD_LOGIC;
    udpPort2addIpHeader_data_V_kee_read : OUT STD_LOGIC;
    udpPort2addIpHeader_data_V_las_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    udpPort2addIpHeader_data_V_las_empty_n : IN STD_LOGIC;
    udpPort2addIpHeader_data_V_las_read : OUT STD_LOGIC );
end;


architecture behav of icmp_server_udpAddIpHeader is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1010101 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000010000000100000001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv16_1C : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_20 : BOOLEAN;
    signal addIpState : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal tempWord_data_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal tempWord_keep_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal sourceIP_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal p_0122_1_fu_355_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_keep_V_13_phi_fu_207_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataStreams_V_data_V_11_status : STD_LOGIC;
    signal grp_nbwritereq_fu_140_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal udpPort2addIpHeader_data_V_dat0_status : STD_LOGIC;
    signal grp_nbreadreq_fu_166_p5 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_nbreadreq_fu_188_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_123 : BOOLEAN;
    signal tmp_last_V_fu_301_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_11_phi_fu_218_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal dataStreams_V_data_V_11_update : STD_LOGIC;
    signal p_Result_14_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_12_fu_309_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_11_fu_382_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_10_fu_441_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_522_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_15_fu_290_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal udpPort2addIpHeader_data_V_dat0_update : STD_LOGIC;
    signal storemerge_fu_347_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_227_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_280_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_92_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_85_fu_318_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_94_fu_335_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_13_fu_339_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempData_V_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_93_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_8_fu_401_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_9_fu_413_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_i_fu_476_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i_fu_466_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tempLength_V_fu_486_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_fu_494_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_91_fu_510_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_i1_fu_500_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i3_fu_514_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_337 : BOOLEAN;
    signal ap_sig_bdd_95 : BOOLEAN;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal ap_sig_bdd_107 : BOOLEAN;
    signal ap_sig_bdd_336 : BOOLEAN;
    signal ap_sig_bdd_84 : BOOLEAN;
    signal ap_sig_bdd_189 : BOOLEAN;


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_done_reg assign process. --
    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- addIpState assign process. --
    addIpState_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (ap_sig_bdd_336) then
                if (ap_sig_bdd_107) then 
                    addIpState <= ap_const_lv3_1;
                elsif (ap_sig_bdd_102) then 
                    addIpState <= ap_const_lv3_2;
                elsif (ap_sig_bdd_95) then 
                    addIpState <= ap_const_lv3_3;
                elsif (ap_sig_bdd_337) then 
                    addIpState <= storemerge_fu_347_p3;
                elsif ((addIpState = ap_const_lv3_4)) then 
                    addIpState <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    -- tempWord_data_V assign process. --
    tempWord_data_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (ap_const_lv3_0 = addIpState) and not(ap_sig_bdd_123))) then 
                tempWord_data_V <= p_Result_s_fu_522_p5;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (addIpState = ap_const_lv3_1) and not(ap_sig_bdd_123))) then 
                tempWord_data_V <= p_Result_10_fu_441_p5;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and not(ap_sig_bdd_123)))) then 
                tempWord_data_V <= udpPort2addIpHeader_data_V_dat_dout;
            end if; 
        end if;
    end process;

    -- tempWord_keep_V assign process. --
    tempWord_keep_V_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (addIpState = ap_const_lv3_1) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (ap_const_lv3_0 = addIpState) and not(ap_sig_bdd_123)))) then 
                tempWord_keep_V <= ap_const_lv8_FF;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and not(ap_sig_bdd_123)))) then 
                tempWord_keep_V <= udpPort2addIpHeader_data_V_kee_dout;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (addIpState = ap_const_lv3_1) and not(ap_sig_bdd_123))) then
                sourceIP_V <= udpPort2addIpHeader_header_V_V_dout(63 downto 32);
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_sig_bdd_123)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_done_reg, ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_123)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_bdd_123)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not(ap_sig_bdd_123))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(addIpState, grp_nbreadreq_fu_188_p3)
    begin
                ap_sig_bdd_102 <= (not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (addIpState = ap_const_lv3_1));
    end process;


    -- ap_sig_bdd_107 assign process. --
    ap_sig_bdd_107_assign_proc : process(addIpState, grp_nbreadreq_fu_188_p3)
    begin
                ap_sig_bdd_107 <= (not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (ap_const_lv3_0 = addIpState));
    end process;


    -- ap_sig_bdd_123 assign process. --
    ap_sig_bdd_123_assign_proc : process(ap_start, ap_done_reg, addIpState, udpPort2addIpHeader_header_V_V_empty_n, dataStreams_V_data_V_11_status, grp_nbwritereq_fu_140_p5, udpPort2addIpHeader_data_V_dat0_status, grp_nbreadreq_fu_166_p5, grp_nbreadreq_fu_188_p3)
    begin
                ap_sig_bdd_123 <= (((dataStreams_V_data_V_11_status = ap_const_logic_0) and (addIpState = ap_const_lv3_4) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0))) or (not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (udpPort2addIpHeader_data_V_dat0_status = ap_const_logic_0) and (addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5))) or ((dataStreams_V_data_V_11_status = ap_const_logic_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5))) or (not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (udpPort2addIpHeader_header_V_V_empty_n = ap_const_logic_0) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3))) or (not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (udpPort2addIpHeader_data_V_dat0_status = ap_const_logic_0) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3))) or ((dataStreams_V_data_V_11_status = ap_const_logic_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3))) or (not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (udpPort2addIpHeader_header_V_V_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (addIpState = ap_const_lv3_1)) or ((dataStreams_V_data_V_11_status = ap_const_logic_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (addIpState = ap_const_lv3_1)) or (not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (udpPort2addIpHeader_header_V_V_empty_n = ap_const_logic_0) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (ap_const_lv3_0 = addIpState)) or ((dataStreams_V_data_V_11_status = ap_const_logic_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (ap_const_lv3_0 = addIpState)) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    -- ap_sig_bdd_189 assign process. --
    ap_sig_bdd_189_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, addIpState, grp_nbwritereq_fu_140_p5, grp_nbreadreq_fu_166_p5)
    begin
                ap_sig_bdd_189 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)));
    end process;


    -- ap_sig_bdd_20 assign process. --
    ap_sig_bdd_20_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_20 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_336 assign process. --
    ap_sig_bdd_336_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, grp_nbwritereq_fu_140_p5, ap_sig_bdd_123)
    begin
                ap_sig_bdd_336 <= ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not(ap_sig_bdd_123));
    end process;


    -- ap_sig_bdd_337 assign process. --
    ap_sig_bdd_337_assign_proc : process(addIpState, grp_nbreadreq_fu_166_p5, tmp_last_V_fu_301_p1)
    begin
                ap_sig_bdd_337 <= ((addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and not((ap_const_lv1_0 = tmp_last_V_fu_301_p1)));
    end process;


    -- ap_sig_bdd_84 assign process. --
    ap_sig_bdd_84_assign_proc : process(addIpState, grp_nbreadreq_fu_166_p5)
    begin
                ap_sig_bdd_84 <= ((addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)));
    end process;


    -- ap_sig_bdd_95 assign process. --
    ap_sig_bdd_95_assign_proc : process(addIpState, grp_nbreadreq_fu_166_p5, grp_nbreadreq_fu_188_p3)
    begin
                ap_sig_bdd_95 <= (not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)));
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_20)
    begin
        if (ap_sig_bdd_20) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;

    dataStreams_V_data_V_11_status <= (dataStreams_V_data_V_1_full_n and dataStreams_V_keep_V_1_full_n and dataStreams_V_last_V_1_full_n);

    -- dataStreams_V_data_V_11_update assign process. --
    dataStreams_V_data_V_11_update_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, addIpState, grp_nbwritereq_fu_140_p5, grp_nbreadreq_fu_166_p5, grp_nbreadreq_fu_188_p3, ap_sig_bdd_123)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (addIpState = ap_const_lv3_4) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (addIpState = ap_const_lv3_1) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (ap_const_lv3_0 = addIpState) and not(ap_sig_bdd_123)))) then 
            dataStreams_V_data_V_11_update <= ap_const_logic_1;
        else 
            dataStreams_V_data_V_11_update <= ap_const_logic_0;
        end if; 
    end process;


    -- dataStreams_V_data_V_1_din assign process. --
    dataStreams_V_data_V_1_din_assign_proc : process(addIpState, p_Result_14_fu_271_p1, p_Result_12_fu_309_p3, p_Result_11_fu_382_p5, p_Result_10_fu_441_p5, p_Result_s_fu_522_p5, ap_sig_bdd_95, ap_sig_bdd_102, ap_sig_bdd_107, ap_sig_bdd_336, ap_sig_bdd_84)
    begin
        if (ap_sig_bdd_336) then
            if (ap_sig_bdd_107) then 
                dataStreams_V_data_V_1_din <= p_Result_s_fu_522_p5;
            elsif (ap_sig_bdd_102) then 
                dataStreams_V_data_V_1_din <= p_Result_10_fu_441_p5;
            elsif (ap_sig_bdd_95) then 
                dataStreams_V_data_V_1_din <= p_Result_11_fu_382_p5;
            elsif (ap_sig_bdd_84) then 
                dataStreams_V_data_V_1_din <= p_Result_12_fu_309_p3;
            elsif ((addIpState = ap_const_lv3_4)) then 
                dataStreams_V_data_V_1_din <= p_Result_14_fu_271_p1;
            else 
                dataStreams_V_data_V_1_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            dataStreams_V_data_V_1_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dataStreams_V_data_V_1_write <= dataStreams_V_data_V_11_update;

    -- dataStreams_V_keep_V_1_din assign process. --
    dataStreams_V_keep_V_1_din_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, addIpState, tmp_keep_V_13_phi_fu_207_p4, grp_nbwritereq_fu_140_p5, grp_nbreadreq_fu_166_p5, grp_nbreadreq_fu_188_p3, ap_sig_bdd_123, p_Result_15_fu_290_p1)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (addIpState = ap_const_lv3_1) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (ap_const_lv3_0 = addIpState) and not(ap_sig_bdd_123)))) then 
            dataStreams_V_keep_V_1_din <= ap_const_lv8_FF;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and not(ap_sig_bdd_123))) then 
            dataStreams_V_keep_V_1_din <= tmp_keep_V_13_phi_fu_207_p4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (addIpState = ap_const_lv3_4) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not(ap_sig_bdd_123))) then 
            dataStreams_V_keep_V_1_din <= p_Result_15_fu_290_p1;
        else 
            dataStreams_V_keep_V_1_din <= "XXXXXXXX";
        end if; 
    end process;

    dataStreams_V_keep_V_1_write <= dataStreams_V_data_V_11_update;

    -- dataStreams_V_last_V_1_din assign process. --
    dataStreams_V_last_V_1_din_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, addIpState, grp_nbwritereq_fu_140_p5, grp_nbreadreq_fu_166_p5, grp_nbreadreq_fu_188_p3, ap_sig_bdd_123, tmp_last_V_11_phi_fu_218_p4)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (addIpState = ap_const_lv3_1) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (ap_const_lv3_0 = addIpState) and not(ap_sig_bdd_123)))) then 
            dataStreams_V_last_V_1_din <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and not(ap_sig_bdd_123))) then 
            dataStreams_V_last_V_1_din <= tmp_last_V_11_phi_fu_218_p4;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and (addIpState = ap_const_lv3_4) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not(ap_sig_bdd_123))) then 
            dataStreams_V_last_V_1_din <= ap_const_lv1_1;
        else 
            dataStreams_V_last_V_1_din <= "X";
        end if; 
    end process;

    dataStreams_V_last_V_1_write <= dataStreams_V_data_V_11_update;
    grp_fu_227_p4 <= tempWord_data_V(63 downto 32);
    grp_nbreadreq_fu_166_p5 <= (0=>(udpPort2addIpHeader_data_V_dat_empty_n and udpPort2addIpHeader_data_V_kee_empty_n and udpPort2addIpHeader_data_V_las_empty_n), others=>'-');
    grp_nbreadreq_fu_188_p3 <= (0=>udpPort2addIpHeader_header_V_V_empty_n, others=>'-');
    grp_nbwritereq_fu_140_p5 <= (0=>(dataStreams_V_data_V_1_full_n and dataStreams_V_keep_V_1_full_n and dataStreams_V_last_V_1_full_n), others=>'-');
    p_0122_1_fu_355_p3 <= 
        p_Result_13_fu_339_p3 when (tmp_s_fu_328_p2(0) = '1') else 
        ap_const_lv8_FF;
    p_Result_10_fu_441_p5 <= (ap_const_lv32_1010101 & p_Result_9_fu_413_p5(31 downto 0));
    p_Result_11_fu_382_p5 <= (tmp_93_fu_378_p1 & tempData_V_fu_374_p1(31 downto 0));
    p_Result_12_fu_309_p3 <= (tmp_92_fu_305_p1 & grp_fu_227_p4);
    p_Result_13_fu_339_p3 <= (tmp_94_fu_335_p1 & ap_const_lv4_F);
    p_Result_14_fu_271_p1 <= std_logic_vector(resize(unsigned(grp_fu_227_p4),64));
    p_Result_15_fu_290_p1 <= std_logic_vector(resize(unsigned(tmp_24_fu_280_p4),8));
    p_Result_2_i_fu_476_p4 <= udpPort2addIpHeader_header_V_V_dout(23 downto 16);
    p_Result_8_fu_401_p5 <= (udpPort2addIpHeader_header_V_V_dout(63 downto 8) & ap_const_lv8_80);
    p_Result_9_fu_413_p5 <= (p_Result_8_fu_401_p5(63 downto 16) & ap_const_lv8_1 & p_Result_8_fu_401_p5(7 downto 0));
    p_Result_i1_fu_500_p4 <= p_Val2_6_fu_494_p2(15 downto 8);
    p_Result_i_fu_466_p4 <= udpPort2addIpHeader_header_V_V_dout(31 downto 24);
    p_Result_s_85_fu_318_p4 <= udpPort2addIpHeader_data_V_kee_dout(7 downto 4);
    p_Result_s_fu_522_p5 <= (udpPort2addIpHeader_header_V_V_dout(63 downto 32) & tmp_i3_fu_514_p3 & udpPort2addIpHeader_header_V_V_dout(15 downto 0));
    p_Val2_6_fu_494_p2 <= std_logic_vector(unsigned(ap_const_lv16_1C) + unsigned(tempLength_V_fu_486_p3));
    storemerge_fu_347_p3 <= 
        ap_const_lv3_0 when (tmp_s_fu_328_p2(0) = '1') else 
        ap_const_lv3_4;
        tempData_V_fu_374_p1 <= std_logic_vector(resize(signed(sourceIP_V),64));

    tempLength_V_fu_486_p3 <= (p_Result_2_i_fu_476_p4 & p_Result_i_fu_466_p4);
    tmp_24_fu_280_p4 <= tempWord_keep_V(7 downto 4);
    tmp_91_fu_510_p1 <= p_Val2_6_fu_494_p2(8 - 1 downto 0);
    tmp_92_fu_305_p1 <= udpPort2addIpHeader_data_V_dat_dout(32 - 1 downto 0);
    tmp_93_fu_378_p1 <= udpPort2addIpHeader_data_V_dat_dout(32 - 1 downto 0);
    tmp_94_fu_335_p1 <= udpPort2addIpHeader_data_V_kee_dout(4 - 1 downto 0);
    tmp_i3_fu_514_p3 <= (tmp_91_fu_510_p1 & p_Result_i1_fu_500_p4);

    -- tmp_keep_V_13_phi_fu_207_p4 assign process. --
    tmp_keep_V_13_phi_fu_207_p4_assign_proc : process(p_0122_1_fu_355_p3, tmp_last_V_fu_301_p1, ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then
            if ((ap_const_lv1_0 = tmp_last_V_fu_301_p1)) then 
                tmp_keep_V_13_phi_fu_207_p4 <= ap_const_lv8_FF;
            elsif (not((ap_const_lv1_0 = tmp_last_V_fu_301_p1))) then 
                tmp_keep_V_13_phi_fu_207_p4 <= p_0122_1_fu_355_p3;
            else 
                tmp_keep_V_13_phi_fu_207_p4 <= "XXXXXXXX";
            end if;
        else 
            tmp_keep_V_13_phi_fu_207_p4 <= "XXXXXXXX";
        end if; 
    end process;


    -- tmp_last_V_11_phi_fu_218_p4 assign process. --
    tmp_last_V_11_phi_fu_218_p4_assign_proc : process(tmp_last_V_fu_301_p1, tmp_s_fu_328_p2, ap_sig_bdd_189)
    begin
        if (ap_sig_bdd_189) then
            if ((ap_const_lv1_0 = tmp_last_V_fu_301_p1)) then 
                tmp_last_V_11_phi_fu_218_p4 <= ap_const_lv1_0;
            elsif (not((ap_const_lv1_0 = tmp_last_V_fu_301_p1))) then 
                tmp_last_V_11_phi_fu_218_p4 <= tmp_s_fu_328_p2;
            else 
                tmp_last_V_11_phi_fu_218_p4 <= "X";
            end if;
        else 
            tmp_last_V_11_phi_fu_218_p4 <= "X";
        end if; 
    end process;

    tmp_last_V_fu_301_p1 <= udpPort2addIpHeader_data_V_las_dout;
    tmp_s_fu_328_p2 <= "1" when (p_Result_s_85_fu_318_p4 = ap_const_lv4_0) else "0";
    udpPort2addIpHeader_data_V_dat0_status <= (udpPort2addIpHeader_data_V_dat_empty_n and udpPort2addIpHeader_data_V_kee_empty_n and udpPort2addIpHeader_data_V_las_empty_n);

    -- udpPort2addIpHeader_data_V_dat0_update assign process. --
    udpPort2addIpHeader_data_V_dat0_update_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, addIpState, grp_nbwritereq_fu_140_p5, grp_nbreadreq_fu_166_p5, grp_nbreadreq_fu_188_p3, ap_sig_bdd_123)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and (addIpState = ap_const_lv3_3) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and not(ap_sig_bdd_123)))) then 
            udpPort2addIpHeader_data_V_dat0_update <= ap_const_logic_1;
        else 
            udpPort2addIpHeader_data_V_dat0_update <= ap_const_logic_0;
        end if; 
    end process;

    udpPort2addIpHeader_data_V_dat_read <= udpPort2addIpHeader_data_V_dat0_update;
    udpPort2addIpHeader_data_V_kee_read <= udpPort2addIpHeader_data_V_dat0_update;
    udpPort2addIpHeader_data_V_las_read <= udpPort2addIpHeader_data_V_dat0_update;

    -- udpPort2addIpHeader_header_V_V_read assign process. --
    udpPort2addIpHeader_header_V_V_read_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, addIpState, grp_nbwritereq_fu_140_p5, grp_nbreadreq_fu_166_p5, grp_nbreadreq_fu_188_p3, ap_sig_bdd_123)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_166_p5)) and (addIpState = ap_const_lv3_2) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (addIpState = ap_const_lv3_1) and not(ap_sig_bdd_123)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((grp_nbwritereq_fu_140_p5 = ap_const_lv1_0)) and not((ap_const_lv1_0 = grp_nbreadreq_fu_188_p3)) and (ap_const_lv3_0 = addIpState) and not(ap_sig_bdd_123)))) then 
            udpPort2addIpHeader_header_V_V_read <= ap_const_logic_1;
        else 
            udpPort2addIpHeader_header_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
