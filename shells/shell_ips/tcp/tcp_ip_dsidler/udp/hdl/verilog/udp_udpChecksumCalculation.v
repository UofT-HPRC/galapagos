// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module udp_udpChecksumCalculation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        checksumCalculation2outputPath_din,
        checksumCalculation2outputPath_full_n,
        checksumCalculation2outputPath_write,
        outputPathWriteFunction2checks_dout,
        outputPathWriteFunction2checks_empty_n,
        outputPathWriteFunction2checks_read,
        outputPathWriteFunction2checks_1_dout,
        outputPathWriteFunction2checks_1_empty_n,
        outputPathWriteFunction2checks_1_read
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm0_0 = 1'b1;
parameter    ap_ST_st2_fsm1_1 = 2'b10;
parameter    ap_ST_st3_fsm2_1 = 2'b10;
parameter    ap_ST_st0_fsm1_0 = 2'b1;
parameter    ap_ST_st0_fsm2_0 = 2'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_2F = 32'b101111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv16_FFFF = 16'b1111111111111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] checksumCalculation2outputPath_din;
input   checksumCalculation2outputPath_full_n;
output   checksumCalculation2outputPath_write;
input  [63:0] outputPathWriteFunction2checks_dout;
input   outputPathWriteFunction2checks_empty_n;
output   outputPathWriteFunction2checks_read;
input  [0:0] outputPathWriteFunction2checks_1_dout;
input   outputPathWriteFunction2checks_1_empty_n;
output   outputPathWriteFunction2checks_1_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg checksumCalculation2outputPath_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm0 = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm0_0;
reg    ap_sig_bdd_26;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm1 = 2'b1;
reg    ap_sig_cseq_ST_st0_fsm1_0;
reg    ap_sig_bdd_37;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm2 = 2'b1;
reg    ap_sig_cseq_ST_st0_fsm2_0;
reg    ap_sig_bdd_45;
wire    outputPathWriteFunction2checks0_status;
wire   [0:0] tmp_nbreadreq_fu_58_p4;
reg    ap_sig_bdd_60;
reg    ap_sig_cseq_ST_st2_fsm1_1;
reg    ap_sig_bdd_66;
reg   [0:0] tmp_reg_255;
reg   [0:0] ap_reg_ppstg_tmp_reg_255_pp0_it1;
reg   [0:0] tmp_eop_V_reg_259;
reg   [0:0] ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it1;
reg    ap_sig_bdd_83;
reg    ap_sig_cseq_ST_st3_fsm2_1;
reg    ap_sig_bdd_88;
reg   [31:0] udpChecksum_V_1 = 32'b00000000000000000000000000000000;
wire   [0:0] ap_reg_ppstg_tmp_reg_255_pp0_it0;
wire   [0:0] tmp_eop_V_fu_99_p1;
wire   [0:0] ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it0;
reg   [15:0] p_Result_s_35_reg_263;
reg   [15:0] p_Result_12_reg_268;
wire   [16:0] tmp5_fu_145_p2;
reg   [16:0] tmp5_reg_273;
wire   [15:0] tmp_53_fu_237_p2;
reg   [15:0] tmp_53_reg_278;
wire   [31:0] ap_reg_phiprechg_udpChecksum_V_1_new_reg_83pp0_it0;
reg   [31:0] ap_reg_phiprechg_udpChecksum_V_1_new_reg_83pp0_it1;
reg   [31:0] udpChecksum_V_1_new_phi_fu_87_p4;
wire   [31:0] tmp_51_fu_180_p2;
reg    outputPathWriteFunction2checks0_update;
wire   [15:0] p_Result_s_fu_103_p4;
wire   [15:0] tmp_97_fu_137_p1;
wire   [16:0] tmp_cast_fu_113_p1;
wire   [16:0] tmp_62_cast_fu_141_p1;
wire   [31:0] tmp_s_fu_155_p1;
wire   [17:0] tmp5_cast_fu_167_p1;
wire   [17:0] tmp_61_cast_fu_158_p1;
wire   [17:0] tmp4_fu_170_p2;
wire   [31:0] tmp4_cast_fu_176_p1;
wire   [31:0] tmp3_fu_161_p2;
wire   [15:0] tmp_98_fu_187_p1;
wire   [15:0] r_V_fu_195_p4;
wire   [16:0] tmp_73_cast_fu_191_p1;
wire   [16:0] r_V_cast_fu_205_p1;
wire   [15:0] tmp_99_fu_215_p1;
wire   [16:0] tmp_52_fu_209_p2;
wire   [0:0] tmp_101_fu_225_p3;
wire   [15:0] tmp_100_fu_219_p2;
wire   [15:0] r_V_5_fu_233_p1;
reg   [0:0] ap_NS_fsm0;
reg   [1:0] ap_NS_fsm1;
reg   [1:0] ap_NS_fsm2;
reg    ap_sig_bdd_142;
reg    ap_sig_bdd_95;




/// the current state (ap_CS_fsm0) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm0
    if (ap_rst == 1'b1) begin
        ap_CS_fsm0 <= ap_ST_st1_fsm0_0;
    end else begin
        ap_CS_fsm0 <= ap_NS_fsm0;
    end
end

/// the current state (ap_CS_fsm1) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm1
    if (ap_rst == 1'b1) begin
        ap_CS_fsm1 <= ap_ST_st0_fsm1_0;
    end else begin
        ap_CS_fsm1 <= ap_NS_fsm1;
    end
end

/// the current state (ap_CS_fsm2) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm2
    if (ap_rst == 1'b1) begin
        ap_CS_fsm2 <= ap_ST_st0_fsm2_0;
    end else begin
        ap_CS_fsm2 <= ap_NS_fsm2;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_83))) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (ap_sig_bdd_95) begin
        if (ap_sig_bdd_142) begin
            ap_reg_phiprechg_udpChecksum_V_1_new_reg_83pp0_it1 <= ap_const_lv32_0;
        end else if ((ap_true == ap_true)) begin
            ap_reg_phiprechg_udpChecksum_V_1_new_reg_83pp0_it1 <= ap_reg_phiprechg_udpChecksum_V_1_new_reg_83pp0_it0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it1 <= tmp_eop_V_reg_259;
        ap_reg_ppstg_tmp_reg_255_pp0_it1 <= tmp_reg_255;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~(tmp_nbreadreq_fu_58_p4 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_60 | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        p_Result_12_reg_268 <= {{outputPathWriteFunction2checks_dout[ap_const_lv32_1F : ap_const_lv32_10]}};
        p_Result_s_35_reg_263 <= {{outputPathWriteFunction2checks_dout[ap_const_lv32_2F : ap_const_lv32_20]}};
        tmp5_reg_273 <= tmp5_fu_145_p2;
        tmp_eop_V_reg_259 <= outputPathWriteFunction2checks_1_dout;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_255_pp0_it0) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it0))) begin
        tmp_53_reg_278 <= tmp_53_fu_237_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_60 | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        tmp_reg_255 <= tmp_nbreadreq_fu_58_p4;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_255_pp0_it0))) begin
        udpChecksum_V_1 <= udpChecksum_V_1_new_phi_fu_87_p4;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_bdd_83 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_83)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm0_0 or ap_sig_cseq_ST_st0_fsm1_0 or ap_sig_cseq_ST_st0_fsm2_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st0_fsm1_0) & (ap_const_logic_1 == ap_sig_cseq_ST_st0_fsm2_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or ap_sig_bdd_60 or ap_sig_bdd_83 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_60 | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st0_fsm1_0 assign process. ///
always @ (ap_sig_bdd_37)
begin
    if (ap_sig_bdd_37) begin
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st0_fsm1_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st0_fsm2_0 assign process. ///
always @ (ap_sig_bdd_45)
begin
    if (ap_sig_bdd_45) begin
        ap_sig_cseq_ST_st0_fsm2_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st0_fsm2_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm0_0 assign process. ///
always @ (ap_sig_bdd_26)
begin
    if (ap_sig_bdd_26) begin
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm0_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm1_1 assign process. ///
always @ (ap_sig_bdd_66)
begin
    if (ap_sig_bdd_66) begin
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm1_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm2_1 assign process. ///
always @ (ap_sig_bdd_88)
begin
    if (ap_sig_bdd_88) begin
        ap_sig_cseq_ST_st3_fsm2_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm2_1 = ap_const_logic_0;
    end
end

/// checksumCalculation2outputPath_write assign process. ///
always @ (ap_done_reg or ap_reg_ppstg_tmp_reg_255_pp0_it1 or ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it1 or ap_sig_bdd_83 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if ((~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_255_pp0_it1) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it1) & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_83))) begin
        checksumCalculation2outputPath_write = ap_const_logic_1;
    end else begin
        checksumCalculation2outputPath_write = ap_const_logic_0;
    end
end

/// outputPathWriteFunction2checks0_update assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or tmp_nbreadreq_fu_58_p4 or ap_sig_bdd_60 or ap_sig_bdd_83 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~(tmp_nbreadreq_fu_58_p4 == ap_const_lv1_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_60 | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
        outputPathWriteFunction2checks0_update = ap_const_logic_1;
    end else begin
        outputPathWriteFunction2checks0_update = ap_const_logic_0;
    end
end

/// udpChecksum_V_1_new_phi_fu_87_p4 assign process. ///
always @ (ap_sig_cseq_ST_st2_fsm1_1 or ap_reg_ppstg_tmp_reg_255_pp0_it0 or ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it0 or ap_reg_phiprechg_udpChecksum_V_1_new_reg_83pp0_it1 or tmp_51_fu_180_p2)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_255_pp0_it0) & (ap_const_lv1_0 == ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it0))) begin
        udpChecksum_V_1_new_phi_fu_87_p4 = tmp_51_fu_180_p2;
    end else begin
        udpChecksum_V_1_new_phi_fu_87_p4 = ap_reg_phiprechg_udpChecksum_V_1_new_reg_83pp0_it1;
    end
end
/// the next state (ap_NS_fsm2) of the state machine. ///
always @ (ap_done_reg or ap_CS_fsm2 or ap_sig_cseq_ST_st2_fsm1_1 or ap_sig_bdd_83 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    case (ap_CS_fsm2)
        ap_ST_st3_fsm2_1 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_83))) begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end else if ((~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_83) & ~(ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1))) begin
                ap_NS_fsm2 = ap_ST_st0_fsm2_0;
            end else begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end
        end
        ap_ST_st0_fsm2_0 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm1_1) & ~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
                ap_NS_fsm2 = ap_ST_st3_fsm2_1;
            end else begin
                ap_NS_fsm2 = ap_ST_st0_fsm2_0;
            end
        end
        default : 
        begin
            ap_NS_fsm2 = 'bx;
        end
    endcase
end

/// the next state (ap_NS_fsm1) of the state machine. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or ap_CS_fsm1 or ap_sig_bdd_60 or ap_sig_bdd_83 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    case (ap_CS_fsm1)
        ap_ST_st2_fsm1_1 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))) & ~ap_sig_bdd_60)) begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end else if ((~((ap_done_reg == ap_const_logic_1) | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))) & (~(ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ap_sig_bdd_60)))) begin
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            end else begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end
        end
        ap_ST_st0_fsm1_0 : 
        begin
            if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_60 | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))))) begin
                ap_NS_fsm1 = ap_ST_st2_fsm1_1;
            end else begin
                ap_NS_fsm1 = ap_ST_st0_fsm1_0;
            end
        end
        default : 
        begin
            ap_NS_fsm1 = 'bx;
        end
    endcase
end

/// the next state (ap_NS_fsm0) of the state machine. ///
always @ (ap_done_reg or ap_CS_fsm0 or ap_sig_bdd_60 or ap_sig_bdd_83 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    case (ap_CS_fsm0)
        ap_ST_st1_fsm0_0 : 
        begin
            ap_NS_fsm0 = ap_ST_st1_fsm0_0;
        end
        default : 
        begin
            ap_NS_fsm0 = 'bx;
        end
    endcase
end

assign ap_reg_phiprechg_udpChecksum_V_1_new_reg_83pp0_it0 = 'bx;
assign ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it0 = tmp_eop_V_reg_259;
assign ap_reg_ppstg_tmp_reg_255_pp0_it0 = tmp_reg_255;

/// ap_sig_bdd_142 assign process. ///
always @ (tmp_nbreadreq_fu_58_p4 or tmp_eop_V_fu_99_p1)
begin
    ap_sig_bdd_142 = (~(tmp_nbreadreq_fu_58_p4 == ap_const_lv1_0) & ~(ap_const_lv1_0 == tmp_eop_V_fu_99_p1));
end

/// ap_sig_bdd_26 assign process. ///
always @ (ap_CS_fsm0)
begin
    ap_sig_bdd_26 = (ap_CS_fsm0[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_37 assign process. ///
always @ (ap_CS_fsm1)
begin
    ap_sig_bdd_37 = (ap_const_lv1_1 == ap_CS_fsm1[ap_const_lv32_0]);
end

/// ap_sig_bdd_45 assign process. ///
always @ (ap_CS_fsm2)
begin
    ap_sig_bdd_45 = (ap_const_lv1_1 == ap_CS_fsm2[ap_const_lv32_0]);
end

/// ap_sig_bdd_60 assign process. ///
always @ (ap_start or ap_done_reg or outputPathWriteFunction2checks0_status or tmp_nbreadreq_fu_58_p4)
begin
    ap_sig_bdd_60 = (((outputPathWriteFunction2checks0_status == ap_const_logic_0) & ~(tmp_nbreadreq_fu_58_p4 == ap_const_lv1_0)) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_66 assign process. ///
always @ (ap_CS_fsm1)
begin
    ap_sig_bdd_66 = (ap_const_lv1_1 == ap_CS_fsm1[ap_const_lv32_1]);
end

/// ap_sig_bdd_83 assign process. ///
always @ (checksumCalculation2outputPath_full_n or ap_reg_ppstg_tmp_reg_255_pp0_it1 or ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it1)
begin
    ap_sig_bdd_83 = ((checksumCalculation2outputPath_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_reg_255_pp0_it1) & ~(ap_const_lv1_0 == ap_reg_ppstg_tmp_eop_V_reg_259_pp0_it1));
end

/// ap_sig_bdd_88 assign process. ///
always @ (ap_CS_fsm2)
begin
    ap_sig_bdd_88 = (ap_const_lv1_1 == ap_CS_fsm2[ap_const_lv32_1]);
end

/// ap_sig_bdd_95 assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm0_0 or ap_sig_bdd_60 or ap_sig_bdd_83 or ap_sig_cseq_ST_st3_fsm2_1)
begin
    ap_sig_bdd_95 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm0_0) & ~((ap_done_reg == ap_const_logic_1) | ap_sig_bdd_60 | (ap_sig_bdd_83 & (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm2_1))));
end
assign checksumCalculation2outputPath_din = (tmp_53_reg_278 ^ ap_const_lv16_FFFF);
assign outputPathWriteFunction2checks0_status = (outputPathWriteFunction2checks_empty_n & outputPathWriteFunction2checks_1_empty_n);
assign outputPathWriteFunction2checks_1_read = outputPathWriteFunction2checks0_update;
assign outputPathWriteFunction2checks_read = outputPathWriteFunction2checks0_update;
assign p_Result_s_fu_103_p4 = {{outputPathWriteFunction2checks_dout[ap_const_lv32_3F : ap_const_lv32_30]}};
assign r_V_5_fu_233_p1 = tmp_101_fu_225_p3;
assign r_V_cast_fu_205_p1 = r_V_fu_195_p4;
assign r_V_fu_195_p4 = {{tmp_51_fu_180_p2[ap_const_lv32_1F : ap_const_lv32_10]}};
assign tmp3_fu_161_p2 = (udpChecksum_V_1 + tmp_s_fu_155_p1);
assign tmp4_cast_fu_176_p1 = tmp4_fu_170_p2;
assign tmp4_fu_170_p2 = (tmp5_cast_fu_167_p1 + tmp_61_cast_fu_158_p1);
assign tmp5_cast_fu_167_p1 = tmp5_reg_273;
assign tmp5_fu_145_p2 = (tmp_cast_fu_113_p1 + tmp_62_cast_fu_141_p1);
assign tmp_100_fu_219_p2 = (tmp_99_fu_215_p1 + r_V_fu_195_p4);
assign tmp_101_fu_225_p3 = tmp_52_fu_209_p2[ap_const_lv32_10];
assign tmp_51_fu_180_p2 = (tmp4_cast_fu_176_p1 + tmp3_fu_161_p2);
assign tmp_52_fu_209_p2 = (tmp_73_cast_fu_191_p1 + r_V_cast_fu_205_p1);
assign tmp_53_fu_237_p2 = (tmp_100_fu_219_p2 + r_V_5_fu_233_p1);
assign tmp_61_cast_fu_158_p1 = p_Result_12_reg_268;
assign tmp_62_cast_fu_141_p1 = tmp_97_fu_137_p1;
assign tmp_73_cast_fu_191_p1 = tmp_98_fu_187_p1;
assign tmp_97_fu_137_p1 = outputPathWriteFunction2checks_dout[15:0];
assign tmp_98_fu_187_p1 = tmp_51_fu_180_p2[15:0];
assign tmp_99_fu_215_p1 = tmp_51_fu_180_p2[15:0];
assign tmp_cast_fu_113_p1 = p_Result_s_fu_103_p4;
assign tmp_eop_V_fu_99_p1 = outputPathWriteFunction2checks_1_dout;
assign tmp_nbreadreq_fu_58_p4 = (outputPathWriteFunction2checks_empty_n & outputPathWriteFunction2checks_1_empty_n);
assign tmp_s_fu_155_p1 = p_Result_s_35_reg_263;


endmodule //udp_udpChecksumCalculation

