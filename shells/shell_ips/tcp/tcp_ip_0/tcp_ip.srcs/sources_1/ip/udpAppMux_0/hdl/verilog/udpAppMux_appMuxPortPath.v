// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module udpAppMux_appMuxPortPath (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        requestPortOpenOut_V_V_din,
        requestPortOpenOut_V_V_full_n,
        requestPortOpenOut_V_V_write,
        portOpenReplyIn_V_dout,
        portOpenReplyIn_V_empty_n,
        portOpenReplyIn_V_read,
        requestPortOpenInDhcp_V_V_dout,
        requestPortOpenInDhcp_V_V_empty_n,
        requestPortOpenInDhcp_V_V_read,
        portOpenReplyOutDhcp_V_din,
        portOpenReplyOutDhcp_V_full_n,
        portOpenReplyOutDhcp_V_write,
        requestPortOpenInApp_V_V_dout,
        requestPortOpenInApp_V_V_empty_n,
        requestPortOpenInApp_V_V_read,
        portOpenReplyOutApp_V_din,
        portOpenReplyOutApp_V_full_n,
        portOpenReplyOutApp_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] requestPortOpenOut_V_V_din;
input   requestPortOpenOut_V_V_full_n;
output   requestPortOpenOut_V_V_write;
input   portOpenReplyIn_V_dout;
input   portOpenReplyIn_V_empty_n;
output   portOpenReplyIn_V_read;
input  [15:0] requestPortOpenInDhcp_V_V_dout;
input   requestPortOpenInDhcp_V_V_empty_n;
output   requestPortOpenInDhcp_V_V_read;
output   portOpenReplyOutDhcp_V_din;
input   portOpenReplyOutDhcp_V_full_n;
output   portOpenReplyOutDhcp_V_write;
input  [15:0] requestPortOpenInApp_V_V_dout;
input   requestPortOpenInApp_V_V_empty_n;
output   requestPortOpenInApp_V_V_read;
output   portOpenReplyOutApp_V_din;
input   portOpenReplyOutApp_V_full_n;
output   portOpenReplyOutApp_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] requestPortOpenOut_V_V_din;
reg requestPortOpenOut_V_V_write;
reg portOpenReplyIn_V_read;
reg requestPortOpenInDhcp_V_V_read;
reg portOpenReplyOutDhcp_V_write;
reg requestPortOpenInApp_V_V_read;
reg portOpenReplyOutApp_V_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
reg   [0:0] shimStatePort = 1'b0;
reg   [0:0] streamSourcePort_V = 1'b0;
wire   [0:0] tmp_nbwritereq_fu_88_p3;
wire   [0:0] tmp_2_nbreadreq_fu_96_p3;
wire   [0:0] tmp_3_nbreadreq_fu_104_p3;
wire   [0:0] tmp_1_nbwritereq_fu_133_p3;
wire   [0:0] tmp_4_nbreadreq_fu_141_p3;
reg    ap_sig_bdd_110;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_bdd_142;
reg    ap_sig_bdd_141;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_rst or posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_rst or posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_110)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// shimStatePort assign process. ///
always @ (posedge ap_rst or posedge ap_clk)
begin : ap_ret_shimStatePort
    if (ap_rst == 1'b1) begin
        shimStatePort <= ap_const_lv1_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_1_nbwritereq_fu_133_p3) & (ap_const_lv1_0 == streamSourcePort_V) & ~(ap_const_lv1_0 == tmp_4_nbreadreq_fu_141_p3) & ~ap_sig_bdd_110) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_1_nbwritereq_fu_133_p3) & ~(ap_const_lv1_0 == tmp_4_nbreadreq_fu_141_p3) & ~(ap_const_lv1_0 == streamSourcePort_V) & ~ap_sig_bdd_110))) begin
            shimStatePort <= ap_const_lv1_0;
        end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & (ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3) & ~(ap_const_lv1_0 == tmp_3_nbreadreq_fu_104_p3) & ~ap_sig_bdd_110) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & ~(ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3) & ~ap_sig_bdd_110))) begin
            shimStatePort <= ap_const_lv1_1;
        end
    end
end

/// streamSourcePort_V assign process. ///
always @ (posedge ap_rst or posedge ap_clk)
begin : ap_ret_streamSourcePort_V
    if (ap_rst == 1'b1) begin
        streamSourcePort_V <= ap_const_lv1_0;
    end else begin
        if (ap_sig_bdd_141) begin
            if (~(ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3)) begin
                streamSourcePort_V <= ap_const_lv1_0;
            end else if (ap_sig_bdd_142) begin
                streamSourcePort_V <= ap_const_lv1_1;
            end
        end
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_110)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_110))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_110)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_110)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_20)
begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// portOpenReplyIn_V_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or shimStatePort or streamSourcePort_V or tmp_1_nbwritereq_fu_133_p3 or tmp_4_nbreadreq_fu_141_p3 or ap_sig_bdd_110)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_1_nbwritereq_fu_133_p3) & (ap_const_lv1_0 == streamSourcePort_V) & ~(ap_const_lv1_0 == tmp_4_nbreadreq_fu_141_p3) & ~ap_sig_bdd_110) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_1_nbwritereq_fu_133_p3) & ~(ap_const_lv1_0 == tmp_4_nbreadreq_fu_141_p3) & ~(ap_const_lv1_0 == streamSourcePort_V) & ~ap_sig_bdd_110))) begin
        portOpenReplyIn_V_read = ap_const_logic_1;
    end else begin
        portOpenReplyIn_V_read = ap_const_logic_0;
    end
end

/// portOpenReplyOutApp_V_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or shimStatePort or streamSourcePort_V or tmp_1_nbwritereq_fu_133_p3 or tmp_4_nbreadreq_fu_141_p3 or ap_sig_bdd_110)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_1_nbwritereq_fu_133_p3) & ~(ap_const_lv1_0 == tmp_4_nbreadreq_fu_141_p3) & ~(ap_const_lv1_0 == streamSourcePort_V) & ~ap_sig_bdd_110)) begin
        portOpenReplyOutApp_V_write = ap_const_logic_1;
    end else begin
        portOpenReplyOutApp_V_write = ap_const_logic_0;
    end
end

/// portOpenReplyOutDhcp_V_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or shimStatePort or streamSourcePort_V or tmp_1_nbwritereq_fu_133_p3 or tmp_4_nbreadreq_fu_141_p3 or ap_sig_bdd_110)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_1_nbwritereq_fu_133_p3) & (ap_const_lv1_0 == streamSourcePort_V) & ~(ap_const_lv1_0 == tmp_4_nbreadreq_fu_141_p3) & ~ap_sig_bdd_110)) begin
        portOpenReplyOutDhcp_V_write = ap_const_logic_1;
    end else begin
        portOpenReplyOutDhcp_V_write = ap_const_logic_0;
    end
end

/// requestPortOpenInApp_V_V_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or shimStatePort or tmp_nbwritereq_fu_88_p3 or tmp_2_nbreadreq_fu_96_p3 or tmp_3_nbreadreq_fu_104_p3 or ap_sig_bdd_110)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & (ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3) & ~(ap_const_lv1_0 == tmp_3_nbreadreq_fu_104_p3) & ~ap_sig_bdd_110)) begin
        requestPortOpenInApp_V_V_read = ap_const_logic_1;
    end else begin
        requestPortOpenInApp_V_V_read = ap_const_logic_0;
    end
end

/// requestPortOpenInDhcp_V_V_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or shimStatePort or tmp_nbwritereq_fu_88_p3 or tmp_2_nbreadreq_fu_96_p3 or ap_sig_bdd_110)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & ~(ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3) & ~ap_sig_bdd_110)) begin
        requestPortOpenInDhcp_V_V_read = ap_const_logic_1;
    end else begin
        requestPortOpenInDhcp_V_V_read = ap_const_logic_0;
    end
end

/// requestPortOpenOut_V_V_din assign process. ///
always @ (requestPortOpenInDhcp_V_V_dout or requestPortOpenInApp_V_V_dout or tmp_2_nbreadreq_fu_96_p3 or ap_sig_bdd_142 or ap_sig_bdd_141)
begin
    if (ap_sig_bdd_141) begin
        if (~(ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3)) begin
            requestPortOpenOut_V_V_din = requestPortOpenInDhcp_V_V_dout;
        end else if (ap_sig_bdd_142) begin
            requestPortOpenOut_V_V_din = requestPortOpenInApp_V_V_dout;
        end else begin
            requestPortOpenOut_V_V_din = 'bx;
        end
    end else begin
        requestPortOpenOut_V_V_din = 'bx;
    end
end

/// requestPortOpenOut_V_V_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or shimStatePort or tmp_nbwritereq_fu_88_p3 or tmp_2_nbreadreq_fu_96_p3 or tmp_3_nbreadreq_fu_104_p3 or ap_sig_bdd_110)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & (ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3) & ~(ap_const_lv1_0 == tmp_3_nbreadreq_fu_104_p3) & ~ap_sig_bdd_110) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & ~(ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3) & ~ap_sig_bdd_110))) begin
        requestPortOpenOut_V_V_write = ap_const_logic_1;
    end else begin
        requestPortOpenOut_V_V_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_110)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_110 assign process. ///
always @ (ap_start or ap_done_reg or requestPortOpenOut_V_V_full_n or portOpenReplyIn_V_empty_n or requestPortOpenInDhcp_V_V_empty_n or portOpenReplyOutDhcp_V_full_n or requestPortOpenInApp_V_V_empty_n or portOpenReplyOutApp_V_full_n or shimStatePort or streamSourcePort_V or tmp_nbwritereq_fu_88_p3 or tmp_2_nbreadreq_fu_96_p3 or tmp_3_nbreadreq_fu_104_p3 or tmp_1_nbwritereq_fu_133_p3 or tmp_4_nbreadreq_fu_141_p3)
begin
    ap_sig_bdd_110 = (((requestPortOpenInApp_V_V_empty_n == ap_const_logic_0) & (ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & (ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3) & ~(ap_const_lv1_0 == tmp_3_nbreadreq_fu_104_p3)) | ((ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & (ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3) & ~(ap_const_lv1_0 == tmp_3_nbreadreq_fu_104_p3) & (requestPortOpenOut_V_V_full_n == ap_const_logic_0)) | ((ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & (requestPortOpenInDhcp_V_V_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3)) | ((ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & (requestPortOpenOut_V_V_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3)) | ((portOpenReplyIn_V_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_1_nbwritereq_fu_133_p3) & (ap_const_lv1_0 == streamSourcePort_V) & ~(ap_const_lv1_0 == tmp_4_nbreadreq_fu_141_p3)) | (~(ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_1_nbwritereq_fu_133_p3) & (ap_const_lv1_0 == streamSourcePort_V) & ~(ap_const_lv1_0 == tmp_4_nbreadreq_fu_141_p3) & (portOpenReplyOutDhcp_V_full_n == ap_const_logic_0)) | ((portOpenReplyIn_V_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_1_nbwritereq_fu_133_p3) & ~(ap_const_lv1_0 == tmp_4_nbreadreq_fu_141_p3) & ~(ap_const_lv1_0 == streamSourcePort_V)) | (~(ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_1_nbwritereq_fu_133_p3) & ~(ap_const_lv1_0 == tmp_4_nbreadreq_fu_141_p3) & ~(ap_const_lv1_0 == streamSourcePort_V) & (portOpenReplyOutApp_V_full_n == ap_const_logic_0)) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end

/// ap_sig_bdd_141 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or shimStatePort or tmp_nbwritereq_fu_88_p3 or ap_sig_bdd_110)
begin
    ap_sig_bdd_141 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_lv1_0 == shimStatePort) & ~(ap_const_lv1_0 == tmp_nbwritereq_fu_88_p3) & ~ap_sig_bdd_110);
end

/// ap_sig_bdd_142 assign process. ///
always @ (tmp_2_nbreadreq_fu_96_p3 or tmp_3_nbreadreq_fu_104_p3)
begin
    ap_sig_bdd_142 = ((ap_const_lv1_0 == tmp_2_nbreadreq_fu_96_p3) & ~(ap_const_lv1_0 == tmp_3_nbreadreq_fu_104_p3));
end

/// ap_sig_bdd_20 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end
assign portOpenReplyOutApp_V_din = portOpenReplyIn_V_dout;
assign portOpenReplyOutDhcp_V_din = portOpenReplyIn_V_dout;
assign tmp_1_nbwritereq_fu_133_p3 = portOpenReplyOutDhcp_V_full_n;
assign tmp_2_nbreadreq_fu_96_p3 = requestPortOpenInDhcp_V_V_empty_n;
assign tmp_3_nbreadreq_fu_104_p3 = requestPortOpenInApp_V_V_empty_n;
assign tmp_4_nbreadreq_fu_141_p3 = portOpenReplyIn_V_empty_n;
assign tmp_nbwritereq_fu_88_p3 = requestPortOpenOut_V_V_full_n;


endmodule //udpAppMux_appMuxPortPath

