// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module icmp_server_dropper (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        packageBuffer1_V_dout,
        packageBuffer1_V_empty_n,
        packageBuffer1_V_read,
        validFifo_V_dout,
        validFifo_V_empty_n,
        validFifo_V_read,
        dataStreams_V_data_V_0_din,
        dataStreams_V_data_V_0_full_n,
        dataStreams_V_data_V_0_write,
        dataStreams_V_keep_V_0_din,
        dataStreams_V_keep_V_0_full_n,
        dataStreams_V_keep_V_0_write,
        dataStreams_V_last_V_0_din,
        dataStreams_V_last_V_0_full_n,
        dataStreams_V_last_V_0_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_40 = 32'b1000000;
parameter    ap_const_lv32_47 = 32'b1000111;
parameter    ap_const_lv32_48 = 32'b1001000;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [72:0] packageBuffer1_V_dout;
input   packageBuffer1_V_empty_n;
output   packageBuffer1_V_read;
input  [0:0] validFifo_V_dout;
input   validFifo_V_empty_n;
output   validFifo_V_read;
output  [63:0] dataStreams_V_data_V_0_din;
input   dataStreams_V_data_V_0_full_n;
output   dataStreams_V_data_V_0_write;
output  [7:0] dataStreams_V_keep_V_0_din;
input   dataStreams_V_keep_V_0_full_n;
output   dataStreams_V_keep_V_0_write;
output  [0:0] dataStreams_V_last_V_0_din;
input   dataStreams_V_last_V_0_full_n;
output   dataStreams_V_last_V_0_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg packageBuffer1_V_read;
reg validFifo_V_read;
reg[63:0] dataStreams_V_data_V_0_din;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
reg   [0:0] d_isFirstWord = 1'b1;
reg   [0:0] d_drop = 1'b0;
reg   [0:0] d_isFirstWord_flag_phi_fu_118_p10;
wire   [0:0] tmp_nbreadreq_fu_74_p3;
wire    dataStreams_V_data_V_01_status;
wire   [0:0] tmp_6_nbreadreq_fu_101_p3;
reg    ap_sig_bdd_88;
reg   [0:0] d_drop_flag_1_phi_fu_138_p10;
wire   [0:0] grp_fu_183_p3;
reg    dataStreams_V_data_V_01_update;
wire   [63:0] tmp_data_V_fu_204_p1;
wire   [63:0] tmp_data_V_9_fu_209_p1;
wire   [0:0] p_d_isFirstWord_flag_fu_214_p2;
wire   [0:0] not_tmp_s_fu_226_p2;
wire   [0:0] p_d_drop_flag_1_fu_220_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_sig_bdd_190;
reg    ap_sig_bdd_193;
reg    ap_sig_bdd_189;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_88)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~ap_sig_bdd_88 & ~(ap_const_lv1_0 == p_d_drop_flag_1_fu_220_p2))) begin
        d_drop <= not_tmp_s_fu_226_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~ap_sig_bdd_88 & ~(ap_const_lv1_0 == p_d_isFirstWord_flag_fu_214_p2))) begin
        d_isFirstWord <= packageBuffer1_V_dout[ap_const_lv32_48];
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_88)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_88))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_88)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_88)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_20)
begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// d_drop_flag_1_phi_fu_138_p10 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or d_isFirstWord or d_drop or validFifo_V_dout or tmp_nbreadreq_fu_74_p3 or tmp_6_nbreadreq_fu_101_p3)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3) & (ap_const_lv1_0 == validFifo_V_dout))) begin
        d_drop_flag_1_phi_fu_138_p10 = ap_const_lv1_1;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & (ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & (ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == d_drop)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & (ap_const_lv1_0 == d_isFirstWord) & (ap_const_lv1_0 == d_drop)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3) & ~(ap_const_lv1_0 == validFifo_V_dout)))) begin
        d_drop_flag_1_phi_fu_138_p10 = ap_const_lv1_0;
    end else begin
        d_drop_flag_1_phi_fu_138_p10 = 'bx;
    end
end

/// d_isFirstWord_flag_phi_fu_118_p10 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or d_isFirstWord or d_drop or validFifo_V_dout or tmp_nbreadreq_fu_74_p3 or tmp_6_nbreadreq_fu_101_p3)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3) & (ap_const_lv1_0 == validFifo_V_dout)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3) & ~(ap_const_lv1_0 == validFifo_V_dout)))) begin
        d_isFirstWord_flag_phi_fu_118_p10 = ap_const_lv1_1;
    end else if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & (ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & (ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == d_drop)) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & (ap_const_lv1_0 == d_isFirstWord) & (ap_const_lv1_0 == d_drop)))) begin
        d_isFirstWord_flag_phi_fu_118_p10 = ap_const_lv1_0;
    end else begin
        d_isFirstWord_flag_phi_fu_118_p10 = 'bx;
    end
end

/// dataStreams_V_data_V_01_update assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or d_isFirstWord or d_drop or validFifo_V_dout or tmp_nbreadreq_fu_74_p3 or tmp_6_nbreadreq_fu_101_p3 or ap_sig_bdd_88)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & (ap_const_lv1_0 == d_isFirstWord) & (ap_const_lv1_0 == d_drop) & ~ap_sig_bdd_88) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3) & ~(ap_const_lv1_0 == validFifo_V_dout) & ~ap_sig_bdd_88))) begin
        dataStreams_V_data_V_01_update = ap_const_logic_1;
    end else begin
        dataStreams_V_data_V_01_update = ap_const_logic_0;
    end
end

/// dataStreams_V_data_V_0_din assign process. ///
always @ (tmp_data_V_fu_204_p1 or tmp_data_V_9_fu_209_p1 or ap_sig_bdd_190 or ap_sig_bdd_193 or ap_sig_bdd_189)
begin
    if (ap_sig_bdd_189) begin
        if (ap_sig_bdd_193) begin
            dataStreams_V_data_V_0_din = tmp_data_V_9_fu_209_p1;
        end else if (ap_sig_bdd_190) begin
            dataStreams_V_data_V_0_din = tmp_data_V_fu_204_p1;
        end else begin
            dataStreams_V_data_V_0_din = 'bx;
        end
    end else begin
        dataStreams_V_data_V_0_din = 'bx;
    end
end

/// packageBuffer1_V_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or d_isFirstWord or tmp_nbreadreq_fu_74_p3 or tmp_6_nbreadreq_fu_101_p3 or ap_sig_bdd_88)
begin
    if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & (ap_const_lv1_0 == d_isFirstWord) & ~ap_sig_bdd_88) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3) & ~ap_sig_bdd_88))) begin
        packageBuffer1_V_read = ap_const_logic_1;
    end else begin
        packageBuffer1_V_read = ap_const_logic_0;
    end
end

/// validFifo_V_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or d_isFirstWord or tmp_nbreadreq_fu_74_p3 or tmp_6_nbreadreq_fu_101_p3 or ap_sig_bdd_88)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3) & ~ap_sig_bdd_88)) begin
        validFifo_V_read = ap_const_logic_1;
    end else begin
        validFifo_V_read = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_88)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_189 assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or tmp_nbreadreq_fu_74_p3 or ap_sig_bdd_88)
begin
    ap_sig_bdd_189 = ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~ap_sig_bdd_88);
end

/// ap_sig_bdd_190 assign process. ///
always @ (d_isFirstWord or d_drop)
begin
    ap_sig_bdd_190 = ((ap_const_lv1_0 == d_isFirstWord) & (ap_const_lv1_0 == d_drop));
end

/// ap_sig_bdd_193 assign process. ///
always @ (d_isFirstWord or validFifo_V_dout or tmp_6_nbreadreq_fu_101_p3)
begin
    ap_sig_bdd_193 = (~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3) & ~(ap_const_lv1_0 == validFifo_V_dout));
end

/// ap_sig_bdd_20 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_88 assign process. ///
always @ (ap_start or ap_done_reg or packageBuffer1_V_empty_n or d_isFirstWord or d_drop or validFifo_V_dout or validFifo_V_empty_n or tmp_nbreadreq_fu_74_p3 or dataStreams_V_data_V_01_status or tmp_6_nbreadreq_fu_101_p3)
begin
    ap_sig_bdd_88 = (((packageBuffer1_V_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & (ap_const_lv1_0 == d_isFirstWord)) | (~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & (ap_const_lv1_0 == d_isFirstWord) & (dataStreams_V_data_V_01_status == ap_const_logic_0) & (ap_const_lv1_0 == d_drop)) | ((packageBuffer1_V_empty_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3)) | (~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & ~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3) & (validFifo_V_empty_n == ap_const_logic_0)) | (~(ap_const_lv1_0 == tmp_nbreadreq_fu_74_p3) & (dataStreams_V_data_V_01_status == ap_const_logic_0) & ~(ap_const_lv1_0 == d_isFirstWord) & ~(ap_const_lv1_0 == tmp_6_nbreadreq_fu_101_p3) & ~(ap_const_lv1_0 == validFifo_V_dout)) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign dataStreams_V_data_V_01_status = (dataStreams_V_data_V_0_full_n & dataStreams_V_keep_V_0_full_n & dataStreams_V_last_V_0_full_n);
assign dataStreams_V_data_V_0_write = dataStreams_V_data_V_01_update;
assign dataStreams_V_keep_V_0_din = {{packageBuffer1_V_dout[ap_const_lv32_47 : ap_const_lv32_40]}};
assign dataStreams_V_keep_V_0_write = dataStreams_V_data_V_01_update;
assign dataStreams_V_last_V_0_din = grp_fu_183_p3;
assign dataStreams_V_last_V_0_write = dataStreams_V_data_V_01_update;
assign grp_fu_183_p3 = packageBuffer1_V_dout[ap_const_lv32_48];
assign not_tmp_s_fu_226_p2 = (grp_fu_183_p3 ^ ap_const_lv1_1);
assign p_d_drop_flag_1_fu_220_p2 = (grp_fu_183_p3 | d_drop_flag_1_phi_fu_138_p10);
assign p_d_isFirstWord_flag_fu_214_p2 = (grp_fu_183_p3 | d_isFirstWord_flag_phi_fu_118_p10);
assign tmp_6_nbreadreq_fu_101_p3 = validFifo_V_empty_n;
assign tmp_data_V_9_fu_209_p1 = packageBuffer1_V_dout[63:0];
assign tmp_data_V_fu_204_p1 = packageBuffer1_V_dout[63:0];
assign tmp_nbreadreq_fu_74_p3 = packageBuffer1_V_empty_n;


endmodule //icmp_server_dropper

