// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.1
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dhcp_client_open_dhcp_port (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        openPort_V_V_din,
        openPort_V_V_full_n,
        openPort_V_V_write,
        confirmPortStatus_V_dout,
        confirmPortStatus_V_empty_n,
        confirmPortStatus_V_read,
        portOpen_V_V_din,
        portOpen_V_V_full_n,
        portOpen_V_V_write
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv16_44 = 16'b1000100;
parameter    ap_const_lv32_FFFFFFFF = 32'b11111111111111111111111111111111;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [15:0] openPort_V_V_din;
input   openPort_V_V_full_n;
output   openPort_V_V_write;
input   confirmPortStatus_V_dout;
input   confirmPortStatus_V_empty_n;
output   confirmPortStatus_V_read;
output  [0:0] portOpen_V_V_din;
input   portOpen_V_V_full_n;
output   portOpen_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg openPort_V_V_write;
reg confirmPortStatus_V_read;
reg portOpen_V_V_write;
reg    ap_done_reg = 1'b0;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm = 1'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_20;
reg   [31:0] openPortWaitTime_V = 32'b101100101111111000110000011110;
reg   [0:0] odp_listenDone = 1'b0;
reg   [0:0] odp_waitListenStatus = 1'b0;
wire   [0:0] tmp_2_nbwritereq_fu_58_p3;
wire   [0:0] tmp_fu_101_p2;
wire   [0:0] brmerge_fu_127_p2;
wire   [0:0] brmerge1_demorgan_fu_139_p2;
reg    ap_sig_bdd_76;
wire   [0:0] tmp_4_read_fu_82_p2;
wire   [31:0] tmp_1_fu_107_p2;
wire   [0:0] brmerge1_demorgan_fu_139_p1;
reg   [0:0] ap_NS_fsm;




/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_done_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_done_reg
    if (ap_rst == 1'b1) begin
        ap_done_reg <= ap_const_logic_0;
    end else begin
        if ((ap_const_logic_1 == ap_continue)) begin
            ap_done_reg <= ap_const_logic_0;
        end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_76)) begin
            ap_done_reg <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ((~(ap_const_lv1_0 == tmp_fu_101_p2) & ~(ap_const_lv1_0 == brmerge_fu_127_p2) & ~(ap_const_lv1_0 == brmerge1_demorgan_fu_139_p2)) | (~(ap_const_lv1_0 == tmp_fu_101_p2) & (ap_const_lv1_0 == tmp_2_nbwritereq_fu_58_p3) & ~(ap_const_lv1_0 == brmerge1_demorgan_fu_139_p2))) & ~ap_sig_bdd_76)) begin
        odp_listenDone <= tmp_4_read_fu_82_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_fu_101_p2) & (ap_const_lv1_0 == brmerge_fu_127_p2) & ~(ap_const_lv1_0 == tmp_2_nbwritereq_fu_58_p3) & ~ap_sig_bdd_76)) begin
        odp_waitListenStatus <= ap_const_lv1_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & (ap_const_lv1_0 == tmp_fu_101_p2) & ~ap_sig_bdd_76)) begin
        openPortWaitTime_V <= tmp_1_fu_107_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_done_reg or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_76)
begin
    if (((ap_const_logic_1 == ap_done_reg) | ((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_76))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or ap_sig_bdd_76)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~ap_sig_bdd_76)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_20)
begin
    if (ap_sig_bdd_20) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// confirmPortStatus_V_read assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or tmp_2_nbwritereq_fu_58_p3 or tmp_fu_101_p2 or brmerge_fu_127_p2 or brmerge1_demorgan_fu_139_p2 or ap_sig_bdd_76)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ((~(ap_const_lv1_0 == tmp_fu_101_p2) & ~(ap_const_lv1_0 == brmerge_fu_127_p2) & ~(ap_const_lv1_0 == brmerge1_demorgan_fu_139_p2)) | (~(ap_const_lv1_0 == tmp_fu_101_p2) & (ap_const_lv1_0 == tmp_2_nbwritereq_fu_58_p3) & ~(ap_const_lv1_0 == brmerge1_demorgan_fu_139_p2))) & ~ap_sig_bdd_76)) begin
        confirmPortStatus_V_read = ap_const_logic_1;
    end else begin
        confirmPortStatus_V_read = ap_const_logic_0;
    end
end

/// openPort_V_V_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or tmp_2_nbwritereq_fu_58_p3 or tmp_fu_101_p2 or brmerge_fu_127_p2 or ap_sig_bdd_76)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_const_lv1_0 == tmp_fu_101_p2) & (ap_const_lv1_0 == brmerge_fu_127_p2) & ~(ap_const_lv1_0 == tmp_2_nbwritereq_fu_58_p3) & ~ap_sig_bdd_76)) begin
        openPort_V_V_write = ap_const_logic_1;
    end else begin
        openPort_V_V_write = ap_const_logic_0;
    end
end

/// portOpen_V_V_write assign process. ///
always @ (ap_sig_cseq_ST_st1_fsm_0 or tmp_2_nbwritereq_fu_58_p3 or tmp_fu_101_p2 or brmerge_fu_127_p2 or brmerge1_demorgan_fu_139_p2 or ap_sig_bdd_76)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ((~(ap_const_lv1_0 == tmp_fu_101_p2) & ~(ap_const_lv1_0 == brmerge_fu_127_p2) & ~(ap_const_lv1_0 == brmerge1_demorgan_fu_139_p2)) | (~(ap_const_lv1_0 == tmp_fu_101_p2) & (ap_const_lv1_0 == tmp_2_nbwritereq_fu_58_p3) & ~(ap_const_lv1_0 == brmerge1_demorgan_fu_139_p2))) & ~ap_sig_bdd_76)) begin
        portOpen_V_V_write = ap_const_logic_1;
    end else begin
        portOpen_V_V_write = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_CS_fsm or ap_sig_bdd_76)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


/// ap_sig_bdd_20 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_20 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end

/// ap_sig_bdd_76 assign process. ///
always @ (ap_start or ap_done_reg or openPort_V_V_full_n or confirmPortStatus_V_empty_n or portOpen_V_V_full_n or tmp_2_nbwritereq_fu_58_p3 or tmp_fu_101_p2 or brmerge_fu_127_p2 or brmerge1_demorgan_fu_139_p2)
begin
    ap_sig_bdd_76 = (((openPort_V_V_full_n == ap_const_logic_0) & ~(ap_const_lv1_0 == tmp_fu_101_p2) & (ap_const_lv1_0 == brmerge_fu_127_p2) & ~(ap_const_lv1_0 == tmp_2_nbwritereq_fu_58_p3)) | ((confirmPortStatus_V_empty_n == ap_const_logic_0) & ((~(ap_const_lv1_0 == tmp_fu_101_p2) & ~(ap_const_lv1_0 == brmerge_fu_127_p2) & ~(ap_const_lv1_0 == brmerge1_demorgan_fu_139_p2)) | (~(ap_const_lv1_0 == tmp_fu_101_p2) & (ap_const_lv1_0 == tmp_2_nbwritereq_fu_58_p3) & ~(ap_const_lv1_0 == brmerge1_demorgan_fu_139_p2)))) | (((~(ap_const_lv1_0 == tmp_fu_101_p2) & ~(ap_const_lv1_0 == brmerge_fu_127_p2) & ~(ap_const_lv1_0 == brmerge1_demorgan_fu_139_p2)) | (~(ap_const_lv1_0 == tmp_fu_101_p2) & (ap_const_lv1_0 == tmp_2_nbwritereq_fu_58_p3) & ~(ap_const_lv1_0 == brmerge1_demorgan_fu_139_p2))) & (portOpen_V_V_full_n == ap_const_logic_0)) | (ap_start == ap_const_logic_0) | (ap_done_reg == ap_const_logic_1));
end
assign brmerge1_demorgan_fu_139_p1 = confirmPortStatus_V_empty_n;
assign brmerge1_demorgan_fu_139_p2 = (odp_waitListenStatus & brmerge1_demorgan_fu_139_p1);
assign brmerge_fu_127_p2 = (odp_listenDone | odp_waitListenStatus);
assign openPort_V_V_din = ap_const_lv16_44;
assign portOpen_V_V_din = ap_const_lv1_1;
assign tmp_1_fu_107_p2 = ($signed(openPortWaitTime_V) + $signed(ap_const_lv32_FFFFFFFF));
assign tmp_2_nbwritereq_fu_58_p3 = openPort_V_V_full_n;
assign tmp_4_read_fu_82_p2 = confirmPortStatus_V_dout;
assign tmp_fu_101_p2 = (openPortWaitTime_V == ap_const_lv32_0? 1'b1: 1'b0);


endmodule //dhcp_client_open_dhcp_port

