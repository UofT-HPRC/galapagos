// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "payload_validator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic payload_validator::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> payload_validator::ap_ST_fsm_state1 = "1";
const sc_lv<32> payload_validator::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> payload_validator::ap_const_lv1_0 = "0";
const sc_lv<64> payload_validator::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> payload_validator::ap_const_lv1_1 = "1";
const sc_lv<32> payload_validator::ap_const_lv32_1 = "1";
const sc_lv<64> payload_validator::ap_const_lv64_1 = "1";
const sc_lv<33> payload_validator::ap_const_lv33_1 = "1";
const sc_lv<32> payload_validator::ap_const_lv32_1E0 = "111100000";
const sc_lv<32> payload_validator::ap_const_lv32_1FF = "111111111";
const sc_lv<32> payload_validator::ap_const_lv32_38 = "111000";
const sc_lv<32> payload_validator::ap_const_lv32_1C0 = "111000000";
const sc_lv<32> payload_validator::ap_const_lv32_1DF = "111011111";
const sc_logic payload_validator::ap_const_logic_0 = sc_dt::Log_0;
const bool payload_validator::ap_const_boolean_1 = true;

payload_validator::payload_validator(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln214_fu_191_p2);
    sensitive << ( packet_cnt_V );

    SC_METHOD(thread_add_ln700_1_fu_270_p2);
    sensitive << ( latency_sum_reg_V );
    sensitive << ( zext_ln700_fu_266_p1 );

    SC_METHOD(thread_add_ln700_fu_250_p2);
    sensitive << ( time_elapse_reg_V );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_59);
    sensitive << ( ret_V_fu_228_p2 );
    sensitive << ( ret_V_3_fu_316_p2 );
    sensitive << ( tmp_fu_352_p3 );
    sensitive << ( icmp_ln879_fu_346_p2 );

    SC_METHOD(thread_curr_cnt_V);
    sensitive << ( packet_cnt_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_done_V);
    sensitive << ( done_reg_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_error_V);
    sensitive << ( error_reg_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln879_1_fu_282_p2);
    sensitive << ( packet_num_V );
    sensitive << ( packet_cnt_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_fu_228_p2 );

    SC_METHOD(thread_icmp_ln879_fu_346_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_fu_228_p2 );
    sensitive << ( ret_V_3_fu_316_p2 );
    sensitive << ( zext_ln647_fu_342_p1 );
    sensitive << ( ret_V_4_fu_326_p2 );

    SC_METHOD(thread_latency_sum_V);
    sensitive << ( latency_sum_reg_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_lhs_V_2_fu_298_p2);
    sensitive << ( IN_PACKET_V );

    SC_METHOD(thread_lhs_V_fu_222_p2);
    sensitive << ( clear_reg_V );

    SC_METHOD(thread_p_Result_3_fu_332_p4);
    sensitive << ( s_axis_data_V );

    SC_METHOD(thread_p_Result_4_fu_366_p4);
    sensitive << ( s_axis_data_V );

    SC_METHOD(thread_ret_V_1_fu_244_p2);
    sensitive << ( init_reg_V );
    sensitive << ( rhs_V_fu_234_p2 );

    SC_METHOD(thread_ret_V_3_fu_316_p2);
    sensitive << ( ret_V_5_fu_304_p2 );
    sensitive << ( rhs_V_1_fu_310_p2 );

    SC_METHOD(thread_ret_V_4_fu_326_p2);
    sensitive << ( zext_ln215_fu_322_p1 );

    SC_METHOD(thread_ret_V_5_fu_304_p2);
    sensitive << ( s_axis_valid_V );
    sensitive << ( lhs_V_2_fu_298_p2 );

    SC_METHOD(thread_ret_V_6_fu_394_p2);
    sensitive << ( s_axis_last_V );
    sensitive << ( s_axis_valid_V );

    SC_METHOD(thread_ret_V_fu_228_p2);
    sensitive << ( clear_V );
    sensitive << ( lhs_V_fu_222_p2 );

    SC_METHOD(thread_rhs_V_1_fu_310_p2);
    sensitive << ( error_reg_V );

    SC_METHOD(thread_rhs_V_fu_234_p2);
    sensitive << ( done_reg_V );

    SC_METHOD(thread_sub_ln214_fu_376_p2);
    sensitive << ( counter_in_V );
    sensitive << ( p_Result_4_fu_366_p4 );

    SC_METHOD(thread_time_elapse_V);
    sensitive << ( time_elapse_reg_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_fu_352_p3);
    sensitive << ( s_axis_keep_V );

    SC_METHOD(thread_zext_ln215_fu_322_p1);
    sensitive << ( packet_cnt_V );

    SC_METHOD(thread_zext_ln647_fu_342_p1);
    sensitive << ( p_Result_3_fu_332_p4 );

    SC_METHOD(thread_zext_ln700_fu_266_p1);
    sensitive << ( latency_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    packet_cnt_V = "00000000000000000000000000000000";
    error_reg_V = "0";
    done_reg_V = "0";
    latency_sum_reg_V = "0000000000000000000000000000000000000000000000000000000000000000";
    time_elapse_reg_V = "0000000000000000000000000000000000000000000000000000000000000000";
    clear_reg_V = "0";
    IN_PACKET_V = "0";
    latency_V = "00000000000000000000000000000000";
    init_reg_V = "0";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "payload_validator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, clear_V, "(port)clear_V");
    sc_trace(mVcdFile, packet_num_V, "(port)packet_num_V");
    sc_trace(mVcdFile, counter_in_V, "(port)counter_in_V");
    sc_trace(mVcdFile, s_axis_data_V, "(port)s_axis_data_V");
    sc_trace(mVcdFile, s_axis_keep_V, "(port)s_axis_keep_V");
    sc_trace(mVcdFile, s_axis_last_V, "(port)s_axis_last_V");
    sc_trace(mVcdFile, s_axis_valid_V, "(port)s_axis_valid_V");
    sc_trace(mVcdFile, latency_sum_V, "(port)latency_sum_V");
    sc_trace(mVcdFile, time_elapse_V, "(port)time_elapse_V");
    sc_trace(mVcdFile, curr_cnt_V, "(port)curr_cnt_V");
    sc_trace(mVcdFile, done_V, "(port)done_V");
    sc_trace(mVcdFile, error_V, "(port)error_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, packet_cnt_V, "packet_cnt_V");
    sc_trace(mVcdFile, error_reg_V, "error_reg_V");
    sc_trace(mVcdFile, done_reg_V, "done_reg_V");
    sc_trace(mVcdFile, latency_sum_reg_V, "latency_sum_reg_V");
    sc_trace(mVcdFile, time_elapse_reg_V, "time_elapse_reg_V");
    sc_trace(mVcdFile, clear_reg_V, "clear_reg_V");
    sc_trace(mVcdFile, IN_PACKET_V, "IN_PACKET_V");
    sc_trace(mVcdFile, latency_V, "latency_V");
    sc_trace(mVcdFile, init_reg_V, "init_reg_V");
    sc_trace(mVcdFile, add_ln214_fu_191_p2, "add_ln214_fu_191_p2");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ret_V_fu_228_p2, "ret_V_fu_228_p2");
    sc_trace(mVcdFile, ret_V_6_fu_394_p2, "ret_V_6_fu_394_p2");
    sc_trace(mVcdFile, ret_V_3_fu_316_p2, "ret_V_3_fu_316_p2");
    sc_trace(mVcdFile, tmp_fu_352_p3, "tmp_fu_352_p3");
    sc_trace(mVcdFile, icmp_ln879_fu_346_p2, "icmp_ln879_fu_346_p2");
    sc_trace(mVcdFile, icmp_ln879_1_fu_282_p2, "icmp_ln879_1_fu_282_p2");
    sc_trace(mVcdFile, add_ln700_1_fu_270_p2, "add_ln700_1_fu_270_p2");
    sc_trace(mVcdFile, add_ln700_fu_250_p2, "add_ln700_fu_250_p2");
    sc_trace(mVcdFile, ret_V_1_fu_244_p2, "ret_V_1_fu_244_p2");
    sc_trace(mVcdFile, ret_V_5_fu_304_p2, "ret_V_5_fu_304_p2");
    sc_trace(mVcdFile, sub_ln214_fu_376_p2, "sub_ln214_fu_376_p2");
    sc_trace(mVcdFile, lhs_V_fu_222_p2, "lhs_V_fu_222_p2");
    sc_trace(mVcdFile, rhs_V_fu_234_p2, "rhs_V_fu_234_p2");
    sc_trace(mVcdFile, zext_ln700_fu_266_p1, "zext_ln700_fu_266_p1");
    sc_trace(mVcdFile, lhs_V_2_fu_298_p2, "lhs_V_2_fu_298_p2");
    sc_trace(mVcdFile, rhs_V_1_fu_310_p2, "rhs_V_1_fu_310_p2");
    sc_trace(mVcdFile, zext_ln215_fu_322_p1, "zext_ln215_fu_322_p1");
    sc_trace(mVcdFile, p_Result_3_fu_332_p4, "p_Result_3_fu_332_p4");
    sc_trace(mVcdFile, zext_ln647_fu_342_p1, "zext_ln647_fu_342_p1");
    sc_trace(mVcdFile, ret_V_4_fu_326_p2, "ret_V_4_fu_326_p2");
    sc_trace(mVcdFile, p_Result_4_fu_366_p4, "p_Result_4_fu_366_p4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_59, "ap_condition_59");
#endif

    }
    mHdltvinHandle.open("payload_validator.hdltvin.dat");
    mHdltvoutHandle.open("payload_validator.hdltvout.dat");
}

payload_validator::~payload_validator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void payload_validator::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        IN_PACKET_V = ap_const_lv1_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
              esl_seteq<1,1,1>(ret_V_6_fu_394_p2.read(), ap_const_lv1_1)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ret_V_fu_228_p2.read(), ap_const_lv1_1)))) {
            IN_PACKET_V = ap_const_lv1_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_5_fu_304_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_6_fu_394_p2.read()))) {
            IN_PACKET_V = ap_const_lv1_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        clear_reg_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            clear_reg_V = clear_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        done_reg_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_fu_228_p2.read(), ap_const_lv1_1)) {
                done_reg_V = ap_const_lv1_0;
            } else if (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read())) {
                done_reg_V = icmp_ln879_1_fu_282_p2.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        error_reg_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_fu_228_p2.read(), ap_const_lv1_1)) {
                error_reg_V = ap_const_lv1_0;
            } else if (esl_seteq<1,1,1>(ap_condition_59.read(), ap_const_boolean_1)) {
                error_reg_V = ap_const_lv1_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        init_reg_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_fu_228_p2.read(), ap_const_lv1_1)) {
                init_reg_V = ap_const_lv1_0;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_5_fu_304_p2.read()))) {
                init_reg_V = ap_const_lv1_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        latency_V = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_3_fu_316_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_346_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_352_p3.read()))) {
            latency_V = sub_ln214_fu_376_p2.read();
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ret_V_fu_228_p2.read(), ap_const_lv1_1)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
                       esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_3_fu_316_p2.read()) && 
                       esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_352_p3.read())) || 
                      (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
                       esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_3_fu_316_p2.read()) && 
                       esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_346_p2.read())))) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_3_fu_316_p2.read())))) {
            latency_V = ap_const_lv32_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        latency_sum_reg_V = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_fu_228_p2.read(), ap_const_lv1_1)) {
                latency_sum_reg_V = ap_const_lv64_0;
            } else if (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read())) {
                latency_sum_reg_V = add_ln700_1_fu_270_p2.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        packet_cnt_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_fu_228_p2.read(), ap_const_lv1_1)) {
                packet_cnt_V = ap_const_lv32_0;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
                        esl_seteq<1,1,1>(ret_V_6_fu_394_p2.read(), ap_const_lv1_1))) {
                packet_cnt_V = add_ln214_fu_191_p2.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        time_elapse_reg_V = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_fu_228_p2.read(), ap_const_lv1_1)) {
                time_elapse_reg_V = ap_const_lv64_0;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_1_fu_244_p2.read()))) {
                time_elapse_reg_V = add_ln700_fu_250_p2.read();
            }
        }
    }
}

void payload_validator::thread_add_ln214_fu_191_p2() {
    add_ln214_fu_191_p2 = (!packet_cnt_V.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(packet_cnt_V.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void payload_validator::thread_add_ln700_1_fu_270_p2() {
    add_ln700_1_fu_270_p2 = (!latency_sum_reg_V.read().is_01() || !zext_ln700_fu_266_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(latency_sum_reg_V.read()) + sc_biguint<64>(zext_ln700_fu_266_p1.read()));
}

void payload_validator::thread_add_ln700_fu_250_p2() {
    add_ln700_fu_250_p2 = (!time_elapse_reg_V.read().is_01() || !ap_const_lv64_1.is_01())? sc_lv<64>(): (sc_biguint<64>(time_elapse_reg_V.read()) + sc_biguint<64>(ap_const_lv64_1));
}

void payload_validator::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void payload_validator::thread_ap_condition_59() {
    ap_condition_59 = ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_3_fu_316_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_352_p3.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_228_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_3_fu_316_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_346_p2.read())));
}

void payload_validator::thread_curr_cnt_V() {
    curr_cnt_V = (!packet_cnt_V.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(packet_cnt_V.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void payload_validator::thread_done_V() {
    done_V = done_reg_V.read();
}

void payload_validator::thread_error_V() {
    error_V = error_reg_V.read();
}

void payload_validator::thread_icmp_ln879_1_fu_282_p2() {
    icmp_ln879_1_fu_282_p2 = (!packet_cnt_V.read().is_01() || !packet_num_V.read().is_01())? sc_lv<1>(): sc_lv<1>(packet_cnt_V.read() == packet_num_V.read());
}

void payload_validator::thread_icmp_ln879_fu_346_p2() {
    icmp_ln879_fu_346_p2 = (!zext_ln647_fu_342_p1.read().is_01() || !ret_V_4_fu_326_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(zext_ln647_fu_342_p1.read() == ret_V_4_fu_326_p2.read());
}

void payload_validator::thread_latency_sum_V() {
    latency_sum_V = latency_sum_reg_V.read();
}

void payload_validator::thread_lhs_V_2_fu_298_p2() {
    lhs_V_2_fu_298_p2 = (IN_PACKET_V.read() ^ ap_const_lv1_1);
}

void payload_validator::thread_lhs_V_fu_222_p2() {
    lhs_V_fu_222_p2 = (clear_reg_V.read() ^ ap_const_lv1_1);
}

void payload_validator::thread_p_Result_3_fu_332_p4() {
    p_Result_3_fu_332_p4 = s_axis_data_V.read().range(511, 480);
}

void payload_validator::thread_p_Result_4_fu_366_p4() {
    p_Result_4_fu_366_p4 = s_axis_data_V.read().range(479, 448);
}

void payload_validator::thread_ret_V_1_fu_244_p2() {
    ret_V_1_fu_244_p2 = (init_reg_V.read() & rhs_V_fu_234_p2.read());
}

void payload_validator::thread_ret_V_3_fu_316_p2() {
    ret_V_3_fu_316_p2 = (ret_V_5_fu_304_p2.read() & rhs_V_1_fu_310_p2.read());
}

void payload_validator::thread_ret_V_4_fu_326_p2() {
    ret_V_4_fu_326_p2 = (!zext_ln215_fu_322_p1.read().is_01() || !ap_const_lv33_1.is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln215_fu_322_p1.read()) + sc_biguint<33>(ap_const_lv33_1));
}

void payload_validator::thread_ret_V_5_fu_304_p2() {
    ret_V_5_fu_304_p2 = (s_axis_valid_V.read() & lhs_V_2_fu_298_p2.read());
}

void payload_validator::thread_ret_V_6_fu_394_p2() {
    ret_V_6_fu_394_p2 = (s_axis_valid_V.read() & s_axis_last_V.read());
}

void payload_validator::thread_ret_V_fu_228_p2() {
    ret_V_fu_228_p2 = (clear_V.read() & lhs_V_fu_222_p2.read());
}

void payload_validator::thread_rhs_V_1_fu_310_p2() {
    rhs_V_1_fu_310_p2 = (error_reg_V.read() ^ ap_const_lv1_1);
}

void payload_validator::thread_rhs_V_fu_234_p2() {
    rhs_V_fu_234_p2 = (done_reg_V.read() ^ ap_const_lv1_1);
}

void payload_validator::thread_sub_ln214_fu_376_p2() {
    sub_ln214_fu_376_p2 = (!counter_in_V.read().is_01() || !p_Result_4_fu_366_p4.read().is_01())? sc_lv<32>(): (sc_biguint<32>(counter_in_V.read()) - sc_biguint<32>(p_Result_4_fu_366_p4.read()));
}

void payload_validator::thread_time_elapse_V() {
    time_elapse_V = time_elapse_reg_V.read();
}

void payload_validator::thread_tmp_fu_352_p3() {
    tmp_fu_352_p3 = s_axis_keep_V.read().range(56, 56);
}

void payload_validator::thread_zext_ln215_fu_322_p1() {
    zext_ln215_fu_322_p1 = esl_zext<33,32>(packet_cnt_V.read());
}

void payload_validator::thread_zext_ln647_fu_342_p1() {
    zext_ln647_fu_342_p1 = esl_zext<33,32>(p_Result_3_fu_332_p4.read());
}

void payload_validator::thread_zext_ln700_fu_266_p1() {
    zext_ln700_fu_266_p1 = esl_zext<64,32>(latency_V.read());
}

void payload_validator::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void payload_validator::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"clear_V\" :  \"" << clear_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packet_num_V\" :  \"" << packet_num_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"counter_in_V\" :  \"" << counter_in_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_data_V\" :  \"" << s_axis_data_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_keep_V\" :  \"" << s_axis_keep_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_last_V\" :  \"" << s_axis_last_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_valid_V\" :  \"" << s_axis_valid_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"latency_sum_V\" :  \"" << latency_sum_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"time_elapse_V\" :  \"" << time_elapse_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"curr_cnt_V\" :  \"" << curr_cnt_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"done_V\" :  \"" << done_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"error_V\" :  \"" << error_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

