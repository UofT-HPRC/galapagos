// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _action_excecutor_HH_
#define _action_excecutor_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct action_excecutor : public sc_module {
    // Port declarations 18
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<65> > action;
    sc_in< sc_lv<1> > action_valid_V;
    sc_in< sc_lv<1> > action_empty_V;
    sc_out< sc_lv<1> > action_re_V;
    sc_in< sc_lv<512> > payload_in_data_V;
    sc_in< sc_lv<64> > payload_in_keep_V;
    sc_in< sc_lv<1> > payload_in_valid_V;
    sc_in< sc_lv<1> > payload_in_last_V;
    sc_out< sc_lv<1> > payload_ready_V;
    sc_out< sc_lv<512> > payload_out_data_V;
    sc_out< sc_lv<64> > payload_out_keep_V;
    sc_out< sc_lv<1> > payload_out_valid_V;
    sc_out< sc_lv<1> > payload_out_last_V;
    sc_out< sc_lv<32> > src_ip_V;
    sc_out< sc_lv<16> > src_port_V;
    sc_out< sc_lv<16> > dst_port_V;


    // Module declarations
    action_excecutor(sc_module_name name);
    SC_HAS_PROCESS(action_excecutor);

    ~action_excecutor();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<512> > payload_out_reg_data;
    sc_signal< sc_lv<64> > payload_out_reg_keep;
    sc_signal< sc_lv<1> > payload_out_reg_vali;
    sc_signal< sc_lv<1> > payload_out_reg_last;
    sc_signal< sc_lv<32> > src_ip_reg_V;
    sc_signal< sc_lv<16> > src_port_reg_V;
    sc_signal< sc_lv<16> > dst_port_reg_V;
    sc_signal< sc_lv<16> > ap_phi_mux_storemerge_phi_fu_211_p4;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > ret_V_1_fu_261_p2;
    sc_signal< sc_lv<512> > select_ln68_fu_273_p3;
    sc_signal< sc_lv<64> > select_ln68_1_fu_281_p3;
    sc_signal< sc_lv<1> > ret_V_fu_267_p2;
    sc_signal< sc_lv<1> > and_ln68_fu_289_p2;
    sc_signal< sc_lv<32> > trunc_ln321_fu_331_p1;
    sc_signal< sc_lv<1> > rhs_V_fu_253_p3;
    sc_signal< sc_lv<1> > lhs_V_fu_374_p2;
    sc_signal< sc_lv<1> > and_ln1355_fu_380_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<512> ap_const_lv512_lc_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_action_re_V();
    void thread_and_ln1355_fu_380_p2();
    void thread_and_ln68_fu_289_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_phi_mux_storemerge_phi_fu_211_p4();
    void thread_dst_port_V();
    void thread_lhs_V_fu_374_p2();
    void thread_payload_out_data_V();
    void thread_payload_out_keep_V();
    void thread_payload_out_last_V();
    void thread_payload_out_valid_V();
    void thread_payload_ready_V();
    void thread_ret_V_1_fu_261_p2();
    void thread_ret_V_fu_267_p2();
    void thread_rhs_V_fu_253_p3();
    void thread_select_ln68_1_fu_281_p3();
    void thread_select_ln68_fu_273_p3();
    void thread_src_ip_V();
    void thread_src_port_V();
    void thread_trunc_ln321_fu_331_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
