// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "udp_ip_receive.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic udp_ip_receive::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> udp_ip_receive::ap_ST_fsm_state1 = "1";
const sc_lv<80> udp_ip_receive::ap_const_lv80_0 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> udp_ip_receive::ap_const_lv1_0 = "0";
const sc_lv<32> udp_ip_receive::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<64> udp_ip_receive::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<20> udp_ip_receive::ap_const_lv20_0 = "00000000000000000000";
const sc_lv<2> udp_ip_receive::ap_const_lv2_0 = "00";
const sc_lv<48> udp_ip_receive::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<16> udp_ip_receive::ap_const_lv16_0 = "0000000000000000";
const sc_lv<8> udp_ip_receive::ap_const_lv8_0 = "00000000";
const sc_lv<19> udp_ip_receive::ap_const_lv19_0 = "0000000000000000000";
const sc_lv<18> udp_ip_receive::ap_const_lv18_0 = "000000000000000000";
const sc_lv<17> udp_ip_receive::ap_const_lv17_0 = "00000000000000000";
const sc_lv<1> udp_ip_receive::ap_const_lv1_1 = "1";
const sc_lv<16> udp_ip_receive::ap_const_lv16_4500 = "100010100000000";
const sc_lv<16> udp_ip_receive::ap_const_lv16_FFFF = "1111111111111111";
const sc_lv<8> udp_ip_receive::ap_const_lv8_1 = "1";
const sc_lv<8> udp_ip_receive::ap_const_lv8_11 = "10001";
const sc_lv<16> udp_ip_receive::ap_const_lv16_4000 = "100000000000000";
const sc_lv<2> udp_ip_receive::ap_const_lv2_2 = "10";
const sc_lv<2> udp_ip_receive::ap_const_lv2_1 = "1";
const sc_lv<32> udp_ip_receive::ap_const_lv32_10 = "10000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_13 = "10011";
const sc_lv<32> udp_ip_receive::ap_const_lv32_1F = "11111";
const sc_lv<18> udp_ip_receive::ap_const_lv18_4500 = "100010100000000";
const sc_lv<17> udp_ip_receive::ap_const_lv17_11 = "10001";
const sc_lv<32> udp_ip_receive::ap_const_lv32_30 = "110000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_3F = "111111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_20 = "100000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_2F = "101111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_F0 = "11110000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_11F = "100011111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_D0 = "11010000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_DF = "11011111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_C0 = "11000000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_CF = "11001111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_B0 = "10110000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_BF = "10111111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_A0 = "10100000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_AF = "10101111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_98 = "10011000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_9F = "10011111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_90 = "10010000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_97 = "10010111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_80 = "10000000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_8F = "10001111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_60 = "1100000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_7F = "1111111";
const sc_lv<32> udp_ip_receive::ap_const_lv32_40 = "1000000";
const sc_lv<32> udp_ip_receive::ap_const_lv32_5F = "1011111";
const sc_logic udp_ip_receive::ap_const_logic_0 = sc_dt::Log_0;
const bool udp_ip_receive::ap_const_boolean_1 = true;

udp_ip_receive::udp_ip_receive(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln209_1_fu_1574_p2);
    sensitive << ( checksum_precompute_s );

    SC_METHOD(thread_add_ln209_2_fu_1764_p2);
    sensitive << ( zext_ln209_fu_1756_p1 );
    sensitive << ( zext_ln209_1_fu_1760_p1 );

    SC_METHOD(thread_add_ln209_fu_672_p2);
    sensitive << ( zext_ln364_fu_664_p1 );
    sensitive << ( trunc_ln647_fu_668_p1 );

    SC_METHOD(thread_and_ln75_fu_526_p2);
    sensitive << ( icmp_ln879_1_fu_514_p2 );
    sensitive << ( icmp_ln879_2_fu_520_p2 );

    SC_METHOD(thread_and_ln84_fu_604_p2);
    sensitive << ( icmp_ln879_4_fu_538_p2 );
    sensitive << ( and_ln75_fu_526_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_165);
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );
    sensitive << ( icmp_ln879_fu_504_p2 );
    sensitive << ( and_ln84_fu_604_p2 );
    sensitive << ( empty_11_fu_598_p2 );

    SC_METHOD(thread_ap_condition_171);
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );
    sensitive << ( icmp_ln879_fu_504_p2 );
    sensitive << ( and_ln84_fu_604_p2 );
    sensitive << ( empty_11_fu_598_p2 );

    SC_METHOD(thread_arp_internal_resp_Mac_IP_V);
    sensitive << ( arp_internal_resp_re_1 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_arp_internal_resp_valid_V);
    sensitive << ( arp_internal_resp_re );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_empty_10_fu_592_p2);
    sensitive << ( ip_in_reg5_fragment_s );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );
    sensitive << ( icmp_ln879_fu_504_p2 );

    SC_METHOD(thread_empty_11_fu_598_p2);
    sensitive << ( empty_10_fu_592_p2 );
    sensitive << ( empty_fu_586_p2 );

    SC_METHOD(thread_empty_fu_586_p2);
    sensitive << ( ip_in_reg5_fragment_s );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );
    sensitive << ( icmp_ln879_fu_504_p2 );

    SC_METHOD(thread_icmp_ln74_1_fu_556_p2);
    sensitive << ( ip_in_reg5_fragment_s );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );
    sensitive << ( icmp_ln879_fu_504_p2 );

    SC_METHOD(thread_icmp_ln74_fu_550_p2);
    sensitive << ( ip_in_reg5_fragment_s );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );
    sensitive << ( icmp_ln879_fu_504_p2 );

    SC_METHOD(thread_icmp_ln879_1_fu_514_p2);
    sensitive << ( ip_in_reg5_dst_ip_V );
    sensitive << ( myIP_reg_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );
    sensitive << ( icmp_ln879_fu_504_p2 );

    SC_METHOD(thread_icmp_ln879_2_fu_520_p2);
    sensitive << ( checksum_reg_final_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );
    sensitive << ( icmp_ln879_fu_504_p2 );

    SC_METHOD(thread_icmp_ln879_3_fu_532_p2);
    sensitive << ( ip_in_reg5_proto_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );
    sensitive << ( icmp_ln879_fu_504_p2 );

    SC_METHOD(thread_icmp_ln879_4_fu_538_p2);
    sensitive << ( ip_in_reg5_proto_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );
    sensitive << ( icmp_ln879_fu_504_p2 );

    SC_METHOD(thread_icmp_ln879_5_fu_1058_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_4_fu_1002_p2 );
    sensitive << ( zext_ln357_fu_1054_p1 );

    SC_METHOD(thread_icmp_ln879_6_fu_1666_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( trunc_ln647_2_fu_1656_p1 );

    SC_METHOD(thread_icmp_ln879_fu_504_p2);
    sensitive << ( ip_in_reg5_fixed_hea );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ip_in_reg5_valid_V_l_load_fu_475_p1 );

    SC_METHOD(thread_ip_in_reg5_valid_V_l_load_fu_475_p1);
    sensitive << ( ip_in_reg5_valid_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_lhs_V_1_fu_990_p1);
    sensitive << ( udp_cksum1_0_V );

    SC_METHOD(thread_lhs_V_2_fu_1264_p1);
    sensitive << ( udp_cksum0_0_V );

    SC_METHOD(thread_lhs_V_fu_816_p1);
    sensitive << ( udp_cksum2_0_V );

    SC_METHOD(thread_meta_out_action_V);
    sensitive << ( meta_out_reg_action_s );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_meta_out_checksum_V);
    sensitive << ( meta_out_reg_checksu );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_meta_out_protocol_header_V);
    sensitive << ( meta_out_reg_protoco );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_meta_out_src_ip_V);
    sensitive << ( meta_out_reg_src_ip_s );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_or_ln544_fu_1064_p2);
    sensitive << ( udp_ignore_flag1_V );
    sensitive << ( icmp_ln879_5_fu_1058_p2 );

    SC_METHOD(thread_or_ln74_fu_562_p2);
    sensitive << ( icmp_ln74_fu_550_p2 );
    sensitive << ( icmp_ln74_1_fu_556_p2 );

    SC_METHOD(thread_or_ln76_fu_544_p2);
    sensitive << ( icmp_ln879_3_fu_532_p2 );
    sensitive << ( icmp_ln879_4_fu_538_p2 );

    SC_METHOD(thread_p_Result_2_fu_1510_p3);
    sensitive << ( ip_in_reg0_proto_V );
    sensitive << ( ip_in_reg0_ttl_V );

    SC_METHOD(thread_p_Result_8_fu_1742_p4);
    sensitive << ( myIP_reg_V );

    SC_METHOD(thread_p_Result_s_fu_461_p3);
    sensitive << ( ip_in_reg5_src_ip_V );
    sensitive << ( eth_src_mac5_V );

    SC_METHOD(thread_ret_V_10_fu_1276_p2);
    sensitive << ( lhs_V_2_fu_1264_p1 );
    sensitive << ( rhs_V_2_fu_1272_p1 );

    SC_METHOD(thread_ret_V_11_fu_1304_p2);
    sensitive << ( zext_ln215_17_fu_1292_p1 );
    sensitive << ( zext_ln215_18_fu_1300_p1 );

    SC_METHOD(thread_ret_V_12_fu_1332_p2);
    sensitive << ( zext_ln215_19_fu_1320_p1 );
    sensitive << ( zext_ln215_20_fu_1328_p1 );

    SC_METHOD(thread_ret_V_13_fu_1360_p2);
    sensitive << ( zext_ln215_21_fu_1348_p1 );
    sensitive << ( zext_ln215_22_fu_1356_p1 );

    SC_METHOD(thread_ret_V_14_fu_1562_p2);
    sensitive << ( rhs_V_3_fu_1558_p1 );

    SC_METHOD(thread_ret_V_1_fu_828_p2);
    sensitive << ( lhs_V_fu_816_p1 );
    sensitive << ( rhs_V_fu_824_p1 );

    SC_METHOD(thread_ret_V_2_fu_946_p2);
    sensitive << ( zext_ln215_fu_934_p1 );
    sensitive << ( zext_ln215_1_fu_942_p1 );

    SC_METHOD(thread_ret_V_3_fu_974_p2);
    sensitive << ( zext_ln215_2_fu_962_p1 );
    sensitive << ( zext_ln215_3_fu_970_p1 );

    SC_METHOD(thread_ret_V_4_fu_1002_p2);
    sensitive << ( lhs_V_1_fu_990_p1 );
    sensitive << ( rhs_V_1_fu_998_p1 );

    SC_METHOD(thread_ret_V_5_fu_1030_p2);
    sensitive << ( zext_ln215_6_fu_1018_p1 );
    sensitive << ( zext_ln215_7_fu_1026_p1 );

    SC_METHOD(thread_ret_V_6_fu_1168_p2);
    sensitive << ( zext_ln215_8_fu_1156_p1 );
    sensitive << ( zext_ln215_9_fu_1164_p1 );

    SC_METHOD(thread_ret_V_7_fu_1196_p2);
    sensitive << ( zext_ln215_10_fu_1184_p1 );
    sensitive << ( zext_ln215_11_fu_1192_p1 );

    SC_METHOD(thread_ret_V_8_fu_1224_p2);
    sensitive << ( zext_ln215_12_fu_1212_p1 );
    sensitive << ( zext_ln215_13_fu_1220_p1 );

    SC_METHOD(thread_ret_V_9_fu_1248_p2);
    sensitive << ( checksum_reg0_0_V );
    sensitive << ( zext_ln215_14_fu_1244_p1 );

    SC_METHOD(thread_ret_V_fu_800_p2);
    sensitive << ( zext_ln215_4_fu_788_p1 );
    sensitive << ( zext_ln215_5_fu_796_p1 );

    SC_METHOD(thread_rhs_V_1_fu_998_p1);
    sensitive << ( udp_cksum1_1_V );

    SC_METHOD(thread_rhs_V_2_fu_1272_p1);
    sensitive << ( udp_cksum0_1_V );

    SC_METHOD(thread_rhs_V_3_fu_1558_p1);
    sensitive << ( checksum_precompute_s );

    SC_METHOD(thread_rhs_V_fu_824_p1);
    sensitive << ( udp_cksum2_1_V );

    SC_METHOD(thread_select_ln301_fu_626_p3);
    sensitive << ( udp_ignore_flag4_V );

    SC_METHOD(thread_tmp_1_fu_654_p4);
    sensitive << ( checksum_reg3_0_V );

    SC_METHOD(thread_tmp_fu_568_p2);
    sensitive << ( and_ln75_fu_526_p2 );
    sensitive << ( or_ln76_fu_544_p2 );

    SC_METHOD(thread_trunc_ln357_1_fu_1752_p1);
    sensitive << ( myIP_reg_V );

    SC_METHOD(thread_trunc_ln357_fu_1050_p1);
    sensitive << ( ip_in_reg2_proto_hea );

    SC_METHOD(thread_trunc_ln647_1_fu_1466_p1);
    sensitive << ( ip_in_reg0_src_ip_V );

    SC_METHOD(thread_trunc_ln647_2_fu_1656_p1);
    sensitive << ( ip_in_reg0_proto_hea );

    SC_METHOD(thread_trunc_ln647_3_fu_1936_p1);
    sensitive << ( ip_in_data_V );

    SC_METHOD(thread_trunc_ln647_fu_668_p1);
    sensitive << ( checksum_reg3_0_V );

    SC_METHOD(thread_val_assign_fu_574_p2);
    sensitive << ( tmp_fu_568_p2 );
    sensitive << ( or_ln74_fu_562_p2 );

    SC_METHOD(thread_zext_ln209_1_fu_1760_p1);
    sensitive << ( trunc_ln357_1_fu_1752_p1 );

    SC_METHOD(thread_zext_ln209_fu_1756_p1);
    sensitive << ( p_Result_8_fu_1742_p4 );

    SC_METHOD(thread_zext_ln215_10_fu_1184_p1);
    sensitive << ( checksum_reg0_4_V );

    SC_METHOD(thread_zext_ln215_11_fu_1192_p1);
    sensitive << ( checksum_reg0_5_V );

    SC_METHOD(thread_zext_ln215_12_fu_1212_p1);
    sensitive << ( checksum_reg0_2_V );

    SC_METHOD(thread_zext_ln215_13_fu_1220_p1);
    sensitive << ( checksum_reg0_3_V );

    SC_METHOD(thread_zext_ln215_14_fu_1244_p1);
    sensitive << ( checksum_reg0_1_V );

    SC_METHOD(thread_zext_ln215_17_fu_1292_p1);
    sensitive << ( udp_cksum0_2_V );

    SC_METHOD(thread_zext_ln215_18_fu_1300_p1);
    sensitive << ( udp_cksum0_3_V );

    SC_METHOD(thread_zext_ln215_19_fu_1320_p1);
    sensitive << ( udp_cksum0_4_V );

    SC_METHOD(thread_zext_ln215_1_fu_942_p1);
    sensitive << ( checksum_reg1_3_V );

    SC_METHOD(thread_zext_ln215_20_fu_1328_p1);
    sensitive << ( udp_cksum0_5_V );

    SC_METHOD(thread_zext_ln215_21_fu_1348_p1);
    sensitive << ( udp_cksum0_6_V );

    SC_METHOD(thread_zext_ln215_22_fu_1356_p1);
    sensitive << ( udp_cksum0_7_V );

    SC_METHOD(thread_zext_ln215_2_fu_962_p1);
    sensitive << ( checksum_reg1_0_V );

    SC_METHOD(thread_zext_ln215_3_fu_970_p1);
    sensitive << ( checksum_reg1_1_V );

    SC_METHOD(thread_zext_ln215_4_fu_788_p1);
    sensitive << ( checksum_reg2_0_V );

    SC_METHOD(thread_zext_ln215_5_fu_796_p1);
    sensitive << ( checksum_reg2_1_V );

    SC_METHOD(thread_zext_ln215_6_fu_1018_p1);
    sensitive << ( udp_cksum1_2_V );

    SC_METHOD(thread_zext_ln215_7_fu_1026_p1);
    sensitive << ( udp_cksum1_3_V );

    SC_METHOD(thread_zext_ln215_8_fu_1156_p1);
    sensitive << ( checksum_reg0_6_V );

    SC_METHOD(thread_zext_ln215_9_fu_1164_p1);
    sensitive << ( checksum_reg0_7_V );

    SC_METHOD(thread_zext_ln215_fu_934_p1);
    sensitive << ( checksum_reg1_2_V );

    SC_METHOD(thread_zext_ln357_fu_1054_p1);
    sensitive << ( trunc_ln357_fu_1050_p1 );

    SC_METHOD(thread_zext_ln364_fu_664_p1);
    sensitive << ( tmp_1_fu_654_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    arp_internal_resp_re_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    arp_internal_resp_re = "0";
    meta_out_reg_src_ip_s = "00000000000000000000000000000000";
    meta_out_reg_protoco = "0000000000000000000000000000000000000000000000000000000000000000";
    meta_out_reg_checksu = "00000000000000000000";
    meta_out_reg_action_s = "00";
    ip_in_reg5_src_ip_V = "00000000000000000000000000000000";
    eth_src_mac5_V = "000000000000000000000000000000000000000000000000";
    ip_in_reg5_valid_V = "0";
    ip_in_reg5_dst_ip_V = "00000000000000000000000000000000";
    myIP_reg_V = "00000000000000000000000000000000";
    checksum_reg_final_V = "0000000000000000";
    ip_in_reg5_proto_V = "00000000";
    ip_in_reg5_proto_hea = "0000000000000000000000000000000000000000000000000000000000000000";
    ip_in_reg5_fixed_hea = "0000000000000000";
    ip_in_reg5_fragment_s = "0000000000000000";
    udp_ignore_flag4_V = "0";
    udp_cksum4_V = "00000000000000000000";
    checksum_reg3_0_V = "00000000000000000000";
    udp_cksum3_V = "00000000000000000000";
    udp_ignore_flag3_V = "0";
    ip_in_reg4_fixed_hea = "0000000000000000";
    ip_in_reg4_fragment_s = "0000000000000000";
    ip_in_reg4_proto_V = "00000000";
    ip_in_reg4_src_ip_V = "00000000000000000000000000000000";
    ip_in_reg4_dst_ip_V = "00000000000000000000000000000000";
    ip_in_reg4_proto_hea = "0000000000000000000000000000000000000000000000000000000000000000";
    ip_in_reg4_valid_V = "0";
    eth_src_mac4_V = "000000000000000000000000000000000000000000000000";
    checksum_reg2_0_V = "0000000000000000000";
    checksum_reg2_1_V = "000000000000000000";
    udp_cksum2_0_V = "0000000000000000000";
    udp_cksum2_1_V = "000000000000000000";
    udp_ignore_flag2_V = "0";
    ip_in_reg3_fixed_hea = "0000000000000000";
    ip_in_reg3_fragment_s = "0000000000000000";
    ip_in_reg3_proto_V = "00000000";
    ip_in_reg3_src_ip_V = "00000000000000000000000000000000";
    ip_in_reg3_dst_ip_V = "00000000000000000000000000000000";
    ip_in_reg3_proto_hea = "0000000000000000000000000000000000000000000000000000000000000000";
    ip_in_reg3_valid_V = "0";
    eth_src_mac3_V = "000000000000000000000000000000000000000000000000";
    checksum_reg1_2_V = "00000000000000000";
    checksum_reg1_3_V = "00000000000000000";
    checksum_reg1_0_V = "000000000000000000";
    checksum_reg1_1_V = "00000000000000000";
    udp_cksum1_0_V = "000000000000000000";
    udp_cksum1_1_V = "00000000000000000";
    udp_cksum1_2_V = "00000000000000000";
    udp_cksum1_3_V = "00000000000000000";
    udp_ignore_flag1_V = "0";
    ip_in_reg2_proto_hea = "0000000000000000000000000000000000000000000000000000000000000000";
    ip_in_reg2_fixed_hea = "0000000000000000";
    ip_in_reg2_fragment_s = "0000000000000000";
    ip_in_reg2_proto_V = "00000000";
    ip_in_reg2_src_ip_V = "00000000000000000000000000000000";
    ip_in_reg2_dst_ip_V = "00000000000000000000000000000000";
    ip_in_reg2_valid_V = "0";
    eth_src_mac2_V = "000000000000000000000000000000000000000000000000";
    checksum_reg0_6_V = "0000000000000000";
    checksum_reg0_7_V = "0000000000000000";
    checksum_reg0_4_V = "0000000000000000";
    checksum_reg0_5_V = "0000000000000000";
    checksum_reg0_2_V = "0000000000000000";
    checksum_reg0_3_V = "0000000000000000";
    checksum_reg0_0_V = "000000000000000000";
    checksum_reg0_1_V = "0000000000000000";
    udp_cksum0_0_V = "00000000000000000";
    udp_cksum0_1_V = "0000000000000000";
    udp_cksum0_2_V = "0000000000000000";
    udp_cksum0_3_V = "0000000000000000";
    udp_cksum0_4_V = "0000000000000000";
    udp_cksum0_5_V = "0000000000000000";
    udp_cksum0_6_V = "0000000000000000";
    udp_cksum0_7_V = "0000000000000000";
    udp_ignore_flag0_V = "0";
    ip_in_reg1_fixed_hea = "0000000000000000";
    ip_in_reg1_fragment_s = "0000000000000000";
    ip_in_reg1_proto_V = "00000000";
    ip_in_reg1_src_ip_V = "00000000000000000000000000000000";
    ip_in_reg1_dst_ip_V = "00000000000000000000000000000000";
    ip_in_reg1_proto_hea = "0000000000000000000000000000000000000000000000000000000000000000";
    ip_in_reg1_valid_V = "0";
    eth_src_mac1_V = "000000000000000000000000000000000000000000000000";
    ip_in_reg0_src_ip_V = "00000000000000000000000000000000";
    ip_in_reg0_checksum_s = "0000000000000000";
    ip_in_reg0_proto_V = "00000000";
    ip_in_reg0_ttl_V = "00000000";
    ip_in_reg0_fragment_s = "0000000000000000";
    ip_in_reg0_id_V = "0000000000000000";
    ip_in_reg0_length_V = "0000000000000000";
    checksum_precompute_s = "00000000000000000";
    ip_in_reg0_proto_hea = "0000000000000000000000000000000000000000000000000000000000000000";
    ip_in_reg0_fixed_hea = "0000000000000000";
    ip_in_reg0_dst_ip_V = "00000000000000000000000000000000";
    ip_in_reg0_valid_V = "0";
    eth_src_mac0_V = "000000000000000000000000000000000000000000000000";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "udp_ip_receive_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, myIP_V, "(port)myIP_V");
    sc_trace(mVcdFile, ip_in_data_V, "(port)ip_in_data_V");
    sc_trace(mVcdFile, ip_in_valid_V, "(port)ip_in_valid_V");
    sc_trace(mVcdFile, meta_out_src_ip_V, "(port)meta_out_src_ip_V");
    sc_trace(mVcdFile, meta_out_protocol_header_V, "(port)meta_out_protocol_header_V");
    sc_trace(mVcdFile, meta_out_checksum_V, "(port)meta_out_checksum_V");
    sc_trace(mVcdFile, meta_out_action_V, "(port)meta_out_action_V");
    sc_trace(mVcdFile, arp_internal_resp_Mac_IP_V, "(port)arp_internal_resp_Mac_IP_V");
    sc_trace(mVcdFile, arp_internal_resp_valid_V, "(port)arp_internal_resp_valid_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, arp_internal_resp_re_1, "arp_internal_resp_re_1");
    sc_trace(mVcdFile, arp_internal_resp_re, "arp_internal_resp_re");
    sc_trace(mVcdFile, meta_out_reg_src_ip_s, "meta_out_reg_src_ip_s");
    sc_trace(mVcdFile, meta_out_reg_protoco, "meta_out_reg_protoco");
    sc_trace(mVcdFile, meta_out_reg_checksu, "meta_out_reg_checksu");
    sc_trace(mVcdFile, meta_out_reg_action_s, "meta_out_reg_action_s");
    sc_trace(mVcdFile, ip_in_reg5_src_ip_V, "ip_in_reg5_src_ip_V");
    sc_trace(mVcdFile, eth_src_mac5_V, "eth_src_mac5_V");
    sc_trace(mVcdFile, ip_in_reg5_valid_V, "ip_in_reg5_valid_V");
    sc_trace(mVcdFile, ip_in_reg5_dst_ip_V, "ip_in_reg5_dst_ip_V");
    sc_trace(mVcdFile, myIP_reg_V, "myIP_reg_V");
    sc_trace(mVcdFile, checksum_reg_final_V, "checksum_reg_final_V");
    sc_trace(mVcdFile, ip_in_reg5_proto_V, "ip_in_reg5_proto_V");
    sc_trace(mVcdFile, ip_in_reg5_proto_hea, "ip_in_reg5_proto_hea");
    sc_trace(mVcdFile, ip_in_reg5_fixed_hea, "ip_in_reg5_fixed_hea");
    sc_trace(mVcdFile, ip_in_reg5_fragment_s, "ip_in_reg5_fragment_s");
    sc_trace(mVcdFile, udp_ignore_flag4_V, "udp_ignore_flag4_V");
    sc_trace(mVcdFile, udp_cksum4_V, "udp_cksum4_V");
    sc_trace(mVcdFile, checksum_reg3_0_V, "checksum_reg3_0_V");
    sc_trace(mVcdFile, udp_cksum3_V, "udp_cksum3_V");
    sc_trace(mVcdFile, udp_ignore_flag3_V, "udp_ignore_flag3_V");
    sc_trace(mVcdFile, ip_in_reg4_fixed_hea, "ip_in_reg4_fixed_hea");
    sc_trace(mVcdFile, ip_in_reg4_fragment_s, "ip_in_reg4_fragment_s");
    sc_trace(mVcdFile, ip_in_reg4_proto_V, "ip_in_reg4_proto_V");
    sc_trace(mVcdFile, ip_in_reg4_src_ip_V, "ip_in_reg4_src_ip_V");
    sc_trace(mVcdFile, ip_in_reg4_dst_ip_V, "ip_in_reg4_dst_ip_V");
    sc_trace(mVcdFile, ip_in_reg4_proto_hea, "ip_in_reg4_proto_hea");
    sc_trace(mVcdFile, ip_in_reg4_valid_V, "ip_in_reg4_valid_V");
    sc_trace(mVcdFile, eth_src_mac4_V, "eth_src_mac4_V");
    sc_trace(mVcdFile, checksum_reg2_0_V, "checksum_reg2_0_V");
    sc_trace(mVcdFile, checksum_reg2_1_V, "checksum_reg2_1_V");
    sc_trace(mVcdFile, udp_cksum2_0_V, "udp_cksum2_0_V");
    sc_trace(mVcdFile, udp_cksum2_1_V, "udp_cksum2_1_V");
    sc_trace(mVcdFile, udp_ignore_flag2_V, "udp_ignore_flag2_V");
    sc_trace(mVcdFile, ip_in_reg3_fixed_hea, "ip_in_reg3_fixed_hea");
    sc_trace(mVcdFile, ip_in_reg3_fragment_s, "ip_in_reg3_fragment_s");
    sc_trace(mVcdFile, ip_in_reg3_proto_V, "ip_in_reg3_proto_V");
    sc_trace(mVcdFile, ip_in_reg3_src_ip_V, "ip_in_reg3_src_ip_V");
    sc_trace(mVcdFile, ip_in_reg3_dst_ip_V, "ip_in_reg3_dst_ip_V");
    sc_trace(mVcdFile, ip_in_reg3_proto_hea, "ip_in_reg3_proto_hea");
    sc_trace(mVcdFile, ip_in_reg3_valid_V, "ip_in_reg3_valid_V");
    sc_trace(mVcdFile, eth_src_mac3_V, "eth_src_mac3_V");
    sc_trace(mVcdFile, checksum_reg1_2_V, "checksum_reg1_2_V");
    sc_trace(mVcdFile, checksum_reg1_3_V, "checksum_reg1_3_V");
    sc_trace(mVcdFile, checksum_reg1_0_V, "checksum_reg1_0_V");
    sc_trace(mVcdFile, checksum_reg1_1_V, "checksum_reg1_1_V");
    sc_trace(mVcdFile, udp_cksum1_0_V, "udp_cksum1_0_V");
    sc_trace(mVcdFile, udp_cksum1_1_V, "udp_cksum1_1_V");
    sc_trace(mVcdFile, udp_cksum1_2_V, "udp_cksum1_2_V");
    sc_trace(mVcdFile, udp_cksum1_3_V, "udp_cksum1_3_V");
    sc_trace(mVcdFile, udp_ignore_flag1_V, "udp_ignore_flag1_V");
    sc_trace(mVcdFile, ip_in_reg2_proto_hea, "ip_in_reg2_proto_hea");
    sc_trace(mVcdFile, ip_in_reg2_fixed_hea, "ip_in_reg2_fixed_hea");
    sc_trace(mVcdFile, ip_in_reg2_fragment_s, "ip_in_reg2_fragment_s");
    sc_trace(mVcdFile, ip_in_reg2_proto_V, "ip_in_reg2_proto_V");
    sc_trace(mVcdFile, ip_in_reg2_src_ip_V, "ip_in_reg2_src_ip_V");
    sc_trace(mVcdFile, ip_in_reg2_dst_ip_V, "ip_in_reg2_dst_ip_V");
    sc_trace(mVcdFile, ip_in_reg2_valid_V, "ip_in_reg2_valid_V");
    sc_trace(mVcdFile, eth_src_mac2_V, "eth_src_mac2_V");
    sc_trace(mVcdFile, checksum_reg0_6_V, "checksum_reg0_6_V");
    sc_trace(mVcdFile, checksum_reg0_7_V, "checksum_reg0_7_V");
    sc_trace(mVcdFile, checksum_reg0_4_V, "checksum_reg0_4_V");
    sc_trace(mVcdFile, checksum_reg0_5_V, "checksum_reg0_5_V");
    sc_trace(mVcdFile, checksum_reg0_2_V, "checksum_reg0_2_V");
    sc_trace(mVcdFile, checksum_reg0_3_V, "checksum_reg0_3_V");
    sc_trace(mVcdFile, checksum_reg0_0_V, "checksum_reg0_0_V");
    sc_trace(mVcdFile, checksum_reg0_1_V, "checksum_reg0_1_V");
    sc_trace(mVcdFile, udp_cksum0_0_V, "udp_cksum0_0_V");
    sc_trace(mVcdFile, udp_cksum0_1_V, "udp_cksum0_1_V");
    sc_trace(mVcdFile, udp_cksum0_2_V, "udp_cksum0_2_V");
    sc_trace(mVcdFile, udp_cksum0_3_V, "udp_cksum0_3_V");
    sc_trace(mVcdFile, udp_cksum0_4_V, "udp_cksum0_4_V");
    sc_trace(mVcdFile, udp_cksum0_5_V, "udp_cksum0_5_V");
    sc_trace(mVcdFile, udp_cksum0_6_V, "udp_cksum0_6_V");
    sc_trace(mVcdFile, udp_cksum0_7_V, "udp_cksum0_7_V");
    sc_trace(mVcdFile, udp_ignore_flag0_V, "udp_ignore_flag0_V");
    sc_trace(mVcdFile, ip_in_reg1_fixed_hea, "ip_in_reg1_fixed_hea");
    sc_trace(mVcdFile, ip_in_reg1_fragment_s, "ip_in_reg1_fragment_s");
    sc_trace(mVcdFile, ip_in_reg1_proto_V, "ip_in_reg1_proto_V");
    sc_trace(mVcdFile, ip_in_reg1_src_ip_V, "ip_in_reg1_src_ip_V");
    sc_trace(mVcdFile, ip_in_reg1_dst_ip_V, "ip_in_reg1_dst_ip_V");
    sc_trace(mVcdFile, ip_in_reg1_proto_hea, "ip_in_reg1_proto_hea");
    sc_trace(mVcdFile, ip_in_reg1_valid_V, "ip_in_reg1_valid_V");
    sc_trace(mVcdFile, eth_src_mac1_V, "eth_src_mac1_V");
    sc_trace(mVcdFile, ip_in_reg0_src_ip_V, "ip_in_reg0_src_ip_V");
    sc_trace(mVcdFile, ip_in_reg0_checksum_s, "ip_in_reg0_checksum_s");
    sc_trace(mVcdFile, ip_in_reg0_proto_V, "ip_in_reg0_proto_V");
    sc_trace(mVcdFile, ip_in_reg0_ttl_V, "ip_in_reg0_ttl_V");
    sc_trace(mVcdFile, ip_in_reg0_fragment_s, "ip_in_reg0_fragment_s");
    sc_trace(mVcdFile, ip_in_reg0_id_V, "ip_in_reg0_id_V");
    sc_trace(mVcdFile, ip_in_reg0_length_V, "ip_in_reg0_length_V");
    sc_trace(mVcdFile, checksum_precompute_s, "checksum_precompute_s");
    sc_trace(mVcdFile, ip_in_reg0_proto_hea, "ip_in_reg0_proto_hea");
    sc_trace(mVcdFile, ip_in_reg0_fixed_hea, "ip_in_reg0_fixed_hea");
    sc_trace(mVcdFile, ip_in_reg0_dst_ip_V, "ip_in_reg0_dst_ip_V");
    sc_trace(mVcdFile, ip_in_reg0_valid_V, "ip_in_reg0_valid_V");
    sc_trace(mVcdFile, eth_src_mac0_V, "eth_src_mac0_V");
    sc_trace(mVcdFile, p_Result_s_fu_461_p3, "p_Result_s_fu_461_p3");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ip_in_reg5_valid_V_l_load_fu_475_p1, "ip_in_reg5_valid_V_l_load_fu_475_p1");
    sc_trace(mVcdFile, icmp_ln879_fu_504_p2, "icmp_ln879_fu_504_p2");
    sc_trace(mVcdFile, val_assign_fu_574_p2, "val_assign_fu_574_p2");
    sc_trace(mVcdFile, and_ln84_fu_604_p2, "and_ln84_fu_604_p2");
    sc_trace(mVcdFile, empty_11_fu_598_p2, "empty_11_fu_598_p2");
    sc_trace(mVcdFile, select_ln301_fu_626_p3, "select_ln301_fu_626_p3");
    sc_trace(mVcdFile, add_ln209_fu_672_p2, "add_ln209_fu_672_p2");
    sc_trace(mVcdFile, ret_V_fu_800_p2, "ret_V_fu_800_p2");
    sc_trace(mVcdFile, ret_V_1_fu_828_p2, "ret_V_1_fu_828_p2");
    sc_trace(mVcdFile, ret_V_3_fu_974_p2, "ret_V_3_fu_974_p2");
    sc_trace(mVcdFile, ret_V_2_fu_946_p2, "ret_V_2_fu_946_p2");
    sc_trace(mVcdFile, ret_V_4_fu_1002_p2, "ret_V_4_fu_1002_p2");
    sc_trace(mVcdFile, ret_V_5_fu_1030_p2, "ret_V_5_fu_1030_p2");
    sc_trace(mVcdFile, or_ln544_fu_1064_p2, "or_ln544_fu_1064_p2");
    sc_trace(mVcdFile, ret_V_7_fu_1196_p2, "ret_V_7_fu_1196_p2");
    sc_trace(mVcdFile, ret_V_6_fu_1168_p2, "ret_V_6_fu_1168_p2");
    sc_trace(mVcdFile, ret_V_9_fu_1248_p2, "ret_V_9_fu_1248_p2");
    sc_trace(mVcdFile, ret_V_8_fu_1224_p2, "ret_V_8_fu_1224_p2");
    sc_trace(mVcdFile, ret_V_10_fu_1276_p2, "ret_V_10_fu_1276_p2");
    sc_trace(mVcdFile, ret_V_11_fu_1304_p2, "ret_V_11_fu_1304_p2");
    sc_trace(mVcdFile, ret_V_12_fu_1332_p2, "ret_V_12_fu_1332_p2");
    sc_trace(mVcdFile, ret_V_13_fu_1360_p2, "ret_V_13_fu_1360_p2");
    sc_trace(mVcdFile, trunc_ln647_1_fu_1466_p1, "trunc_ln647_1_fu_1466_p1");
    sc_trace(mVcdFile, p_Result_2_fu_1510_p3, "p_Result_2_fu_1510_p3");
    sc_trace(mVcdFile, ret_V_14_fu_1562_p2, "ret_V_14_fu_1562_p2");
    sc_trace(mVcdFile, add_ln209_1_fu_1574_p2, "add_ln209_1_fu_1574_p2");
    sc_trace(mVcdFile, trunc_ln647_2_fu_1656_p1, "trunc_ln647_2_fu_1656_p1");
    sc_trace(mVcdFile, icmp_ln879_6_fu_1666_p2, "icmp_ln879_6_fu_1666_p2");
    sc_trace(mVcdFile, add_ln209_2_fu_1764_p2, "add_ln209_2_fu_1764_p2");
    sc_trace(mVcdFile, trunc_ln647_3_fu_1936_p1, "trunc_ln647_3_fu_1936_p1");
    sc_trace(mVcdFile, icmp_ln879_1_fu_514_p2, "icmp_ln879_1_fu_514_p2");
    sc_trace(mVcdFile, icmp_ln879_2_fu_520_p2, "icmp_ln879_2_fu_520_p2");
    sc_trace(mVcdFile, icmp_ln879_3_fu_532_p2, "icmp_ln879_3_fu_532_p2");
    sc_trace(mVcdFile, icmp_ln879_4_fu_538_p2, "icmp_ln879_4_fu_538_p2");
    sc_trace(mVcdFile, icmp_ln74_fu_550_p2, "icmp_ln74_fu_550_p2");
    sc_trace(mVcdFile, icmp_ln74_1_fu_556_p2, "icmp_ln74_1_fu_556_p2");
    sc_trace(mVcdFile, and_ln75_fu_526_p2, "and_ln75_fu_526_p2");
    sc_trace(mVcdFile, or_ln76_fu_544_p2, "or_ln76_fu_544_p2");
    sc_trace(mVcdFile, tmp_fu_568_p2, "tmp_fu_568_p2");
    sc_trace(mVcdFile, or_ln74_fu_562_p2, "or_ln74_fu_562_p2");
    sc_trace(mVcdFile, empty_10_fu_592_p2, "empty_10_fu_592_p2");
    sc_trace(mVcdFile, empty_fu_586_p2, "empty_fu_586_p2");
    sc_trace(mVcdFile, tmp_1_fu_654_p4, "tmp_1_fu_654_p4");
    sc_trace(mVcdFile, zext_ln364_fu_664_p1, "zext_ln364_fu_664_p1");
    sc_trace(mVcdFile, trunc_ln647_fu_668_p1, "trunc_ln647_fu_668_p1");
    sc_trace(mVcdFile, zext_ln215_4_fu_788_p1, "zext_ln215_4_fu_788_p1");
    sc_trace(mVcdFile, zext_ln215_5_fu_796_p1, "zext_ln215_5_fu_796_p1");
    sc_trace(mVcdFile, lhs_V_fu_816_p1, "lhs_V_fu_816_p1");
    sc_trace(mVcdFile, rhs_V_fu_824_p1, "rhs_V_fu_824_p1");
    sc_trace(mVcdFile, zext_ln215_fu_934_p1, "zext_ln215_fu_934_p1");
    sc_trace(mVcdFile, zext_ln215_1_fu_942_p1, "zext_ln215_1_fu_942_p1");
    sc_trace(mVcdFile, zext_ln215_2_fu_962_p1, "zext_ln215_2_fu_962_p1");
    sc_trace(mVcdFile, zext_ln215_3_fu_970_p1, "zext_ln215_3_fu_970_p1");
    sc_trace(mVcdFile, lhs_V_1_fu_990_p1, "lhs_V_1_fu_990_p1");
    sc_trace(mVcdFile, rhs_V_1_fu_998_p1, "rhs_V_1_fu_998_p1");
    sc_trace(mVcdFile, zext_ln215_6_fu_1018_p1, "zext_ln215_6_fu_1018_p1");
    sc_trace(mVcdFile, zext_ln215_7_fu_1026_p1, "zext_ln215_7_fu_1026_p1");
    sc_trace(mVcdFile, trunc_ln357_fu_1050_p1, "trunc_ln357_fu_1050_p1");
    sc_trace(mVcdFile, zext_ln357_fu_1054_p1, "zext_ln357_fu_1054_p1");
    sc_trace(mVcdFile, icmp_ln879_5_fu_1058_p2, "icmp_ln879_5_fu_1058_p2");
    sc_trace(mVcdFile, zext_ln215_8_fu_1156_p1, "zext_ln215_8_fu_1156_p1");
    sc_trace(mVcdFile, zext_ln215_9_fu_1164_p1, "zext_ln215_9_fu_1164_p1");
    sc_trace(mVcdFile, zext_ln215_10_fu_1184_p1, "zext_ln215_10_fu_1184_p1");
    sc_trace(mVcdFile, zext_ln215_11_fu_1192_p1, "zext_ln215_11_fu_1192_p1");
    sc_trace(mVcdFile, zext_ln215_12_fu_1212_p1, "zext_ln215_12_fu_1212_p1");
    sc_trace(mVcdFile, zext_ln215_13_fu_1220_p1, "zext_ln215_13_fu_1220_p1");
    sc_trace(mVcdFile, zext_ln215_14_fu_1244_p1, "zext_ln215_14_fu_1244_p1");
    sc_trace(mVcdFile, lhs_V_2_fu_1264_p1, "lhs_V_2_fu_1264_p1");
    sc_trace(mVcdFile, rhs_V_2_fu_1272_p1, "rhs_V_2_fu_1272_p1");
    sc_trace(mVcdFile, zext_ln215_17_fu_1292_p1, "zext_ln215_17_fu_1292_p1");
    sc_trace(mVcdFile, zext_ln215_18_fu_1300_p1, "zext_ln215_18_fu_1300_p1");
    sc_trace(mVcdFile, zext_ln215_19_fu_1320_p1, "zext_ln215_19_fu_1320_p1");
    sc_trace(mVcdFile, zext_ln215_20_fu_1328_p1, "zext_ln215_20_fu_1328_p1");
    sc_trace(mVcdFile, zext_ln215_21_fu_1348_p1, "zext_ln215_21_fu_1348_p1");
    sc_trace(mVcdFile, zext_ln215_22_fu_1356_p1, "zext_ln215_22_fu_1356_p1");
    sc_trace(mVcdFile, rhs_V_3_fu_1558_p1, "rhs_V_3_fu_1558_p1");
    sc_trace(mVcdFile, p_Result_8_fu_1742_p4, "p_Result_8_fu_1742_p4");
    sc_trace(mVcdFile, trunc_ln357_1_fu_1752_p1, "trunc_ln357_1_fu_1752_p1");
    sc_trace(mVcdFile, zext_ln209_fu_1756_p1, "zext_ln209_fu_1756_p1");
    sc_trace(mVcdFile, zext_ln209_1_fu_1760_p1, "zext_ln209_1_fu_1760_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_165, "ap_condition_165");
    sc_trace(mVcdFile, ap_condition_171, "ap_condition_171");
#endif

    }
    mHdltvinHandle.open("udp_ip_receive.hdltvin.dat");
    mHdltvoutHandle.open("udp_ip_receive.hdltvout.dat");
}

udp_ip_receive::~udp_ip_receive() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void udp_ip_receive::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_internal_resp_re = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ip_in_reg5_valid_V_l_load_fu_475_p1.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_504_p2.read()))) {
            arp_internal_resp_re = val_assign_fu_574_p2.read();
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, ip_in_reg5_valid_V_l_load_fu_475_p1.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ip_in_reg5_valid_V_l_load_fu_475_p1.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_504_p2.read())))) {
            arp_internal_resp_re = ap_const_lv1_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_internal_resp_re_1 = ap_const_lv80_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arp_internal_resp_re_1 = p_Result_s_fu_461_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_precompute_s = ap_const_lv17_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_precompute_s = add_ln209_2_fu_1764_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg0_0_V = ap_const_lv18_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg0_0_V = ret_V_14_fu_1562_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg0_1_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg0_1_V = ip_in_reg0_length_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg0_2_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg0_2_V = ip_in_reg0_id_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg0_3_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg0_3_V = ip_in_reg0_fragment_s.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg0_4_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg0_4_V = p_Result_2_fu_1510_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg0_5_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg0_5_V = ip_in_reg0_checksum_s.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg0_6_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg0_6_V = ip_in_reg0_src_ip_V.read().range(31, 16);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg0_7_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg0_7_V = trunc_ln647_1_fu_1466_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg1_0_V = ap_const_lv18_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg1_0_V = ret_V_9_fu_1248_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg1_1_V = ap_const_lv17_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg1_1_V = ret_V_8_fu_1224_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg1_2_V = ap_const_lv17_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg1_2_V = ret_V_7_fu_1196_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg1_3_V = ap_const_lv17_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg1_3_V = ret_V_6_fu_1168_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg2_0_V = ap_const_lv19_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg2_0_V = ret_V_3_fu_974_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg2_1_V = ap_const_lv18_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg2_1_V = ret_V_2_fu_946_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg3_0_V = ap_const_lv20_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg3_0_V = ret_V_fu_800_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        checksum_reg_final_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            checksum_reg_final_V = add_ln209_fu_672_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_src_mac0_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            eth_src_mac0_V = ip_in_data_V.read().range(287, 240);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_src_mac1_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            eth_src_mac1_V = eth_src_mac0_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_src_mac2_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            eth_src_mac2_V = eth_src_mac1_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_src_mac3_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            eth_src_mac3_V = eth_src_mac2_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_src_mac4_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            eth_src_mac4_V = eth_src_mac3_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_src_mac5_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            eth_src_mac5_V = eth_src_mac4_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_checksum_s = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_checksum_s = ip_in_data_V.read().range(143, 128);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_dst_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_dst_ip_V = ip_in_data_V.read().range(95, 64);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_fixed_hea = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_fixed_hea = ip_in_data_V.read().range(223, 208);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_fragment_s = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_fragment_s = ip_in_data_V.read().range(175, 160);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_id_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_id_V = ip_in_data_V.read().range(191, 176);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_length_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_length_V = ip_in_data_V.read().range(207, 192);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_proto_V = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_proto_V = ip_in_data_V.read().range(151, 144);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_proto_hea = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_proto_hea = trunc_ln647_3_fu_1936_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_src_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_src_ip_V = ip_in_data_V.read().range(127, 96);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_ttl_V = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_ttl_V = ip_in_data_V.read().range(159, 152);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg0_valid_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg0_valid_V = ip_in_valid_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg1_dst_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg1_dst_ip_V = ip_in_reg0_dst_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg1_fixed_hea = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg1_fixed_hea = ip_in_reg0_fixed_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg1_fragment_s = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg1_fragment_s = ip_in_reg0_fragment_s.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg1_proto_V = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg1_proto_V = ip_in_reg0_proto_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg1_proto_hea = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg1_proto_hea = ip_in_reg0_proto_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg1_src_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg1_src_ip_V = ip_in_reg0_src_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg1_valid_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg1_valid_V = ip_in_reg0_valid_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg2_dst_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg2_dst_ip_V = ip_in_reg1_dst_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg2_fixed_hea = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg2_fixed_hea = ip_in_reg1_fixed_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg2_fragment_s = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg2_fragment_s = ip_in_reg1_fragment_s.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg2_proto_V = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg2_proto_V = ip_in_reg1_proto_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg2_proto_hea = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg2_proto_hea = ip_in_reg1_proto_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg2_src_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg2_src_ip_V = ip_in_reg1_src_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg2_valid_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg2_valid_V = ip_in_reg1_valid_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg3_dst_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg3_dst_ip_V = ip_in_reg2_dst_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg3_fixed_hea = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg3_fixed_hea = ip_in_reg2_fixed_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg3_fragment_s = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg3_fragment_s = ip_in_reg2_fragment_s.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg3_proto_V = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg3_proto_V = ip_in_reg2_proto_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg3_proto_hea = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg3_proto_hea = ip_in_reg2_proto_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg3_src_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg3_src_ip_V = ip_in_reg2_src_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg3_valid_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg3_valid_V = ip_in_reg2_valid_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg4_dst_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg4_dst_ip_V = ip_in_reg3_dst_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg4_fixed_hea = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg4_fixed_hea = ip_in_reg3_fixed_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg4_fragment_s = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg4_fragment_s = ip_in_reg3_fragment_s.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg4_proto_V = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg4_proto_V = ip_in_reg3_proto_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg4_proto_hea = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg4_proto_hea = ip_in_reg3_proto_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg4_src_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg4_src_ip_V = ip_in_reg3_src_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg4_valid_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg4_valid_V = ip_in_reg3_valid_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg5_dst_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg5_dst_ip_V = ip_in_reg4_dst_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg5_fixed_hea = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg5_fixed_hea = ip_in_reg4_fixed_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg5_fragment_s = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg5_fragment_s = ip_in_reg4_fragment_s.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg5_proto_V = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg5_proto_V = ip_in_reg4_proto_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg5_proto_hea = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg5_proto_hea = ip_in_reg4_proto_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg5_src_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg5_src_ip_V = ip_in_reg4_src_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_in_reg5_valid_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ip_in_reg5_valid_V = ip_in_reg4_valid_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_out_reg_action_s = ap_const_lv2_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ap_condition_171.read(), ap_const_boolean_1)) {
                meta_out_reg_action_s = select_ln301_fu_626_p3.read();
            } else if (esl_seteq<1,1,1>(ap_condition_165.read(), ap_const_boolean_1)) {
                meta_out_reg_action_s = ap_const_lv2_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_out_reg_checksu = ap_const_lv20_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ap_condition_171.read(), ap_const_boolean_1)) {
                meta_out_reg_checksu = udp_cksum4_V.read();
            } else if (esl_seteq<1,1,1>(ap_condition_165.read(), ap_const_boolean_1)) {
                meta_out_reg_checksu = ap_const_lv20_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_out_reg_protoco = ap_const_lv64_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, ip_in_reg5_valid_V_l_load_fu_475_p1.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ip_in_reg5_valid_V_l_load_fu_475_p1.read(), ap_const_lv1_1) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_504_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ip_in_reg5_valid_V_l_load_fu_475_p1.read(), ap_const_lv1_1) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_504_p2.read())))) {
            meta_out_reg_protoco = ip_in_reg5_proto_hea.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_out_reg_src_ip_s = ap_const_lv32_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, ip_in_reg5_valid_V_l_load_fu_475_p1.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ip_in_reg5_valid_V_l_load_fu_475_p1.read(), ap_const_lv1_1) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_504_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
              esl_seteq<1,1,1>(ip_in_reg5_valid_V_l_load_fu_475_p1.read(), ap_const_lv1_1) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_504_p2.read())))) {
            meta_out_reg_src_ip_s = ip_in_reg5_src_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        myIP_reg_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            myIP_reg_V = myIP_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum0_0_V = ap_const_lv17_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum0_0_V = add_ln209_1_fu_1574_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum0_1_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum0_1_V = ip_in_reg0_src_ip_V.read().range(31, 16);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum0_2_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum0_2_V = trunc_ln647_1_fu_1466_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum0_3_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum0_3_V = ip_in_reg0_proto_hea.read().range(31, 16);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum0_4_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum0_4_V = ip_in_reg0_proto_hea.read().range(63, 48);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum0_5_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum0_5_V = ip_in_reg0_proto_hea.read().range(47, 32);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum0_6_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum0_6_V = ip_in_reg0_proto_hea.read().range(31, 16);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum0_7_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum0_7_V = trunc_ln647_2_fu_1656_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum1_0_V = ap_const_lv18_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum1_0_V = ret_V_10_fu_1276_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum1_1_V = ap_const_lv17_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum1_1_V = ret_V_11_fu_1304_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum1_2_V = ap_const_lv17_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum1_2_V = ret_V_12_fu_1332_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum1_3_V = ap_const_lv17_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum1_3_V = ret_V_13_fu_1360_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum2_0_V = ap_const_lv19_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum2_0_V = ret_V_4_fu_1002_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum2_1_V = ap_const_lv18_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum2_1_V = ret_V_5_fu_1030_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum3_V = ap_const_lv20_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum3_V = ret_V_1_fu_828_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_cksum4_V = ap_const_lv20_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_cksum4_V = udp_cksum3_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_ignore_flag0_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_ignore_flag0_V = icmp_ln879_6_fu_1666_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_ignore_flag1_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_ignore_flag1_V = udp_ignore_flag0_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_ignore_flag2_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_ignore_flag2_V = or_ln544_fu_1064_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_ignore_flag3_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_ignore_flag3_V = udp_ignore_flag2_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        udp_ignore_flag4_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            udp_ignore_flag4_V = udp_ignore_flag3_V.read();
        }
    }
}

void udp_ip_receive::thread_add_ln209_1_fu_1574_p2() {
    add_ln209_1_fu_1574_p2 = (!ap_const_lv17_11.is_01() || !checksum_precompute_s.read().is_01())? sc_lv<17>(): (sc_biguint<17>(ap_const_lv17_11) + sc_biguint<17>(checksum_precompute_s.read()));
}

void udp_ip_receive::thread_add_ln209_2_fu_1764_p2() {
    add_ln209_2_fu_1764_p2 = (!zext_ln209_fu_1756_p1.read().is_01() || !zext_ln209_1_fu_1760_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln209_fu_1756_p1.read()) + sc_biguint<17>(zext_ln209_1_fu_1760_p1.read()));
}

void udp_ip_receive::thread_add_ln209_fu_672_p2() {
    add_ln209_fu_672_p2 = (!zext_ln364_fu_664_p1.read().is_01() || !trunc_ln647_fu_668_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(zext_ln364_fu_664_p1.read()) + sc_biguint<16>(trunc_ln647_fu_668_p1.read()));
}

void udp_ip_receive::thread_and_ln75_fu_526_p2() {
    and_ln75_fu_526_p2 = (icmp_ln879_1_fu_514_p2.read() & icmp_ln879_2_fu_520_p2.read());
}

void udp_ip_receive::thread_and_ln84_fu_604_p2() {
    and_ln84_fu_604_p2 = (and_ln75_fu_526_p2.read() & icmp_ln879_4_fu_538_p2.read());
}

void udp_ip_receive::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void udp_ip_receive::thread_ap_condition_165() {
    ap_condition_165 = (((esl_seteq<1,1,1>(ip_in_reg5_valid_V_l_load_fu_475_p1.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, and_ln84_fu_604_p2.read())) || 
  (esl_seteq<1,1,1>(ip_in_reg5_valid_V_l_load_fu_475_p1.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, empty_11_fu_598_p2.read()))) || (esl_seteq<1,1,1>(ip_in_reg5_valid_V_l_load_fu_475_p1.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_504_p2.read())));
}

void udp_ip_receive::thread_ap_condition_171() {
    ap_condition_171 = (esl_seteq<1,1,1>(ip_in_reg5_valid_V_l_load_fu_475_p1.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_504_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, empty_11_fu_598_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, and_ln84_fu_604_p2.read()));
}

void udp_ip_receive::thread_arp_internal_resp_Mac_IP_V() {
    arp_internal_resp_Mac_IP_V = arp_internal_resp_re_1.read();
}

void udp_ip_receive::thread_arp_internal_resp_valid_V() {
    arp_internal_resp_valid_V = arp_internal_resp_re.read();
}

void udp_ip_receive::thread_empty_10_fu_592_p2() {
    empty_10_fu_592_p2 = (!ip_in_reg5_fragment_s.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(ip_in_reg5_fragment_s.read() == ap_const_lv16_0);
}

void udp_ip_receive::thread_empty_11_fu_598_p2() {
    empty_11_fu_598_p2 = (empty_10_fu_592_p2.read() | empty_fu_586_p2.read());
}

void udp_ip_receive::thread_empty_fu_586_p2() {
    empty_fu_586_p2 = (!ip_in_reg5_fragment_s.read().is_01() || !ap_const_lv16_4000.is_01())? sc_lv<1>(): sc_lv<1>(ip_in_reg5_fragment_s.read() == ap_const_lv16_4000);
}

void udp_ip_receive::thread_icmp_ln74_1_fu_556_p2() {
    icmp_ln74_1_fu_556_p2 = (!ip_in_reg5_fragment_s.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(ip_in_reg5_fragment_s.read() == ap_const_lv16_0);
}

void udp_ip_receive::thread_icmp_ln74_fu_550_p2() {
    icmp_ln74_fu_550_p2 = (!ip_in_reg5_fragment_s.read().is_01() || !ap_const_lv16_4000.is_01())? sc_lv<1>(): sc_lv<1>(ip_in_reg5_fragment_s.read() == ap_const_lv16_4000);
}

void udp_ip_receive::thread_icmp_ln879_1_fu_514_p2() {
    icmp_ln879_1_fu_514_p2 = (!ip_in_reg5_dst_ip_V.read().is_01() || !myIP_reg_V.read().is_01())? sc_lv<1>(): sc_lv<1>(ip_in_reg5_dst_ip_V.read() == myIP_reg_V.read());
}

void udp_ip_receive::thread_icmp_ln879_2_fu_520_p2() {
    icmp_ln879_2_fu_520_p2 = (!checksum_reg_final_V.read().is_01() || !ap_const_lv16_FFFF.is_01())? sc_lv<1>(): sc_lv<1>(checksum_reg_final_V.read() == ap_const_lv16_FFFF);
}

void udp_ip_receive::thread_icmp_ln879_3_fu_532_p2() {
    icmp_ln879_3_fu_532_p2 = (!ip_in_reg5_proto_V.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<1>(): sc_lv<1>(ip_in_reg5_proto_V.read() == ap_const_lv8_1);
}

void udp_ip_receive::thread_icmp_ln879_4_fu_538_p2() {
    icmp_ln879_4_fu_538_p2 = (!ip_in_reg5_proto_V.read().is_01() || !ap_const_lv8_11.is_01())? sc_lv<1>(): sc_lv<1>(ip_in_reg5_proto_V.read() == ap_const_lv8_11);
}

void udp_ip_receive::thread_icmp_ln879_5_fu_1058_p2() {
    icmp_ln879_5_fu_1058_p2 = (!ret_V_4_fu_1002_p2.read().is_01() || !zext_ln357_fu_1054_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(ret_V_4_fu_1002_p2.read() == zext_ln357_fu_1054_p1.read());
}

void udp_ip_receive::thread_icmp_ln879_6_fu_1666_p2() {
    icmp_ln879_6_fu_1666_p2 = (!trunc_ln647_2_fu_1656_p1.read().is_01() || !ap_const_lv16_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln647_2_fu_1656_p1.read() == ap_const_lv16_0);
}

void udp_ip_receive::thread_icmp_ln879_fu_504_p2() {
    icmp_ln879_fu_504_p2 = (!ip_in_reg5_fixed_hea.read().is_01() || !ap_const_lv16_4500.is_01())? sc_lv<1>(): sc_lv<1>(ip_in_reg5_fixed_hea.read() == ap_const_lv16_4500);
}

void udp_ip_receive::thread_ip_in_reg5_valid_V_l_load_fu_475_p1() {
    ip_in_reg5_valid_V_l_load_fu_475_p1 = ip_in_reg5_valid_V.read();
}

void udp_ip_receive::thread_lhs_V_1_fu_990_p1() {
    lhs_V_1_fu_990_p1 = esl_zext<19,18>(udp_cksum1_0_V.read());
}

void udp_ip_receive::thread_lhs_V_2_fu_1264_p1() {
    lhs_V_2_fu_1264_p1 = esl_zext<18,17>(udp_cksum0_0_V.read());
}

void udp_ip_receive::thread_lhs_V_fu_816_p1() {
    lhs_V_fu_816_p1 = esl_zext<20,19>(udp_cksum2_0_V.read());
}

void udp_ip_receive::thread_meta_out_action_V() {
    meta_out_action_V = meta_out_reg_action_s.read();
}

void udp_ip_receive::thread_meta_out_checksum_V() {
    meta_out_checksum_V = esl_zext<32,20>(meta_out_reg_checksu.read());
}

void udp_ip_receive::thread_meta_out_protocol_header_V() {
    meta_out_protocol_header_V = meta_out_reg_protoco.read();
}

void udp_ip_receive::thread_meta_out_src_ip_V() {
    meta_out_src_ip_V = meta_out_reg_src_ip_s.read();
}

void udp_ip_receive::thread_or_ln544_fu_1064_p2() {
    or_ln544_fu_1064_p2 = (udp_ignore_flag1_V.read() | icmp_ln879_5_fu_1058_p2.read());
}

void udp_ip_receive::thread_or_ln74_fu_562_p2() {
    or_ln74_fu_562_p2 = (icmp_ln74_fu_550_p2.read() | icmp_ln74_1_fu_556_p2.read());
}

void udp_ip_receive::thread_or_ln76_fu_544_p2() {
    or_ln76_fu_544_p2 = (icmp_ln879_3_fu_532_p2.read() | icmp_ln879_4_fu_538_p2.read());
}

void udp_ip_receive::thread_p_Result_2_fu_1510_p3() {
    p_Result_2_fu_1510_p3 = esl_concat<8,8>(ip_in_reg0_ttl_V.read(), ip_in_reg0_proto_V.read());
}

void udp_ip_receive::thread_p_Result_8_fu_1742_p4() {
    p_Result_8_fu_1742_p4 = myIP_reg_V.read().range(31, 16);
}

void udp_ip_receive::thread_p_Result_s_fu_461_p3() {
    p_Result_s_fu_461_p3 = esl_concat<48,32>(eth_src_mac5_V.read(), ip_in_reg5_src_ip_V.read());
}

void udp_ip_receive::thread_ret_V_10_fu_1276_p2() {
    ret_V_10_fu_1276_p2 = (!lhs_V_2_fu_1264_p1.read().is_01() || !rhs_V_2_fu_1272_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(lhs_V_2_fu_1264_p1.read()) + sc_biguint<18>(rhs_V_2_fu_1272_p1.read()));
}

void udp_ip_receive::thread_ret_V_11_fu_1304_p2() {
    ret_V_11_fu_1304_p2 = (!zext_ln215_17_fu_1292_p1.read().is_01() || !zext_ln215_18_fu_1300_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln215_17_fu_1292_p1.read()) + sc_biguint<17>(zext_ln215_18_fu_1300_p1.read()));
}

void udp_ip_receive::thread_ret_V_12_fu_1332_p2() {
    ret_V_12_fu_1332_p2 = (!zext_ln215_19_fu_1320_p1.read().is_01() || !zext_ln215_20_fu_1328_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln215_19_fu_1320_p1.read()) + sc_biguint<17>(zext_ln215_20_fu_1328_p1.read()));
}

void udp_ip_receive::thread_ret_V_13_fu_1360_p2() {
    ret_V_13_fu_1360_p2 = (!zext_ln215_21_fu_1348_p1.read().is_01() || !zext_ln215_22_fu_1356_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln215_21_fu_1348_p1.read()) + sc_biguint<17>(zext_ln215_22_fu_1356_p1.read()));
}

void udp_ip_receive::thread_ret_V_14_fu_1562_p2() {
    ret_V_14_fu_1562_p2 = (!ap_const_lv18_4500.is_01() || !rhs_V_3_fu_1558_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(ap_const_lv18_4500) + sc_biguint<18>(rhs_V_3_fu_1558_p1.read()));
}

void udp_ip_receive::thread_ret_V_1_fu_828_p2() {
    ret_V_1_fu_828_p2 = (!lhs_V_fu_816_p1.read().is_01() || !rhs_V_fu_824_p1.read().is_01())? sc_lv<20>(): (sc_biguint<20>(lhs_V_fu_816_p1.read()) + sc_biguint<20>(rhs_V_fu_824_p1.read()));
}

void udp_ip_receive::thread_ret_V_2_fu_946_p2() {
    ret_V_2_fu_946_p2 = (!zext_ln215_fu_934_p1.read().is_01() || !zext_ln215_1_fu_942_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(zext_ln215_fu_934_p1.read()) + sc_biguint<18>(zext_ln215_1_fu_942_p1.read()));
}

void udp_ip_receive::thread_ret_V_3_fu_974_p2() {
    ret_V_3_fu_974_p2 = (!zext_ln215_2_fu_962_p1.read().is_01() || !zext_ln215_3_fu_970_p1.read().is_01())? sc_lv<19>(): (sc_biguint<19>(zext_ln215_2_fu_962_p1.read()) + sc_biguint<19>(zext_ln215_3_fu_970_p1.read()));
}

void udp_ip_receive::thread_ret_V_4_fu_1002_p2() {
    ret_V_4_fu_1002_p2 = (!lhs_V_1_fu_990_p1.read().is_01() || !rhs_V_1_fu_998_p1.read().is_01())? sc_lv<19>(): (sc_biguint<19>(lhs_V_1_fu_990_p1.read()) + sc_biguint<19>(rhs_V_1_fu_998_p1.read()));
}

void udp_ip_receive::thread_ret_V_5_fu_1030_p2() {
    ret_V_5_fu_1030_p2 = (!zext_ln215_6_fu_1018_p1.read().is_01() || !zext_ln215_7_fu_1026_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(zext_ln215_6_fu_1018_p1.read()) + sc_biguint<18>(zext_ln215_7_fu_1026_p1.read()));
}

void udp_ip_receive::thread_ret_V_6_fu_1168_p2() {
    ret_V_6_fu_1168_p2 = (!zext_ln215_8_fu_1156_p1.read().is_01() || !zext_ln215_9_fu_1164_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln215_8_fu_1156_p1.read()) + sc_biguint<17>(zext_ln215_9_fu_1164_p1.read()));
}

void udp_ip_receive::thread_ret_V_7_fu_1196_p2() {
    ret_V_7_fu_1196_p2 = (!zext_ln215_10_fu_1184_p1.read().is_01() || !zext_ln215_11_fu_1192_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln215_10_fu_1184_p1.read()) + sc_biguint<17>(zext_ln215_11_fu_1192_p1.read()));
}

void udp_ip_receive::thread_ret_V_8_fu_1224_p2() {
    ret_V_8_fu_1224_p2 = (!zext_ln215_12_fu_1212_p1.read().is_01() || !zext_ln215_13_fu_1220_p1.read().is_01())? sc_lv<17>(): (sc_biguint<17>(zext_ln215_12_fu_1212_p1.read()) + sc_biguint<17>(zext_ln215_13_fu_1220_p1.read()));
}

void udp_ip_receive::thread_ret_V_9_fu_1248_p2() {
    ret_V_9_fu_1248_p2 = (!checksum_reg0_0_V.read().is_01() || !zext_ln215_14_fu_1244_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(checksum_reg0_0_V.read()) + sc_biguint<18>(zext_ln215_14_fu_1244_p1.read()));
}

void udp_ip_receive::thread_ret_V_fu_800_p2() {
    ret_V_fu_800_p2 = (!zext_ln215_4_fu_788_p1.read().is_01() || !zext_ln215_5_fu_796_p1.read().is_01())? sc_lv<20>(): (sc_biguint<20>(zext_ln215_4_fu_788_p1.read()) + sc_biguint<20>(zext_ln215_5_fu_796_p1.read()));
}

void udp_ip_receive::thread_rhs_V_1_fu_998_p1() {
    rhs_V_1_fu_998_p1 = esl_zext<19,17>(udp_cksum1_1_V.read());
}

void udp_ip_receive::thread_rhs_V_2_fu_1272_p1() {
    rhs_V_2_fu_1272_p1 = esl_zext<18,16>(udp_cksum0_1_V.read());
}

void udp_ip_receive::thread_rhs_V_3_fu_1558_p1() {
    rhs_V_3_fu_1558_p1 = esl_zext<18,17>(checksum_precompute_s.read());
}

void udp_ip_receive::thread_rhs_V_fu_824_p1() {
    rhs_V_fu_824_p1 = esl_zext<20,18>(udp_cksum2_1_V.read());
}

void udp_ip_receive::thread_select_ln301_fu_626_p3() {
    select_ln301_fu_626_p3 = (!udp_ignore_flag4_V.read()[0].is_01())? sc_lv<2>(): ((udp_ignore_flag4_V.read()[0].to_bool())? ap_const_lv2_2: ap_const_lv2_1);
}

void udp_ip_receive::thread_tmp_1_fu_654_p4() {
    tmp_1_fu_654_p4 = checksum_reg3_0_V.read().range(19, 16);
}

void udp_ip_receive::thread_tmp_fu_568_p2() {
    tmp_fu_568_p2 = (and_ln75_fu_526_p2.read() & or_ln76_fu_544_p2.read());
}

void udp_ip_receive::thread_trunc_ln357_1_fu_1752_p1() {
    trunc_ln357_1_fu_1752_p1 = myIP_reg_V.read().range(16-1, 0);
}

void udp_ip_receive::thread_trunc_ln357_fu_1050_p1() {
    trunc_ln357_fu_1050_p1 = ip_in_reg2_proto_hea.read().range(16-1, 0);
}

void udp_ip_receive::thread_trunc_ln647_1_fu_1466_p1() {
    trunc_ln647_1_fu_1466_p1 = ip_in_reg0_src_ip_V.read().range(16-1, 0);
}

void udp_ip_receive::thread_trunc_ln647_2_fu_1656_p1() {
    trunc_ln647_2_fu_1656_p1 = ip_in_reg0_proto_hea.read().range(16-1, 0);
}

void udp_ip_receive::thread_trunc_ln647_3_fu_1936_p1() {
    trunc_ln647_3_fu_1936_p1 = ip_in_data_V.read().range(64-1, 0);
}

void udp_ip_receive::thread_trunc_ln647_fu_668_p1() {
    trunc_ln647_fu_668_p1 = checksum_reg3_0_V.read().range(16-1, 0);
}

void udp_ip_receive::thread_val_assign_fu_574_p2() {
    val_assign_fu_574_p2 = (tmp_fu_568_p2.read() & or_ln74_fu_562_p2.read());
}

void udp_ip_receive::thread_zext_ln209_1_fu_1760_p1() {
    zext_ln209_1_fu_1760_p1 = esl_zext<17,16>(trunc_ln357_1_fu_1752_p1.read());
}

void udp_ip_receive::thread_zext_ln209_fu_1756_p1() {
    zext_ln209_fu_1756_p1 = esl_zext<17,16>(p_Result_8_fu_1742_p4.read());
}

void udp_ip_receive::thread_zext_ln215_10_fu_1184_p1() {
    zext_ln215_10_fu_1184_p1 = esl_zext<17,16>(checksum_reg0_4_V.read());
}

void udp_ip_receive::thread_zext_ln215_11_fu_1192_p1() {
    zext_ln215_11_fu_1192_p1 = esl_zext<17,16>(checksum_reg0_5_V.read());
}

void udp_ip_receive::thread_zext_ln215_12_fu_1212_p1() {
    zext_ln215_12_fu_1212_p1 = esl_zext<17,16>(checksum_reg0_2_V.read());
}

void udp_ip_receive::thread_zext_ln215_13_fu_1220_p1() {
    zext_ln215_13_fu_1220_p1 = esl_zext<17,16>(checksum_reg0_3_V.read());
}

void udp_ip_receive::thread_zext_ln215_14_fu_1244_p1() {
    zext_ln215_14_fu_1244_p1 = esl_zext<18,16>(checksum_reg0_1_V.read());
}

void udp_ip_receive::thread_zext_ln215_17_fu_1292_p1() {
    zext_ln215_17_fu_1292_p1 = esl_zext<17,16>(udp_cksum0_2_V.read());
}

void udp_ip_receive::thread_zext_ln215_18_fu_1300_p1() {
    zext_ln215_18_fu_1300_p1 = esl_zext<17,16>(udp_cksum0_3_V.read());
}

void udp_ip_receive::thread_zext_ln215_19_fu_1320_p1() {
    zext_ln215_19_fu_1320_p1 = esl_zext<17,16>(udp_cksum0_4_V.read());
}

void udp_ip_receive::thread_zext_ln215_1_fu_942_p1() {
    zext_ln215_1_fu_942_p1 = esl_zext<18,17>(checksum_reg1_3_V.read());
}

void udp_ip_receive::thread_zext_ln215_20_fu_1328_p1() {
    zext_ln215_20_fu_1328_p1 = esl_zext<17,16>(udp_cksum0_5_V.read());
}

void udp_ip_receive::thread_zext_ln215_21_fu_1348_p1() {
    zext_ln215_21_fu_1348_p1 = esl_zext<17,16>(udp_cksum0_6_V.read());
}

void udp_ip_receive::thread_zext_ln215_22_fu_1356_p1() {
    zext_ln215_22_fu_1356_p1 = esl_zext<17,16>(udp_cksum0_7_V.read());
}

void udp_ip_receive::thread_zext_ln215_2_fu_962_p1() {
    zext_ln215_2_fu_962_p1 = esl_zext<19,18>(checksum_reg1_0_V.read());
}

void udp_ip_receive::thread_zext_ln215_3_fu_970_p1() {
    zext_ln215_3_fu_970_p1 = esl_zext<19,17>(checksum_reg1_1_V.read());
}

void udp_ip_receive::thread_zext_ln215_4_fu_788_p1() {
    zext_ln215_4_fu_788_p1 = esl_zext<20,19>(checksum_reg2_0_V.read());
}

void udp_ip_receive::thread_zext_ln215_5_fu_796_p1() {
    zext_ln215_5_fu_796_p1 = esl_zext<20,18>(checksum_reg2_1_V.read());
}

void udp_ip_receive::thread_zext_ln215_6_fu_1018_p1() {
    zext_ln215_6_fu_1018_p1 = esl_zext<18,17>(udp_cksum1_2_V.read());
}

void udp_ip_receive::thread_zext_ln215_7_fu_1026_p1() {
    zext_ln215_7_fu_1026_p1 = esl_zext<18,17>(udp_cksum1_3_V.read());
}

void udp_ip_receive::thread_zext_ln215_8_fu_1156_p1() {
    zext_ln215_8_fu_1156_p1 = esl_zext<17,16>(checksum_reg0_6_V.read());
}

void udp_ip_receive::thread_zext_ln215_9_fu_1164_p1() {
    zext_ln215_9_fu_1164_p1 = esl_zext<17,16>(checksum_reg0_7_V.read());
}

void udp_ip_receive::thread_zext_ln215_fu_934_p1() {
    zext_ln215_fu_934_p1 = esl_zext<18,17>(checksum_reg1_2_V.read());
}

void udp_ip_receive::thread_zext_ln357_fu_1054_p1() {
    zext_ln357_fu_1054_p1 = esl_zext<19,16>(trunc_ln357_fu_1050_p1.read());
}

void udp_ip_receive::thread_zext_ln364_fu_664_p1() {
    zext_ln364_fu_664_p1 = esl_zext<16,4>(tmp_1_fu_654_p4.read());
}

void udp_ip_receive::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void udp_ip_receive::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"myIP_V\" :  \"" << myIP_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ip_in_data_V\" :  \"" << ip_in_data_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ip_in_valid_V\" :  \"" << ip_in_valid_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"meta_out_src_ip_V\" :  \"" << meta_out_src_ip_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"meta_out_protocol_header_V\" :  \"" << meta_out_protocol_header_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"meta_out_checksum_V\" :  \"" << meta_out_checksum_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"meta_out_action_V\" :  \"" << meta_out_action_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arp_internal_resp_Mac_IP_V\" :  \"" << arp_internal_resp_Mac_IP_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arp_internal_resp_valid_V\" :  \"" << arp_internal_resp_valid_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

