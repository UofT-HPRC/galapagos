// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "arp_receive.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic arp_receive::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> arp_receive::ap_ST_fsm_state1 = "1";
const sc_lv<80> arp_receive::ap_const_lv80_0 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> arp_receive::ap_const_lv1_0 = "0";
const sc_lv<8> arp_receive::ap_const_lv8_0 = "00000000";
const sc_lv<48> arp_receive::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<32> arp_receive::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<16> arp_receive::ap_const_lv16_0 = "0000000000000000";
const sc_lv<1> arp_receive::ap_const_lv1_1 = "1";
const sc_lv<16> arp_receive::ap_const_lv16_1 = "1";
const sc_lv<48> arp_receive::ap_const_lv48_108000604 = "100001000000000000000011000000100";
const sc_lv<48> arp_receive::ap_const_lv48_FFFFFFFFFFFF = "111111111111111111111111111111111111111111111111";
const sc_lv<16> arp_receive::ap_const_lv16_2 = "10";
const sc_lv<32> arp_receive::ap_const_lv32_F0 = "11110000";
const sc_lv<32> arp_receive::ap_const_lv32_11F = "100011111";
const sc_lv<32> arp_receive::ap_const_lv32_B0 = "10110000";
const sc_lv<32> arp_receive::ap_const_lv32_DF = "11011111";
const sc_lv<32> arp_receive::ap_const_lv32_A0 = "10100000";
const sc_lv<32> arp_receive::ap_const_lv32_AF = "10101111";
const sc_lv<32> arp_receive::ap_const_lv32_70 = "1110000";
const sc_lv<32> arp_receive::ap_const_lv32_9F = "10011111";
const sc_lv<32> arp_receive::ap_const_lv32_50 = "1010000";
const sc_lv<32> arp_receive::ap_const_lv32_6F = "1101111";
const sc_lv<32> arp_receive::ap_const_lv32_20 = "100000";
const sc_lv<32> arp_receive::ap_const_lv32_4F = "1001111";
const sc_logic arp_receive::ap_const_logic_0 = sc_dt::Log_0;
const bool arp_receive::ap_const_boolean_1 = true;

arp_receive::arp_receive(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln72_1_fu_302_p2);
    sensitive << ( and_ln72_fu_296_p2 );
    sensitive << ( icmp_ln879_3_fu_284_p2 );

    SC_METHOD(thread_and_ln72_fu_296_p2);
    sensitive << ( icmp_ln879_2_fu_266_p2 );
    sensitive << ( icmp_ln879_4_fu_290_p2 );

    SC_METHOD(thread_and_ln79_1_fu_391_p2);
    sensitive << ( and_ln79_fu_385_p2 );
    sensitive << ( icmp_ln879_8_fu_373_p2 );

    SC_METHOD(thread_and_ln79_fu_385_p2);
    sensitive << ( icmp_ln879_2_fu_266_p2 );
    sensitive << ( icmp_ln879_9_fu_379_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_103);
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );
    sensitive << ( icmp_ln879_5_fu_355_p2 );
    sensitive << ( icmp_ln879_6_fu_361_p2 );
    sensitive << ( icmp_ln879_2_fu_266_p2 );
    sensitive << ( and_ln79_1_fu_391_p2 );
    sensitive << ( icmp_ln879_7_fu_367_p2 );

    SC_METHOD(thread_ap_condition_77);
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );
    sensitive << ( icmp_ln879_5_fu_355_p2 );
    sensitive << ( icmp_ln879_6_fu_361_p2 );
    sensitive << ( icmp_ln879_2_fu_266_p2 );

    SC_METHOD(thread_ap_phi_mux_lhs_V_phi_fu_194_p8);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );
    sensitive << ( icmp_ln879_fu_272_p2 );
    sensitive << ( icmp_ln879_1_fu_278_p2 );
    sensitive << ( and_ln72_1_fu_302_p2 );

    SC_METHOD(thread_arp_in_reg_valid_V_l_load_fu_238_p1);
    sensitive << ( arp_in_reg_valid_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_arp_internal_resp_va_read_fu_126_p2);
    sensitive << ( arp_internal_resp_valid_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_arptable_addrout_V);
    sensitive << ( arptable_addrout_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_arptable_dataout_Mac_IP_V);
    sensitive << ( arptable_dataout_reg_1 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_arptable_dataout_valid_V);
    sensitive << ( arptable_dataout_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_call_for_responce_Mac_IP_V);
    sensitive << ( call_for_responce_re_1 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_call_for_responce_valid_V);
    sensitive << ( call_for_responce_re );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln879_1_fu_278_p2);
    sensitive << ( arp_in_reg_dst_ip_V );
    sensitive << ( myIPReg_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );
    sensitive << ( icmp_ln879_fu_272_p2 );

    SC_METHOD(thread_icmp_ln879_2_fu_266_p2);
    sensitive << ( arp_in_reg_opcode_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln879_3_fu_284_p2);
    sensitive << ( arp_in_reg_dst_mac_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );
    sensitive << ( icmp_ln879_fu_272_p2 );
    sensitive << ( icmp_ln879_1_fu_278_p2 );

    SC_METHOD(thread_icmp_ln879_4_fu_290_p2);
    sensitive << ( arp_in_reg_dst_ip_V );
    sensitive << ( arp_in_reg_src_ip_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );
    sensitive << ( icmp_ln879_fu_272_p2 );
    sensitive << ( icmp_ln879_1_fu_278_p2 );

    SC_METHOD(thread_icmp_ln879_5_fu_355_p2);
    sensitive << ( arp_in_reg_fixed_hea );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );

    SC_METHOD(thread_icmp_ln879_6_fu_361_p2);
    sensitive << ( arp_in_reg_dst_ip_V );
    sensitive << ( myIPReg_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );
    sensitive << ( icmp_ln879_5_fu_355_p2 );

    SC_METHOD(thread_icmp_ln879_7_fu_367_p2);
    sensitive << ( arp_in_reg_opcode_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );
    sensitive << ( icmp_ln879_5_fu_355_p2 );
    sensitive << ( icmp_ln879_6_fu_361_p2 );
    sensitive << ( icmp_ln879_2_fu_266_p2 );

    SC_METHOD(thread_icmp_ln879_8_fu_373_p2);
    sensitive << ( arp_in_reg_dst_mac_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );
    sensitive << ( icmp_ln879_5_fu_355_p2 );
    sensitive << ( icmp_ln879_6_fu_361_p2 );
    sensitive << ( icmp_ln879_2_fu_266_p2 );
    sensitive << ( icmp_ln879_7_fu_367_p2 );

    SC_METHOD(thread_icmp_ln879_9_fu_379_p2);
    sensitive << ( arp_in_reg_dst_ip_V );
    sensitive << ( arp_in_reg_src_ip_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );
    sensitive << ( icmp_ln879_5_fu_355_p2 );
    sensitive << ( icmp_ln879_6_fu_361_p2 );
    sensitive << ( icmp_ln879_2_fu_266_p2 );
    sensitive << ( icmp_ln879_7_fu_367_p2 );

    SC_METHOD(thread_icmp_ln879_fu_272_p2);
    sensitive << ( arp_in_reg_fixed_hea );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( arp_in_reg_valid_V_l_load_fu_238_p1 );

    SC_METHOD(thread_p_Result_1_fu_439_p3);
    sensitive << ( arp_in_reg_src_ip_V );
    sensitive << ( arp_in_reg_src_mac_V );

    SC_METHOD(thread_p_Result_2_fu_397_p3);
    sensitive << ( arp_in_reg_src_ip_V );
    sensitive << ( arp_in_reg_src_mac_V );

    SC_METHOD(thread_p_Result_s_fu_425_p3);
    sensitive << ( arp_in_reg_src_ip_V );
    sensitive << ( eth_src_mac_V );

    SC_METHOD(thread_ret_V_fu_319_p2);
    sensitive << ( arp_internal_resp_va );
    sensitive << ( ap_phi_mux_lhs_V_phi_fu_194_p8 );

    SC_METHOD(thread_rhs_V_load_fu_315_p1);
    sensitive << ( arp_internal_resp_va );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_trunc_ln647_1_fu_453_p1);
    sensitive << ( arp_in_reg_src_ip_V );

    SC_METHOD(thread_trunc_ln647_2_fu_411_p1);
    sensitive << ( arp_in_reg_src_ip_V );

    SC_METHOD(thread_trunc_ln647_3_fu_577_p1);
    sensitive << ( arp_in_data_V );

    SC_METHOD(thread_trunc_ln647_fu_345_p1);
    sensitive << ( arp_internal_resp_re );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    call_for_responce_re_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    call_for_responce_re = "0";
    arptable_dataout_reg_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    arptable_dataout_reg = "0";
    arptable_addrout_reg = "00000000";
    arp_in_reg_valid_V = "0";
    arp_in_reg_fixed_hea = "000000000000000000000000000000000000000000000000";
    arp_in_reg_dst_ip_V = "00000000000000000000000000000000";
    myIPReg_V = "00000000000000000000000000000000";
    arp_in_reg_opcode_V = "0000000000000000";
    arp_in_reg_dst_mac_V = "000000000000000000000000000000000000000000000000";
    arp_in_reg_src_ip_V = "00000000000000000000000000000000";
    arp_internal_resp_va = "0";
    arp_in_reg_src_mac_V = "000000000000000000000000000000000000000000000000";
    eth_src_mac_V = "000000000000000000000000000000000000000000000000";
    arp_internal_resp_re = "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "arp_receive_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, myIP_V, "(port)myIP_V");
    sc_trace(mVcdFile, arp_in_data_V, "(port)arp_in_data_V");
    sc_trace(mVcdFile, arp_in_valid_V, "(port)arp_in_valid_V");
    sc_trace(mVcdFile, arp_internal_resp_Mac_IP_V, "(port)arp_internal_resp_Mac_IP_V");
    sc_trace(mVcdFile, arp_internal_resp_valid_V, "(port)arp_internal_resp_valid_V");
    sc_trace(mVcdFile, call_for_responce_Mac_IP_V, "(port)call_for_responce_Mac_IP_V");
    sc_trace(mVcdFile, call_for_responce_valid_V, "(port)call_for_responce_valid_V");
    sc_trace(mVcdFile, arptable_dataout_Mac_IP_V, "(port)arptable_dataout_Mac_IP_V");
    sc_trace(mVcdFile, arptable_dataout_valid_V, "(port)arptable_dataout_valid_V");
    sc_trace(mVcdFile, arptable_addrout_V, "(port)arptable_addrout_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, call_for_responce_re_1, "call_for_responce_re_1");
    sc_trace(mVcdFile, call_for_responce_re, "call_for_responce_re");
    sc_trace(mVcdFile, arptable_dataout_reg_1, "arptable_dataout_reg_1");
    sc_trace(mVcdFile, arptable_dataout_reg, "arptable_dataout_reg");
    sc_trace(mVcdFile, arptable_addrout_reg, "arptable_addrout_reg");
    sc_trace(mVcdFile, arp_in_reg_valid_V, "arp_in_reg_valid_V");
    sc_trace(mVcdFile, arp_in_reg_fixed_hea, "arp_in_reg_fixed_hea");
    sc_trace(mVcdFile, arp_in_reg_dst_ip_V, "arp_in_reg_dst_ip_V");
    sc_trace(mVcdFile, myIPReg_V, "myIPReg_V");
    sc_trace(mVcdFile, arp_in_reg_opcode_V, "arp_in_reg_opcode_V");
    sc_trace(mVcdFile, arp_in_reg_dst_mac_V, "arp_in_reg_dst_mac_V");
    sc_trace(mVcdFile, arp_in_reg_src_ip_V, "arp_in_reg_src_ip_V");
    sc_trace(mVcdFile, arp_internal_resp_va, "arp_internal_resp_va");
    sc_trace(mVcdFile, arp_in_reg_src_mac_V, "arp_in_reg_src_mac_V");
    sc_trace(mVcdFile, eth_src_mac_V, "eth_src_mac_V");
    sc_trace(mVcdFile, arp_internal_resp_re, "arp_internal_resp_re");
    sc_trace(mVcdFile, ap_phi_mux_lhs_V_phi_fu_194_p8, "ap_phi_mux_lhs_V_phi_fu_194_p8");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, arp_in_reg_valid_V_l_load_fu_238_p1, "arp_in_reg_valid_V_l_load_fu_238_p1");
    sc_trace(mVcdFile, icmp_ln879_fu_272_p2, "icmp_ln879_fu_272_p2");
    sc_trace(mVcdFile, icmp_ln879_1_fu_278_p2, "icmp_ln879_1_fu_278_p2");
    sc_trace(mVcdFile, and_ln72_1_fu_302_p2, "and_ln72_1_fu_302_p2");
    sc_trace(mVcdFile, p_Result_s_fu_425_p3, "p_Result_s_fu_425_p3");
    sc_trace(mVcdFile, icmp_ln879_5_fu_355_p2, "icmp_ln879_5_fu_355_p2");
    sc_trace(mVcdFile, icmp_ln879_6_fu_361_p2, "icmp_ln879_6_fu_361_p2");
    sc_trace(mVcdFile, icmp_ln879_2_fu_266_p2, "icmp_ln879_2_fu_266_p2");
    sc_trace(mVcdFile, rhs_V_load_fu_315_p1, "rhs_V_load_fu_315_p1");
    sc_trace(mVcdFile, p_Result_2_fu_397_p3, "p_Result_2_fu_397_p3");
    sc_trace(mVcdFile, and_ln79_1_fu_391_p2, "and_ln79_1_fu_391_p2");
    sc_trace(mVcdFile, icmp_ln879_7_fu_367_p2, "icmp_ln879_7_fu_367_p2");
    sc_trace(mVcdFile, p_Result_1_fu_439_p3, "p_Result_1_fu_439_p3");
    sc_trace(mVcdFile, ret_V_fu_319_p2, "ret_V_fu_319_p2");
    sc_trace(mVcdFile, trunc_ln647_fu_345_p1, "trunc_ln647_fu_345_p1");
    sc_trace(mVcdFile, trunc_ln647_2_fu_411_p1, "trunc_ln647_2_fu_411_p1");
    sc_trace(mVcdFile, trunc_ln647_1_fu_453_p1, "trunc_ln647_1_fu_453_p1");
    sc_trace(mVcdFile, trunc_ln647_3_fu_577_p1, "trunc_ln647_3_fu_577_p1");
    sc_trace(mVcdFile, arp_internal_resp_va_read_fu_126_p2, "arp_internal_resp_va_read_fu_126_p2");
    sc_trace(mVcdFile, icmp_ln879_4_fu_290_p2, "icmp_ln879_4_fu_290_p2");
    sc_trace(mVcdFile, and_ln72_fu_296_p2, "and_ln72_fu_296_p2");
    sc_trace(mVcdFile, icmp_ln879_3_fu_284_p2, "icmp_ln879_3_fu_284_p2");
    sc_trace(mVcdFile, icmp_ln879_9_fu_379_p2, "icmp_ln879_9_fu_379_p2");
    sc_trace(mVcdFile, and_ln79_fu_385_p2, "and_ln79_fu_385_p2");
    sc_trace(mVcdFile, icmp_ln879_8_fu_373_p2, "icmp_ln879_8_fu_373_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_103, "ap_condition_103");
    sc_trace(mVcdFile, ap_condition_77, "ap_condition_77");
#endif

    }
    mHdltvinHandle.open("arp_receive.hdltvin.dat");
    mHdltvoutHandle.open("arp_receive.hdltvout.dat");
}

arp_receive::~arp_receive() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void arp_receive::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_in_reg_dst_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arp_in_reg_dst_ip_V = trunc_ln647_3_fu_577_p1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_in_reg_dst_mac_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arp_in_reg_dst_mac_V = arp_in_data_V.read().range(79, 32);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_in_reg_fixed_hea = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arp_in_reg_fixed_hea = arp_in_data_V.read().range(223, 176);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_in_reg_opcode_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arp_in_reg_opcode_V = arp_in_data_V.read().range(175, 160);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_in_reg_src_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arp_in_reg_src_ip_V = arp_in_data_V.read().range(111, 80);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_in_reg_src_mac_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arp_in_reg_src_mac_V = arp_in_data_V.read().range(159, 112);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_in_reg_valid_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arp_in_reg_valid_V = arp_in_valid_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_internal_resp_re = ap_const_lv80_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arp_internal_resp_re = arp_internal_resp_Mac_IP_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_internal_resp_va = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, arp_internal_resp_va_read_fu_126_p2.read())) {
                arp_internal_resp_va = ap_const_lv1_1;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, arp_in_reg_valid_V_l_load_fu_238_p1.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_0, arp_internal_resp_va_read_fu_126_p2.read()))) {
                arp_internal_resp_va = ap_const_lv1_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arptable_addrout_reg = ap_const_lv8_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ap_condition_77.read(), ap_const_boolean_1)) {
                arptable_addrout_reg = trunc_ln647_1_fu_453_p1.read();
            } else if (esl_seteq<1,1,1>(ap_condition_103.read(), ap_const_boolean_1)) {
                arptable_addrout_reg = trunc_ln647_2_fu_411_p1.read();
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, arp_in_reg_valid_V_l_load_fu_238_p1.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, rhs_V_load_fu_315_p1.read()))) {
                arptable_addrout_reg = trunc_ln647_fu_345_p1.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arptable_dataout_reg = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arptable_dataout_reg = ret_V_fu_319_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arptable_dataout_reg_1 = ap_const_lv80_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ap_condition_77.read(), ap_const_boolean_1)) {
                arptable_dataout_reg_1 = p_Result_1_fu_439_p3.read();
            } else if (esl_seteq<1,1,1>(ap_condition_103.read(), ap_const_boolean_1)) {
                arptable_dataout_reg_1 = p_Result_2_fu_397_p3.read();
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, arp_in_reg_valid_V_l_load_fu_238_p1.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, rhs_V_load_fu_315_p1.read()))) {
                arptable_dataout_reg_1 = arp_internal_resp_re.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        call_for_responce_re = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_272_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_fu_278_p2.read()))) {
            call_for_responce_re = icmp_ln879_2_fu_266_p2.read();
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, arp_in_reg_valid_V_l_load_fu_238_p1.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_272_p2.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && 
                     esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_272_p2.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_1_fu_278_p2.read())))) {
            call_for_responce_re = ap_const_lv1_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        call_for_responce_re_1 = ap_const_lv80_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_5_fu_355_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_6_fu_361_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_2_fu_266_p2.read()))) {
            call_for_responce_re_1 = p_Result_s_fu_425_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_src_mac_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            eth_src_mac_V = arp_in_data_V.read().range(287, 240);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        myIPReg_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            myIPReg_V = myIP_V.read();
        }
    }
}

void arp_receive::thread_and_ln72_1_fu_302_p2() {
    and_ln72_1_fu_302_p2 = (and_ln72_fu_296_p2.read() & icmp_ln879_3_fu_284_p2.read());
}

void arp_receive::thread_and_ln72_fu_296_p2() {
    and_ln72_fu_296_p2 = (icmp_ln879_4_fu_290_p2.read() & icmp_ln879_2_fu_266_p2.read());
}

void arp_receive::thread_and_ln79_1_fu_391_p2() {
    and_ln79_1_fu_391_p2 = (and_ln79_fu_385_p2.read() & icmp_ln879_8_fu_373_p2.read());
}

void arp_receive::thread_and_ln79_fu_385_p2() {
    and_ln79_fu_385_p2 = (icmp_ln879_9_fu_379_p2.read() & icmp_ln879_2_fu_266_p2.read());
}

void arp_receive::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void arp_receive::thread_ap_condition_103() {
    ap_condition_103 = (((esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_5_fu_355_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_2_fu_266_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, and_ln79_1_fu_391_p2.read())) || 
  (esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_5_fu_355_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_6_fu_361_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_2_fu_266_p2.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_7_fu_367_p2.read()))) || (esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_5_fu_355_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, and_ln79_1_fu_391_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_6_fu_361_p2.read())));
}

void arp_receive::thread_ap_condition_77() {
    ap_condition_77 = (esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_5_fu_355_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_6_fu_361_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_2_fu_266_p2.read()));
}

void arp_receive::thread_ap_phi_mux_lhs_V_phi_fu_194_p8() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_272_p2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_1_fu_278_p2.read()))) {
        ap_phi_mux_lhs_V_phi_fu_194_p8 = and_ln72_1_fu_302_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_fu_272_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_1_fu_278_p2.read()))) {
        ap_phi_mux_lhs_V_phi_fu_194_p8 = ap_const_lv1_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, arp_in_reg_valid_V_l_load_fu_238_p1.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(arp_in_reg_valid_V_l_load_fu_238_p1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_272_p2.read())))) {
        ap_phi_mux_lhs_V_phi_fu_194_p8 = ap_const_lv1_0;
    } else {
        ap_phi_mux_lhs_V_phi_fu_194_p8 = "X";
    }
}

void arp_receive::thread_arp_in_reg_valid_V_l_load_fu_238_p1() {
    arp_in_reg_valid_V_l_load_fu_238_p1 = arp_in_reg_valid_V.read();
}

void arp_receive::thread_arp_internal_resp_va_read_fu_126_p2() {
    arp_internal_resp_va_read_fu_126_p2 = arp_internal_resp_valid_V.read();
}

void arp_receive::thread_arptable_addrout_V() {
    arptable_addrout_V = arptable_addrout_reg.read();
}

void arp_receive::thread_arptable_dataout_Mac_IP_V() {
    arptable_dataout_Mac_IP_V = arptable_dataout_reg_1.read();
}

void arp_receive::thread_arptable_dataout_valid_V() {
    arptable_dataout_valid_V = arptable_dataout_reg.read();
}

void arp_receive::thread_call_for_responce_Mac_IP_V() {
    call_for_responce_Mac_IP_V = call_for_responce_re_1.read();
}

void arp_receive::thread_call_for_responce_valid_V() {
    call_for_responce_valid_V = call_for_responce_re.read();
}

void arp_receive::thread_icmp_ln879_1_fu_278_p2() {
    icmp_ln879_1_fu_278_p2 = (!arp_in_reg_dst_ip_V.read().is_01() || !myIPReg_V.read().is_01())? sc_lv<1>(): sc_lv<1>(arp_in_reg_dst_ip_V.read() == myIPReg_V.read());
}

void arp_receive::thread_icmp_ln879_2_fu_266_p2() {
    icmp_ln879_2_fu_266_p2 = (!arp_in_reg_opcode_V.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<1>(): sc_lv<1>(arp_in_reg_opcode_V.read() == ap_const_lv16_1);
}

void arp_receive::thread_icmp_ln879_3_fu_284_p2() {
    icmp_ln879_3_fu_284_p2 = (!arp_in_reg_dst_mac_V.read().is_01() || !ap_const_lv48_FFFFFFFFFFFF.is_01())? sc_lv<1>(): sc_lv<1>(arp_in_reg_dst_mac_V.read() == ap_const_lv48_FFFFFFFFFFFF);
}

void arp_receive::thread_icmp_ln879_4_fu_290_p2() {
    icmp_ln879_4_fu_290_p2 = (!arp_in_reg_src_ip_V.read().is_01() || !arp_in_reg_dst_ip_V.read().is_01())? sc_lv<1>(): sc_lv<1>(arp_in_reg_src_ip_V.read() == arp_in_reg_dst_ip_V.read());
}

void arp_receive::thread_icmp_ln879_5_fu_355_p2() {
    icmp_ln879_5_fu_355_p2 = (!arp_in_reg_fixed_hea.read().is_01() || !ap_const_lv48_108000604.is_01())? sc_lv<1>(): sc_lv<1>(arp_in_reg_fixed_hea.read() == ap_const_lv48_108000604);
}

void arp_receive::thread_icmp_ln879_6_fu_361_p2() {
    icmp_ln879_6_fu_361_p2 = (!arp_in_reg_dst_ip_V.read().is_01() || !myIPReg_V.read().is_01())? sc_lv<1>(): sc_lv<1>(arp_in_reg_dst_ip_V.read() == myIPReg_V.read());
}

void arp_receive::thread_icmp_ln879_7_fu_367_p2() {
    icmp_ln879_7_fu_367_p2 = (!arp_in_reg_opcode_V.read().is_01() || !ap_const_lv16_2.is_01())? sc_lv<1>(): sc_lv<1>(arp_in_reg_opcode_V.read() == ap_const_lv16_2);
}

void arp_receive::thread_icmp_ln879_8_fu_373_p2() {
    icmp_ln879_8_fu_373_p2 = (!arp_in_reg_dst_mac_V.read().is_01() || !ap_const_lv48_FFFFFFFFFFFF.is_01())? sc_lv<1>(): sc_lv<1>(arp_in_reg_dst_mac_V.read() == ap_const_lv48_FFFFFFFFFFFF);
}

void arp_receive::thread_icmp_ln879_9_fu_379_p2() {
    icmp_ln879_9_fu_379_p2 = (!arp_in_reg_src_ip_V.read().is_01() || !arp_in_reg_dst_ip_V.read().is_01())? sc_lv<1>(): sc_lv<1>(arp_in_reg_src_ip_V.read() == arp_in_reg_dst_ip_V.read());
}

void arp_receive::thread_icmp_ln879_fu_272_p2() {
    icmp_ln879_fu_272_p2 = (!arp_in_reg_fixed_hea.read().is_01() || !ap_const_lv48_108000604.is_01())? sc_lv<1>(): sc_lv<1>(arp_in_reg_fixed_hea.read() == ap_const_lv48_108000604);
}

void arp_receive::thread_p_Result_1_fu_439_p3() {
    p_Result_1_fu_439_p3 = esl_concat<48,32>(arp_in_reg_src_mac_V.read(), arp_in_reg_src_ip_V.read());
}

void arp_receive::thread_p_Result_2_fu_397_p3() {
    p_Result_2_fu_397_p3 = esl_concat<48,32>(arp_in_reg_src_mac_V.read(), arp_in_reg_src_ip_V.read());
}

void arp_receive::thread_p_Result_s_fu_425_p3() {
    p_Result_s_fu_425_p3 = esl_concat<48,32>(eth_src_mac_V.read(), arp_in_reg_src_ip_V.read());
}

void arp_receive::thread_ret_V_fu_319_p2() {
    ret_V_fu_319_p2 = (arp_internal_resp_va.read() | ap_phi_mux_lhs_V_phi_fu_194_p8.read());
}

void arp_receive::thread_rhs_V_load_fu_315_p1() {
    rhs_V_load_fu_315_p1 = arp_internal_resp_va.read();
}

void arp_receive::thread_trunc_ln647_1_fu_453_p1() {
    trunc_ln647_1_fu_453_p1 = arp_in_reg_src_ip_V.read().range(8-1, 0);
}

void arp_receive::thread_trunc_ln647_2_fu_411_p1() {
    trunc_ln647_2_fu_411_p1 = arp_in_reg_src_ip_V.read().range(8-1, 0);
}

void arp_receive::thread_trunc_ln647_3_fu_577_p1() {
    trunc_ln647_3_fu_577_p1 = arp_in_data_V.read().range(32-1, 0);
}

void arp_receive::thread_trunc_ln647_fu_345_p1() {
    trunc_ln647_fu_345_p1 = arp_internal_resp_re.read().range(8-1, 0);
}

void arp_receive::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void arp_receive::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"myIP_V\" :  \"" << myIP_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arp_in_data_V\" :  \"" << arp_in_data_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arp_in_valid_V\" :  \"" << arp_in_valid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arp_internal_resp_Mac_IP_V\" :  \"" << arp_internal_resp_Mac_IP_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"arp_internal_resp_valid_V\" :  \"" << arp_internal_resp_valid_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"call_for_responce_Mac_IP_V\" :  \"" << call_for_responce_Mac_IP_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"call_for_responce_valid_V\" :  \"" << call_for_responce_valid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arptable_dataout_Mac_IP_V\" :  \"" << arptable_dataout_Mac_IP_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arptable_dataout_valid_V\" :  \"" << arptable_dataout_valid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arptable_addrout_V\" :  \"" << arptable_addrout_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

