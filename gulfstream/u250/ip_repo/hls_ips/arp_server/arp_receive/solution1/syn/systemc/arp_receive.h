// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _arp_receive_HH_
#define _arp_receive_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct arp_receive : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > myIP_V;
    sc_in< sc_lv<336> > arp_in_data_V;
    sc_in< sc_lv<1> > arp_in_valid_V;
    sc_in< sc_lv<80> > arp_internal_resp_Mac_IP_V;
    sc_in< sc_lv<1> > arp_internal_resp_valid_V;
    sc_out< sc_lv<80> > call_for_responce_Mac_IP_V;
    sc_out< sc_lv<1> > call_for_responce_valid_V;
    sc_out< sc_lv<80> > arptable_dataout_Mac_IP_V;
    sc_out< sc_lv<1> > arptable_dataout_valid_V;
    sc_out< sc_lv<8> > arptable_addrout_V;


    // Module declarations
    arp_receive(sc_module_name name);
    SC_HAS_PROCESS(arp_receive);

    ~arp_receive();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<80> > call_for_responce_re_1;
    sc_signal< sc_lv<1> > call_for_responce_re;
    sc_signal< sc_lv<80> > arptable_dataout_reg_1;
    sc_signal< sc_lv<1> > arptable_dataout_reg;
    sc_signal< sc_lv<8> > arptable_addrout_reg;
    sc_signal< sc_lv<1> > arp_in_reg_valid_V;
    sc_signal< sc_lv<48> > arp_in_reg_fixed_hea;
    sc_signal< sc_lv<32> > arp_in_reg_dst_ip_V;
    sc_signal< sc_lv<32> > myIPReg_V;
    sc_signal< sc_lv<16> > arp_in_reg_opcode_V;
    sc_signal< sc_lv<48> > arp_in_reg_dst_mac_V;
    sc_signal< sc_lv<32> > arp_in_reg_src_ip_V;
    sc_signal< sc_lv<1> > arp_internal_resp_va;
    sc_signal< sc_lv<48> > arp_in_reg_src_mac_V;
    sc_signal< sc_lv<48> > eth_src_mac_V;
    sc_signal< sc_lv<80> > arp_internal_resp_re;
    sc_signal< sc_lv<1> > ap_phi_mux_lhs_V_phi_fu_194_p8;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > arp_in_reg_valid_V_l_load_fu_238_p1;
    sc_signal< sc_lv<1> > icmp_ln879_fu_272_p2;
    sc_signal< sc_lv<1> > icmp_ln879_1_fu_278_p2;
    sc_signal< sc_lv<1> > and_ln72_1_fu_302_p2;
    sc_signal< sc_lv<80> > p_Result_s_fu_425_p3;
    sc_signal< sc_lv<1> > icmp_ln879_5_fu_355_p2;
    sc_signal< sc_lv<1> > icmp_ln879_6_fu_361_p2;
    sc_signal< sc_lv<1> > icmp_ln879_2_fu_266_p2;
    sc_signal< sc_lv<1> > rhs_V_load_fu_315_p1;
    sc_signal< sc_lv<80> > p_Result_2_fu_397_p3;
    sc_signal< sc_lv<1> > and_ln79_1_fu_391_p2;
    sc_signal< sc_lv<1> > icmp_ln879_7_fu_367_p2;
    sc_signal< sc_lv<80> > p_Result_1_fu_439_p3;
    sc_signal< sc_lv<1> > ret_V_fu_319_p2;
    sc_signal< sc_lv<8> > trunc_ln647_fu_345_p1;
    sc_signal< sc_lv<8> > trunc_ln647_2_fu_411_p1;
    sc_signal< sc_lv<8> > trunc_ln647_1_fu_453_p1;
    sc_signal< sc_lv<32> > trunc_ln647_3_fu_577_p1;
    sc_signal< sc_lv<1> > arp_internal_resp_va_read_fu_126_p2;
    sc_signal< sc_lv<1> > icmp_ln879_4_fu_290_p2;
    sc_signal< sc_lv<1> > and_ln72_fu_296_p2;
    sc_signal< sc_lv<1> > icmp_ln879_3_fu_284_p2;
    sc_signal< sc_lv<1> > icmp_ln879_9_fu_379_p2;
    sc_signal< sc_lv<1> > and_ln79_fu_385_p2;
    sc_signal< sc_lv<1> > icmp_ln879_8_fu_373_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< bool > ap_condition_103;
    sc_signal< bool > ap_condition_77;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<80> ap_const_lv80_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<48> ap_const_lv48_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<16> ap_const_lv16_1;
    static const sc_lv<48> ap_const_lv48_108000604;
    static const sc_lv<48> ap_const_lv48_FFFFFFFFFFFF;
    static const sc_lv<16> ap_const_lv16_2;
    static const sc_lv<32> ap_const_lv32_F0;
    static const sc_lv<32> ap_const_lv32_11F;
    static const sc_lv<32> ap_const_lv32_B0;
    static const sc_lv<32> ap_const_lv32_DF;
    static const sc_lv<32> ap_const_lv32_A0;
    static const sc_lv<32> ap_const_lv32_AF;
    static const sc_lv<32> ap_const_lv32_70;
    static const sc_lv<32> ap_const_lv32_9F;
    static const sc_lv<32> ap_const_lv32_50;
    static const sc_lv<32> ap_const_lv32_6F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_4F;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln72_1_fu_302_p2();
    void thread_and_ln72_fu_296_p2();
    void thread_and_ln79_1_fu_391_p2();
    void thread_and_ln79_fu_385_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_condition_103();
    void thread_ap_condition_77();
    void thread_ap_phi_mux_lhs_V_phi_fu_194_p8();
    void thread_arp_in_reg_valid_V_l_load_fu_238_p1();
    void thread_arp_internal_resp_va_read_fu_126_p2();
    void thread_arptable_addrout_V();
    void thread_arptable_dataout_Mac_IP_V();
    void thread_arptable_dataout_valid_V();
    void thread_call_for_responce_Mac_IP_V();
    void thread_call_for_responce_valid_V();
    void thread_icmp_ln879_1_fu_278_p2();
    void thread_icmp_ln879_2_fu_266_p2();
    void thread_icmp_ln879_3_fu_284_p2();
    void thread_icmp_ln879_4_fu_290_p2();
    void thread_icmp_ln879_5_fu_355_p2();
    void thread_icmp_ln879_6_fu_361_p2();
    void thread_icmp_ln879_7_fu_367_p2();
    void thread_icmp_ln879_8_fu_373_p2();
    void thread_icmp_ln879_9_fu_379_p2();
    void thread_icmp_ln879_fu_272_p2();
    void thread_p_Result_1_fu_439_p3();
    void thread_p_Result_2_fu_397_p3();
    void thread_p_Result_s_fu_425_p3();
    void thread_ret_V_fu_319_p2();
    void thread_rhs_V_load_fu_315_p1();
    void thread_trunc_ln647_1_fu_453_p1();
    void thread_trunc_ln647_2_fu_411_p1();
    void thread_trunc_ln647_3_fu_577_p1();
    void thread_trunc_ln647_fu_345_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
