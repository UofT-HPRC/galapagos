// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ether_protocol_assembler.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ether_protocol_assembler::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> ether_protocol_assembler::ap_ST_fsm_state1 = "1";
const sc_lv<512> ether_protocol_assembler::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> ether_protocol_assembler::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> ether_protocol_assembler::ap_const_lv1_0 = "0";
const sc_lv<1> ether_protocol_assembler::ap_const_lv1_1 = "1";
const sc_lv<32> ether_protocol_assembler::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic ether_protocol_assembler::ap_const_logic_0 = sc_dt::Log_0;
const bool ether_protocol_assembler::ap_const_boolean_1 = true;

ether_protocol_assembler::ether_protocol_assembler(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_and_ln69_fu_265_p2);
    sensitive << ( eth_arp_in_valid_V );
    sensitive << ( output_sw_reg_V );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_phi_mux_lhs_V_3_phi_fu_177_p8);
    sensitive << ( output_sw_reg_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_fu_253_p2 );
    sensitive << ( and_ln69_fu_265_p2 );
    sensitive << ( or_ln73_fu_277_p2 );

    SC_METHOD(thread_arp_ready_V);
    sensitive << ( eth_out_ready_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_2_fu_369_p2 );

    SC_METHOD(thread_eth_ip_in_data_V_eth_fu_313_p3);
    sensitive << ( eth_arp_in_data_V );
    sensitive << ( eth_ip_in_data_V );
    sensitive << ( ap_phi_mux_lhs_V_3_phi_fu_177_p8 );

    SC_METHOD(thread_eth_ip_in_keep_V_eth_fu_321_p3);
    sensitive << ( eth_arp_in_keep_V );
    sensitive << ( eth_ip_in_keep_V );
    sensitive << ( ap_phi_mux_lhs_V_3_phi_fu_177_p8 );

    SC_METHOD(thread_eth_ip_in_last_V_eth_fu_337_p3);
    sensitive << ( eth_arp_in_last_V );
    sensitive << ( eth_ip_in_last_V );
    sensitive << ( ap_phi_mux_lhs_V_3_phi_fu_177_p8 );

    SC_METHOD(thread_eth_ip_in_valid_V_et_fu_329_p3);
    sensitive << ( eth_arp_in_valid_V );
    sensitive << ( eth_ip_in_valid_V );
    sensitive << ( ap_phi_mux_lhs_V_3_phi_fu_177_p8 );

    SC_METHOD(thread_eth_out_data_V);
    sensitive << ( eth_out_ready_V );
    sensitive << ( eth_out_reg_data_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_eth_out_keep_V);
    sensitive << ( eth_out_ready_V );
    sensitive << ( eth_out_reg_keep_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_eth_out_last_V);
    sensitive << ( eth_out_ready_V );
    sensitive << ( eth_out_reg_last_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_eth_out_ready_V_read_read_fu_78_p2);
    sensitive << ( eth_out_ready_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_eth_out_valid_V);
    sensitive << ( eth_out_ready_V );
    sensitive << ( eth_out_reg_valid_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ip_ready_V);
    sensitive << ( eth_out_ready_V );
    sensitive << ( ap_phi_mux_lhs_V_3_phi_fu_177_p8 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_lhs_V_2_fu_369_p2);
    sensitive << ( ap_phi_mux_lhs_V_3_phi_fu_177_p8 );

    SC_METHOD(thread_or_ln73_fu_277_p2);
    sensitive << ( output_sw_reg_V );
    sensitive << ( xor_ln73_fu_271_p2 );

    SC_METHOD(thread_ret_V_2_fu_289_p2);
    sensitive << ( eth_arp_in_valid_V );
    sensitive << ( eth_ip_in_valid_V );

    SC_METHOD(thread_ret_V_5_fu_243_p2);
    sensitive << ( eth_out_reg_valid_V );
    sensitive << ( eth_out_reg_last_V );

    SC_METHOD(thread_ret_V_fu_253_p2);
    sensitive << ( arbiter_V );
    sensitive << ( ret_V_5_fu_243_p2 );

    SC_METHOD(thread_xor_ln73_fu_271_p2);
    sensitive << ( eth_ip_in_valid_V );

    SC_METHOD(thread_xor_ln80_fu_295_p2);
    sensitive << ( ret_V_2_fu_289_p2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    eth_out_reg_data_V = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    eth_out_reg_keep_V = "0000000000000000000000000000000000000000000000000000000000000000";
    eth_out_reg_valid_V = "0";
    eth_out_reg_last_V = "0";
    arbiter_V = "1";
    output_sw_reg_V = "0";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ether_protocol_assembler_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, eth_arp_in_data_V, "(port)eth_arp_in_data_V");
    sc_trace(mVcdFile, eth_arp_in_keep_V, "(port)eth_arp_in_keep_V");
    sc_trace(mVcdFile, eth_arp_in_valid_V, "(port)eth_arp_in_valid_V");
    sc_trace(mVcdFile, eth_arp_in_last_V, "(port)eth_arp_in_last_V");
    sc_trace(mVcdFile, arp_ready_V, "(port)arp_ready_V");
    sc_trace(mVcdFile, eth_ip_in_data_V, "(port)eth_ip_in_data_V");
    sc_trace(mVcdFile, eth_ip_in_keep_V, "(port)eth_ip_in_keep_V");
    sc_trace(mVcdFile, eth_ip_in_valid_V, "(port)eth_ip_in_valid_V");
    sc_trace(mVcdFile, eth_ip_in_last_V, "(port)eth_ip_in_last_V");
    sc_trace(mVcdFile, ip_ready_V, "(port)ip_ready_V");
    sc_trace(mVcdFile, eth_out_data_V, "(port)eth_out_data_V");
    sc_trace(mVcdFile, eth_out_keep_V, "(port)eth_out_keep_V");
    sc_trace(mVcdFile, eth_out_valid_V, "(port)eth_out_valid_V");
    sc_trace(mVcdFile, eth_out_last_V, "(port)eth_out_last_V");
    sc_trace(mVcdFile, eth_out_ready_V, "(port)eth_out_ready_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, eth_out_reg_data_V, "eth_out_reg_data_V");
    sc_trace(mVcdFile, eth_out_reg_keep_V, "eth_out_reg_keep_V");
    sc_trace(mVcdFile, eth_out_reg_valid_V, "eth_out_reg_valid_V");
    sc_trace(mVcdFile, eth_out_reg_last_V, "eth_out_reg_last_V");
    sc_trace(mVcdFile, arbiter_V, "arbiter_V");
    sc_trace(mVcdFile, output_sw_reg_V, "output_sw_reg_V");
    sc_trace(mVcdFile, ap_phi_mux_lhs_V_3_phi_fu_177_p8, "ap_phi_mux_lhs_V_3_phi_fu_177_p8");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ret_V_fu_253_p2, "ret_V_fu_253_p2");
    sc_trace(mVcdFile, and_ln69_fu_265_p2, "and_ln69_fu_265_p2");
    sc_trace(mVcdFile, or_ln73_fu_277_p2, "or_ln73_fu_277_p2");
    sc_trace(mVcdFile, eth_ip_in_data_V_eth_fu_313_p3, "eth_ip_in_data_V_eth_fu_313_p3");
    sc_trace(mVcdFile, eth_out_ready_V_read_read_fu_78_p2, "eth_out_ready_V_read_read_fu_78_p2");
    sc_trace(mVcdFile, eth_ip_in_keep_V_eth_fu_321_p3, "eth_ip_in_keep_V_eth_fu_321_p3");
    sc_trace(mVcdFile, eth_ip_in_valid_V_et_fu_329_p3, "eth_ip_in_valid_V_et_fu_329_p3");
    sc_trace(mVcdFile, eth_ip_in_last_V_eth_fu_337_p3, "eth_ip_in_last_V_eth_fu_337_p3");
    sc_trace(mVcdFile, xor_ln80_fu_295_p2, "xor_ln80_fu_295_p2");
    sc_trace(mVcdFile, ret_V_5_fu_243_p2, "ret_V_5_fu_243_p2");
    sc_trace(mVcdFile, xor_ln73_fu_271_p2, "xor_ln73_fu_271_p2");
    sc_trace(mVcdFile, ret_V_2_fu_289_p2, "ret_V_2_fu_289_p2");
    sc_trace(mVcdFile, lhs_V_2_fu_369_p2, "lhs_V_2_fu_369_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("ether_protocol_assembler.hdltvin.dat");
    mHdltvoutHandle.open("ether_protocol_assembler.hdltvout.dat");
}

ether_protocol_assembler::~ether_protocol_assembler() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ether_protocol_assembler::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arbiter_V = ap_const_lv1_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_fu_253_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, and_ln69_fu_265_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, or_ln73_fu_277_p2.read()))) {
            arbiter_V = xor_ln80_fu_295_p2.read();
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_fu_253_p2.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_1, and_ln69_fu_265_p2.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_fu_253_p2.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, and_ln69_fu_265_p2.read()) && 
                     esl_seteq<1,1,1>(ap_const_lv1_0, or_ln73_fu_277_p2.read())))) {
            arbiter_V = ap_const_lv1_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_out_reg_data_V = ap_const_lv512_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, eth_out_ready_V_read_read_fu_78_p2.read()))) {
            eth_out_reg_data_V = eth_ip_in_data_V_eth_fu_313_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_out_reg_keep_V = ap_const_lv64_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, eth_out_ready_V_read_read_fu_78_p2.read()))) {
            eth_out_reg_keep_V = eth_ip_in_keep_V_eth_fu_321_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_out_reg_last_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, eth_out_ready_V_read_read_fu_78_p2.read()))) {
            eth_out_reg_last_V = eth_ip_in_last_V_eth_fu_337_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        eth_out_reg_valid_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, eth_out_ready_V_read_read_fu_78_p2.read()))) {
            eth_out_reg_valid_V = eth_ip_in_valid_V_et_fu_329_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        output_sw_reg_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_fu_253_p2.read()))) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, and_ln69_fu_265_p2.read())) {
                output_sw_reg_V = ap_const_lv1_0;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, and_ln69_fu_265_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_0, or_ln73_fu_277_p2.read()))) {
                output_sw_reg_V = ap_const_lv1_1;
            }
        }
    }
}

void ether_protocol_assembler::thread_and_ln69_fu_265_p2() {
    and_ln69_fu_265_p2 = (output_sw_reg_V.read() & eth_arp_in_valid_V.read());
}

void ether_protocol_assembler::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ether_protocol_assembler::thread_ap_phi_mux_lhs_V_3_phi_fu_177_p8() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_fu_253_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, and_ln69_fu_265_p2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, or_ln73_fu_277_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_fu_253_p2.read())))) {
        ap_phi_mux_lhs_V_3_phi_fu_177_p8 = output_sw_reg_V.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_fu_253_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, and_ln69_fu_265_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, or_ln73_fu_277_p2.read()))) {
        ap_phi_mux_lhs_V_3_phi_fu_177_p8 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_fu_253_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, and_ln69_fu_265_p2.read()))) {
        ap_phi_mux_lhs_V_3_phi_fu_177_p8 = ap_const_lv1_0;
    } else {
        ap_phi_mux_lhs_V_3_phi_fu_177_p8 = "X";
    }
}

void ether_protocol_assembler::thread_arp_ready_V() {
    arp_ready_V = (eth_out_ready_V.read() & lhs_V_2_fu_369_p2.read());
}

void ether_protocol_assembler::thread_eth_ip_in_data_V_eth_fu_313_p3() {
    eth_ip_in_data_V_eth_fu_313_p3 = (!ap_phi_mux_lhs_V_3_phi_fu_177_p8.read()[0].is_01())? sc_lv<512>(): ((ap_phi_mux_lhs_V_3_phi_fu_177_p8.read()[0].to_bool())? eth_ip_in_data_V.read(): eth_arp_in_data_V.read());
}

void ether_protocol_assembler::thread_eth_ip_in_keep_V_eth_fu_321_p3() {
    eth_ip_in_keep_V_eth_fu_321_p3 = (!ap_phi_mux_lhs_V_3_phi_fu_177_p8.read()[0].is_01())? sc_lv<64>(): ((ap_phi_mux_lhs_V_3_phi_fu_177_p8.read()[0].to_bool())? eth_ip_in_keep_V.read(): eth_arp_in_keep_V.read());
}

void ether_protocol_assembler::thread_eth_ip_in_last_V_eth_fu_337_p3() {
    eth_ip_in_last_V_eth_fu_337_p3 = (!ap_phi_mux_lhs_V_3_phi_fu_177_p8.read()[0].is_01())? sc_lv<1>(): ((ap_phi_mux_lhs_V_3_phi_fu_177_p8.read()[0].to_bool())? eth_ip_in_last_V.read(): eth_arp_in_last_V.read());
}

void ether_protocol_assembler::thread_eth_ip_in_valid_V_et_fu_329_p3() {
    eth_ip_in_valid_V_et_fu_329_p3 = (!ap_phi_mux_lhs_V_3_phi_fu_177_p8.read()[0].is_01())? sc_lv<1>(): ((ap_phi_mux_lhs_V_3_phi_fu_177_p8.read()[0].to_bool())? eth_ip_in_valid_V.read(): eth_arp_in_valid_V.read());
}

void ether_protocol_assembler::thread_eth_out_data_V() {
    eth_out_data_V = (!eth_out_ready_V.read()[0].is_01())? sc_lv<512>(): ((eth_out_ready_V.read()[0].to_bool())? eth_out_reg_data_V.read(): ap_const_lv512_lc_1);
}

void ether_protocol_assembler::thread_eth_out_keep_V() {
    eth_out_keep_V = (!eth_out_ready_V.read()[0].is_01())? sc_lv<64>(): ((eth_out_ready_V.read()[0].to_bool())? eth_out_reg_keep_V.read(): ap_const_lv64_0);
}

void ether_protocol_assembler::thread_eth_out_last_V() {
    eth_out_last_V = (eth_out_reg_last_V.read() & eth_out_ready_V.read());
}

void ether_protocol_assembler::thread_eth_out_ready_V_read_read_fu_78_p2() {
    eth_out_ready_V_read_read_fu_78_p2 = eth_out_ready_V.read();
}

void ether_protocol_assembler::thread_eth_out_valid_V() {
    eth_out_valid_V = (eth_out_reg_valid_V.read() & eth_out_ready_V.read());
}

void ether_protocol_assembler::thread_ip_ready_V() {
    ip_ready_V = (ap_phi_mux_lhs_V_3_phi_fu_177_p8.read() & eth_out_ready_V.read());
}

void ether_protocol_assembler::thread_lhs_V_2_fu_369_p2() {
    lhs_V_2_fu_369_p2 = (ap_phi_mux_lhs_V_3_phi_fu_177_p8.read() ^ ap_const_lv1_1);
}

void ether_protocol_assembler::thread_or_ln73_fu_277_p2() {
    or_ln73_fu_277_p2 = (output_sw_reg_V.read() | xor_ln73_fu_271_p2.read());
}

void ether_protocol_assembler::thread_ret_V_2_fu_289_p2() {
    ret_V_2_fu_289_p2 = (eth_arp_in_valid_V.read() | eth_ip_in_valid_V.read());
}

void ether_protocol_assembler::thread_ret_V_5_fu_243_p2() {
    ret_V_5_fu_243_p2 = (eth_out_reg_valid_V.read() & eth_out_reg_last_V.read());
}

void ether_protocol_assembler::thread_ret_V_fu_253_p2() {
    ret_V_fu_253_p2 = (arbiter_V.read() | ret_V_5_fu_243_p2.read());
}

void ether_protocol_assembler::thread_xor_ln73_fu_271_p2() {
    xor_ln73_fu_271_p2 = (eth_ip_in_valid_V.read() ^ ap_const_lv1_1);
}

void ether_protocol_assembler::thread_xor_ln80_fu_295_p2() {
    xor_ln80_fu_295_p2 = (ret_V_2_fu_289_p2.read() ^ ap_const_lv1_1);
}

void ether_protocol_assembler::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void ether_protocol_assembler::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_arp_in_data_V\" :  \"" << eth_arp_in_data_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_arp_in_keep_V\" :  \"" << eth_arp_in_keep_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_arp_in_valid_V\" :  \"" << eth_arp_in_valid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_arp_in_last_V\" :  \"" << eth_arp_in_last_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"arp_ready_V\" :  \"" << arp_ready_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_ip_in_data_V\" :  \"" << eth_ip_in_data_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_ip_in_keep_V\" :  \"" << eth_ip_in_keep_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_ip_in_valid_V\" :  \"" << eth_ip_in_valid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_ip_in_last_V\" :  \"" << eth_ip_in_last_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ip_ready_V\" :  \"" << ip_ready_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"eth_out_data_V\" :  \"" << eth_out_data_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"eth_out_keep_V\" :  \"" << eth_out_keep_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"eth_out_valid_V\" :  \"" << eth_out_valid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"eth_out_last_V\" :  \"" << eth_out_last_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"eth_out_ready_V\" :  \"" << eth_out_ready_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

