// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ether_protocol_assembler_HH_
#define _ether_protocol_assembler_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ether_protocol_assembler : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<512> > eth_arp_in_data_V;
    sc_in< sc_lv<64> > eth_arp_in_keep_V;
    sc_in< sc_lv<1> > eth_arp_in_valid_V;
    sc_in< sc_lv<1> > eth_arp_in_last_V;
    sc_out< sc_lv<1> > arp_ready_V;
    sc_in< sc_lv<512> > eth_ip_in_data_V;
    sc_in< sc_lv<64> > eth_ip_in_keep_V;
    sc_in< sc_lv<1> > eth_ip_in_valid_V;
    sc_in< sc_lv<1> > eth_ip_in_last_V;
    sc_out< sc_lv<1> > ip_ready_V;
    sc_out< sc_lv<512> > eth_out_data_V;
    sc_out< sc_lv<64> > eth_out_keep_V;
    sc_out< sc_lv<1> > eth_out_valid_V;
    sc_out< sc_lv<1> > eth_out_last_V;
    sc_in< sc_lv<1> > eth_out_ready_V;


    // Module declarations
    ether_protocol_assembler(sc_module_name name);
    SC_HAS_PROCESS(ether_protocol_assembler);

    ~ether_protocol_assembler();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<512> > eth_out_reg_data_V;
    sc_signal< sc_lv<64> > eth_out_reg_keep_V;
    sc_signal< sc_lv<1> > eth_out_reg_valid_V;
    sc_signal< sc_lv<1> > eth_out_reg_last_V;
    sc_signal< sc_lv<1> > arbiter_V;
    sc_signal< sc_lv<1> > output_sw_reg_V;
    sc_signal< sc_lv<1> > ap_phi_mux_lhs_V_3_phi_fu_177_p8;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > ret_V_fu_253_p2;
    sc_signal< sc_lv<1> > and_ln69_fu_265_p2;
    sc_signal< sc_lv<1> > or_ln73_fu_277_p2;
    sc_signal< sc_lv<512> > eth_ip_in_data_V_eth_fu_313_p3;
    sc_signal< sc_lv<1> > eth_out_ready_V_read_read_fu_78_p2;
    sc_signal< sc_lv<64> > eth_ip_in_keep_V_eth_fu_321_p3;
    sc_signal< sc_lv<1> > eth_ip_in_valid_V_et_fu_329_p3;
    sc_signal< sc_lv<1> > eth_ip_in_last_V_eth_fu_337_p3;
    sc_signal< sc_lv<1> > xor_ln80_fu_295_p2;
    sc_signal< sc_lv<1> > ret_V_5_fu_243_p2;
    sc_signal< sc_lv<1> > xor_ln73_fu_271_p2;
    sc_signal< sc_lv<1> > ret_V_2_fu_289_p2;
    sc_signal< sc_lv<1> > lhs_V_2_fu_369_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<512> ap_const_lv512_lc_1;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_and_ln69_fu_265_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_phi_mux_lhs_V_3_phi_fu_177_p8();
    void thread_arp_ready_V();
    void thread_eth_ip_in_data_V_eth_fu_313_p3();
    void thread_eth_ip_in_keep_V_eth_fu_321_p3();
    void thread_eth_ip_in_last_V_eth_fu_337_p3();
    void thread_eth_ip_in_valid_V_et_fu_329_p3();
    void thread_eth_out_data_V();
    void thread_eth_out_keep_V();
    void thread_eth_out_last_V();
    void thread_eth_out_ready_V_read_read_fu_78_p2();
    void thread_eth_out_valid_V();
    void thread_ip_ready_V();
    void thread_lhs_V_2_fu_369_p2();
    void thread_or_ln73_fu_277_p2();
    void thread_ret_V_2_fu_289_p2();
    void thread_ret_V_5_fu_243_p2();
    void thread_ret_V_fu_253_p2();
    void thread_xor_ln73_fu_271_p2();
    void thread_xor_ln80_fu_295_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
