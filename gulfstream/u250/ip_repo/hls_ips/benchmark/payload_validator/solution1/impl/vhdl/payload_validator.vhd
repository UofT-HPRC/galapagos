-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity payload_validator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    clear_V : IN STD_LOGIC_VECTOR (0 downto 0);
    packet_num_V : IN STD_LOGIC_VECTOR (31 downto 0);
    counter_in_V : IN STD_LOGIC_VECTOR (31 downto 0);
    s_axis_data_V : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_keep_V : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    latency_sum_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    time_elapse_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    curr_cnt_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    done_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    error_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of payload_validator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "payload_validator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.553125,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=198,HLS_SYN_LUT=331,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal packet_cnt_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal error_reg_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal done_reg_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal latency_sum_reg_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal time_elapse_reg_V : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal clear_reg_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal IN_PACKET_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal latency_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal init_reg_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal add_ln214_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ret_V_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_6_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_3_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_352_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln700_1_fu_270_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_fu_250_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_1_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_5_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln214_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln700_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal lhs_V_2_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln215_fu_322_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_3_fu_332_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln647_fu_342_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_4_fu_326_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_4_fu_366_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_59 : BOOLEAN;


begin




    IN_PACKET_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                IN_PACKET_V <= ap_const_lv1_0;
            else
                if ((((ret_V_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ret_V_6_fu_394_p2 = ap_const_lv1_1) and (ret_V_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    IN_PACKET_V <= ap_const_lv1_0;
                elsif (((ret_V_5_fu_304_p2 = ap_const_lv1_1) and (ret_V_6_fu_394_p2 = ap_const_lv1_0) and (ret_V_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    IN_PACKET_V <= ap_const_lv1_1;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    clear_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                clear_reg_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    clear_reg_V <= clear_V;
                end if; 
            end if;
        end if;
    end process;


    done_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                done_reg_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_fu_228_p2 = ap_const_lv1_1)) then 
                        done_reg_V <= ap_const_lv1_0;
                    elsif ((ret_V_fu_228_p2 = ap_const_lv1_0)) then 
                        done_reg_V <= icmp_ln879_1_fu_282_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    error_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                error_reg_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_fu_228_p2 = ap_const_lv1_1)) then 
                        error_reg_V <= ap_const_lv1_0;
                    elsif ((ap_const_boolean_1 = ap_condition_59)) then 
                        error_reg_V <= ap_const_lv1_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    init_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                init_reg_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_fu_228_p2 = ap_const_lv1_1)) then 
                        init_reg_V <= ap_const_lv1_0;
                    elsif (((ret_V_5_fu_304_p2 = ap_const_lv1_1) and (ret_V_fu_228_p2 = ap_const_lv1_0))) then 
                        init_reg_V <= ap_const_lv1_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    latency_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                latency_V <= ap_const_lv32_0;
            else
                if (((icmp_ln879_fu_346_p2 = ap_const_lv1_1) and (tmp_fu_352_p3 = ap_const_lv1_1) and (ret_V_3_fu_316_p2 = ap_const_lv1_1) and (ret_V_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    latency_V <= sub_ln214_fu_376_p2;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (((ret_V_3_fu_316_p2 = ap_const_lv1_1) and (icmp_ln879_fu_346_p2 = ap_const_lv1_0) and (ret_V_fu_228_p2 = ap_const_lv1_0)) or ((ret_V_3_fu_316_p2 = ap_const_lv1_1) and (tmp_fu_352_p3 = ap_const_lv1_0) and (ret_V_fu_228_p2 = ap_const_lv1_0)))) or ((ret_V_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ret_V_3_fu_316_p2 = ap_const_lv1_0) and (ret_V_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    latency_V <= ap_const_lv32_0;
                end if; 
            end if;
        end if;
    end process;


    latency_sum_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                latency_sum_reg_V <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_fu_228_p2 = ap_const_lv1_1)) then 
                        latency_sum_reg_V <= ap_const_lv64_0;
                    elsif ((ret_V_fu_228_p2 = ap_const_lv1_0)) then 
                        latency_sum_reg_V <= add_ln700_1_fu_270_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    packet_cnt_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                packet_cnt_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_fu_228_p2 = ap_const_lv1_1)) then 
                        packet_cnt_V <= ap_const_lv32_0;
                    elsif (((ret_V_6_fu_394_p2 = ap_const_lv1_1) and (ret_V_fu_228_p2 = ap_const_lv1_0))) then 
                        packet_cnt_V <= add_ln214_fu_191_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    time_elapse_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                time_elapse_reg_V <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_fu_228_p2 = ap_const_lv1_1)) then 
                        time_elapse_reg_V <= ap_const_lv64_0;
                    elsif (((ret_V_1_fu_244_p2 = ap_const_lv1_1) and (ret_V_fu_228_p2 = ap_const_lv1_0))) then 
                        time_elapse_reg_V <= add_ln700_fu_250_p2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln214_fu_191_p2 <= std_logic_vector(unsigned(packet_cnt_V) + unsigned(ap_const_lv32_1));
    add_ln700_1_fu_270_p2 <= std_logic_vector(unsigned(latency_sum_reg_V) + unsigned(zext_ln700_fu_266_p1));
    add_ln700_fu_250_p2 <= std_logic_vector(unsigned(time_elapse_reg_V) + unsigned(ap_const_lv64_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_condition_59_assign_proc : process(ret_V_fu_228_p2, ret_V_3_fu_316_p2, tmp_fu_352_p3, icmp_ln879_fu_346_p2)
    begin
                ap_condition_59 <= (((ret_V_3_fu_316_p2 = ap_const_lv1_1) and (icmp_ln879_fu_346_p2 = ap_const_lv1_0) and (ret_V_fu_228_p2 = ap_const_lv1_0)) or ((ret_V_3_fu_316_p2 = ap_const_lv1_1) and (tmp_fu_352_p3 = ap_const_lv1_0) and (ret_V_fu_228_p2 = ap_const_lv1_0)));
    end process;

    curr_cnt_V <= std_logic_vector(unsigned(packet_cnt_V) + unsigned(ap_const_lv32_1));
    done_V <= done_reg_V;
    error_V <= error_reg_V;
    icmp_ln879_1_fu_282_p2 <= "1" when (packet_cnt_V = packet_num_V) else "0";
    icmp_ln879_fu_346_p2 <= "1" when (zext_ln647_fu_342_p1 = ret_V_4_fu_326_p2) else "0";
    latency_sum_V <= latency_sum_reg_V;
    lhs_V_2_fu_298_p2 <= (ap_const_lv1_1 xor IN_PACKET_V);
    lhs_V_fu_222_p2 <= (clear_reg_V xor ap_const_lv1_1);
    p_Result_3_fu_332_p4 <= s_axis_data_V(511 downto 480);
    p_Result_4_fu_366_p4 <= s_axis_data_V(479 downto 448);
    ret_V_1_fu_244_p2 <= (rhs_V_fu_234_p2 and init_reg_V);
    ret_V_3_fu_316_p2 <= (rhs_V_1_fu_310_p2 and ret_V_5_fu_304_p2);
    ret_V_4_fu_326_p2 <= std_logic_vector(unsigned(zext_ln215_fu_322_p1) + unsigned(ap_const_lv33_1));
    ret_V_5_fu_304_p2 <= (s_axis_valid_V and lhs_V_2_fu_298_p2);
    ret_V_6_fu_394_p2 <= (s_axis_valid_V and s_axis_last_V);
    ret_V_fu_228_p2 <= (lhs_V_fu_222_p2 and clear_V);
    rhs_V_1_fu_310_p2 <= (error_reg_V xor ap_const_lv1_1);
    rhs_V_fu_234_p2 <= (done_reg_V xor ap_const_lv1_1);
    sub_ln214_fu_376_p2 <= std_logic_vector(unsigned(counter_in_V) - unsigned(p_Result_4_fu_366_p4));
    time_elapse_V <= time_elapse_reg_V;
    tmp_fu_352_p3 <= s_axis_keep_V(56 downto 56);
    zext_ln215_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(packet_cnt_V),33));
    zext_ln647_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_fu_332_p4),33));
    zext_ln700_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(latency_V),64));
end behav;
