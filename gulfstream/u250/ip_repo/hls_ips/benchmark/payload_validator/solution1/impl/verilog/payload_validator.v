// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="payload_validator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.553125,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=198,HLS_SYN_LUT=331,HLS_VERSION=2019_1}" *)

module payload_validator (
        ap_clk,
        ap_rst,
        clear_V,
        packet_num_V,
        counter_in_V,
        s_axis_data_V,
        s_axis_keep_V,
        s_axis_last_V,
        s_axis_valid_V,
        latency_sum_V,
        time_elapse_V,
        curr_cnt_V,
        done_V,
        error_V
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [0:0] clear_V;
input  [31:0] packet_num_V;
input  [31:0] counter_in_V;
input  [511:0] s_axis_data_V;
input  [63:0] s_axis_keep_V;
input  [0:0] s_axis_last_V;
input  [0:0] s_axis_valid_V;
output  [63:0] latency_sum_V;
output  [63:0] time_elapse_V;
output  [31:0] curr_cnt_V;
output  [0:0] done_V;
output  [0:0] error_V;

reg   [31:0] packet_cnt_V;
reg   [0:0] error_reg_V;
reg   [0:0] done_reg_V;
reg   [63:0] latency_sum_reg_V;
reg   [63:0] time_elapse_reg_V;
reg   [0:0] clear_reg_V;
reg   [0:0] IN_PACKET_V;
reg   [31:0] latency_V;
reg   [0:0] init_reg_V;
wire   [31:0] add_ln214_fu_191_p2;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] ret_V_fu_228_p2;
wire   [0:0] ret_V_6_fu_394_p2;
wire   [0:0] ret_V_3_fu_316_p2;
wire   [0:0] tmp_fu_352_p3;
wire   [0:0] icmp_ln879_fu_346_p2;
wire   [0:0] icmp_ln879_1_fu_282_p2;
wire   [63:0] add_ln700_1_fu_270_p2;
wire   [63:0] add_ln700_fu_250_p2;
wire   [0:0] ret_V_1_fu_244_p2;
wire   [0:0] ret_V_5_fu_304_p2;
wire   [31:0] sub_ln214_fu_376_p2;
wire   [0:0] lhs_V_fu_222_p2;
wire   [0:0] rhs_V_fu_234_p2;
wire   [63:0] zext_ln700_fu_266_p1;
wire   [0:0] lhs_V_2_fu_298_p2;
wire   [0:0] rhs_V_1_fu_310_p2;
wire   [32:0] zext_ln215_fu_322_p1;
wire   [31:0] p_Result_3_fu_332_p4;
wire   [32:0] zext_ln647_fu_342_p1;
wire   [32:0] ret_V_4_fu_326_p2;
wire   [31:0] p_Result_4_fu_366_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_condition_59;

// power-on initialization
initial begin
#0 packet_cnt_V = 32'd0;
#0 error_reg_V = 1'd0;
#0 done_reg_V = 1'd0;
#0 latency_sum_reg_V = 64'd0;
#0 time_elapse_reg_V = 64'd0;
#0 clear_reg_V = 1'd0;
#0 IN_PACKET_V = 1'd0;
#0 latency_V = 32'd0;
#0 init_reg_V = 1'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        IN_PACKET_V <= 1'd0;
    end else begin
        if ((((ret_V_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ret_V_6_fu_394_p2 == 1'd1) & (ret_V_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
            IN_PACKET_V <= 1'd0;
        end else if (((ret_V_5_fu_304_p2 == 1'd1) & (ret_V_6_fu_394_p2 == 1'd0) & (ret_V_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            IN_PACKET_V <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        clear_reg_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            clear_reg_V <= clear_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        done_reg_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_fu_228_p2 == 1'd1)) begin
                done_reg_V <= 1'd0;
            end else if ((ret_V_fu_228_p2 == 1'd0)) begin
                done_reg_V <= icmp_ln879_1_fu_282_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        error_reg_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_fu_228_p2 == 1'd1)) begin
                error_reg_V <= 1'd0;
            end else if ((1'b1 == ap_condition_59)) begin
                error_reg_V <= 1'd1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        init_reg_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_fu_228_p2 == 1'd1)) begin
                init_reg_V <= 1'd0;
            end else if (((ret_V_5_fu_304_p2 == 1'd1) & (ret_V_fu_228_p2 == 1'd0))) begin
                init_reg_V <= 1'd1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        latency_V <= 32'd0;
    end else begin
        if (((icmp_ln879_fu_346_p2 == 1'd1) & (tmp_fu_352_p3 == 1'd1) & (ret_V_3_fu_316_p2 == 1'd1) & (ret_V_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            latency_V <= sub_ln214_fu_376_p2;
        end else if ((((1'b1 == ap_CS_fsm_state1) & (((ret_V_3_fu_316_p2 == 1'd1) & (icmp_ln879_fu_346_p2 == 1'd0) & (ret_V_fu_228_p2 == 1'd0)) | ((ret_V_3_fu_316_p2 == 1'd1) & (tmp_fu_352_p3 == 1'd0) & (ret_V_fu_228_p2 == 1'd0)))) | ((ret_V_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((ret_V_3_fu_316_p2 == 1'd0) & (ret_V_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
            latency_V <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        latency_sum_reg_V <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_fu_228_p2 == 1'd1)) begin
                latency_sum_reg_V <= 64'd0;
            end else if ((ret_V_fu_228_p2 == 1'd0)) begin
                latency_sum_reg_V <= add_ln700_1_fu_270_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        packet_cnt_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_fu_228_p2 == 1'd1)) begin
                packet_cnt_V <= 32'd0;
            end else if (((ret_V_6_fu_394_p2 == 1'd1) & (ret_V_fu_228_p2 == 1'd0))) begin
                packet_cnt_V <= add_ln214_fu_191_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        time_elapse_reg_V <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_fu_228_p2 == 1'd1)) begin
                time_elapse_reg_V <= 64'd0;
            end else if (((ret_V_1_fu_244_p2 == 1'd1) & (ret_V_fu_228_p2 == 1'd0))) begin
                time_elapse_reg_V <= add_ln700_fu_250_p2;
            end
        end
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_fu_191_p2 = (packet_cnt_V + 32'd1);

assign add_ln700_1_fu_270_p2 = (latency_sum_reg_V + zext_ln700_fu_266_p1);

assign add_ln700_fu_250_p2 = (time_elapse_reg_V + 64'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_59 = (((ret_V_3_fu_316_p2 == 1'd1) & (icmp_ln879_fu_346_p2 == 1'd0) & (ret_V_fu_228_p2 == 1'd0)) | ((ret_V_3_fu_316_p2 == 1'd1) & (tmp_fu_352_p3 == 1'd0) & (ret_V_fu_228_p2 == 1'd0)));
end

assign curr_cnt_V = (packet_cnt_V + 32'd1);

assign done_V = done_reg_V;

assign error_V = error_reg_V;

assign icmp_ln879_1_fu_282_p2 = ((packet_cnt_V == packet_num_V) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_346_p2 = ((zext_ln647_fu_342_p1 == ret_V_4_fu_326_p2) ? 1'b1 : 1'b0);

assign latency_sum_V = latency_sum_reg_V;

assign lhs_V_2_fu_298_p2 = (1'd1 ^ IN_PACKET_V);

assign lhs_V_fu_222_p2 = (clear_reg_V ^ 1'd1);

assign p_Result_3_fu_332_p4 = {{s_axis_data_V[511:480]}};

assign p_Result_4_fu_366_p4 = {{s_axis_data_V[479:448]}};

assign ret_V_1_fu_244_p2 = (rhs_V_fu_234_p2 & init_reg_V);

assign ret_V_3_fu_316_p2 = (rhs_V_1_fu_310_p2 & ret_V_5_fu_304_p2);

assign ret_V_4_fu_326_p2 = (zext_ln215_fu_322_p1 + 33'd1);

assign ret_V_5_fu_304_p2 = (s_axis_valid_V & lhs_V_2_fu_298_p2);

assign ret_V_6_fu_394_p2 = (s_axis_valid_V & s_axis_last_V);

assign ret_V_fu_228_p2 = (lhs_V_fu_222_p2 & clear_V);

assign rhs_V_1_fu_310_p2 = (error_reg_V ^ 1'd1);

assign rhs_V_fu_234_p2 = (done_reg_V ^ 1'd1);

assign sub_ln214_fu_376_p2 = (counter_in_V - p_Result_4_fu_366_p4);

assign time_elapse_V = time_elapse_reg_V;

assign tmp_fu_352_p3 = s_axis_keep_V[32'd56];

assign zext_ln215_fu_322_p1 = packet_cnt_V;

assign zext_ln647_fu_342_p1 = p_Result_3_fu_332_p4;

assign zext_ln700_fu_266_p1 = latency_V;

endmodule //payload_validator
