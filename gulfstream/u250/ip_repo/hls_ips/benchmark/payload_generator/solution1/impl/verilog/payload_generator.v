// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="payload_generator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.675125,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=324,HLS_SYN_LUT=1827,HLS_VERSION=2019_1}" *)

module payload_generator (
        ap_clk,
        ap_rst,
        start_V,
        ready_V,
        packet_num_V,
        payload_len_V,
        counter_out_V,
        time_elapse_V,
        m_axis_data_V,
        m_axis_keep_V,
        m_axis_last_V,
        m_axis_valid_V,
        done_V
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [0:0] start_V;
input  [0:0] ready_V;
input  [31:0] packet_num_V;
input  [15:0] payload_len_V;
output  [31:0] counter_out_V;
output  [63:0] time_elapse_V;
output  [511:0] m_axis_data_V;
output  [63:0] m_axis_keep_V;
output  [0:0] m_axis_last_V;
output  [0:0] m_axis_valid_V;
output  [0:0] done_V;

reg   [0:0] done_reg_V;
reg   [511:0] axis_reg_data_V;
reg   [63:0] axis_reg_keep_V;
reg   [0:0] axis_reg_last_V;
reg   [0:0] axis_reg_valid_V;
reg   [31:0] cnt_V;
reg   [63:0] time_elapse_reg_V;
reg   [0:0] start_reg_V;
reg   [13:0] payload_len_adjusted;
reg   [0:0] status_V;
reg   [31:0] packet_id_V;
reg   [15:0] length_remain_V;
reg   [31:0] packet_num_reg_V;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] ret_V_1_fu_457_p2;
wire   [0:0] and_ln76_fu_522_p2;
wire   [0:0] ret_V_4_fu_528_p2;
wire   [0:0] rhs_V_load_fu_472_p1;
wire   [511:0] p_Result_s_fu_560_p4;
wire   [0:0] ret_V_fu_377_p2;
wire   [63:0] p_Result_1_fu_1020_p65;
wire   [0:0] icmp_ln899_fu_1158_p2;
wire   [0:0] p_Repl2_s_fu_576_p2;
wire   [31:0] add_ln700_2_fu_1218_p2;
wire   [63:0] add_ln700_fu_482_p2;
wire   [0:0] ret_V_2_fu_476_p2;
wire   [13:0] select_ln899_fu_1296_p3;
wire   [31:0] add_ln700_1_fu_1194_p2;
wire   [15:0] add_ln701_fu_1170_p2;
wire   [15:0] zext_ln321_fu_467_p1;
wire   [0:0] lhs_V_1_fu_371_p2;
wire   [0:0] lhs_V_fu_451_p2;
wire   [32:0] zext_ln215_fu_498_p1;
wire   [32:0] zext_ln76_fu_512_p1;
wire   [32:0] ret_V_3_fu_502_p2;
wire   [0:0] icmp_ln76_fu_516_p2;
wire   [0:0] icmp_ln879_fu_538_p2;
wire   [31:0] select_ln81_fu_544_p3;
wire   [31:0] t_V_1_fu_552_p3;
wire   [14:0] tmp_fu_582_p4;
wire   [13:0] tmp_1_fu_604_p4;
wire   [12:0] tmp_2_fu_638_p4;
wire   [11:0] tmp_3_fu_696_p4;
wire   [10:0] tmp_4_fu_802_p4;
wire   [9:0] tmp_5_fu_1004_p4;
wire   [0:0] p_Repl2_1_fu_592_p2;
wire   [0:0] p_Repl2_2_fu_598_p2;
wire   [0:0] p_Repl2_3_fu_614_p2;
wire   [0:0] p_Repl2_4_fu_620_p2;
wire   [0:0] p_Repl2_5_fu_626_p2;
wire   [0:0] p_Repl2_6_fu_632_p2;
wire   [0:0] p_Repl2_7_fu_648_p2;
wire   [0:0] p_Repl2_8_fu_654_p2;
wire   [0:0] p_Repl2_9_fu_660_p2;
wire   [0:0] p_Repl2_10_fu_666_p2;
wire   [0:0] p_Repl2_11_fu_672_p2;
wire   [0:0] p_Repl2_12_fu_678_p2;
wire   [0:0] p_Repl2_13_fu_684_p2;
wire   [0:0] p_Repl2_14_fu_690_p2;
wire   [0:0] p_Repl2_15_fu_706_p2;
wire   [0:0] p_Repl2_16_fu_712_p2;
wire   [0:0] p_Repl2_17_fu_718_p2;
wire   [0:0] p_Repl2_18_fu_724_p2;
wire   [0:0] p_Repl2_19_fu_730_p2;
wire   [0:0] p_Repl2_20_fu_736_p2;
wire   [0:0] p_Repl2_21_fu_742_p2;
wire   [0:0] p_Repl2_22_fu_748_p2;
wire   [0:0] p_Repl2_23_fu_754_p2;
wire   [0:0] p_Repl2_24_fu_760_p2;
wire   [0:0] p_Repl2_25_fu_766_p2;
wire   [0:0] p_Repl2_26_fu_772_p2;
wire   [0:0] p_Repl2_27_fu_778_p2;
wire   [0:0] p_Repl2_28_fu_784_p2;
wire   [0:0] p_Repl2_29_fu_790_p2;
wire   [0:0] p_Repl2_30_fu_796_p2;
wire   [0:0] p_Repl2_31_fu_812_p2;
wire   [0:0] p_Repl2_32_fu_818_p2;
wire   [0:0] p_Repl2_33_fu_824_p2;
wire   [0:0] p_Repl2_34_fu_830_p2;
wire   [0:0] p_Repl2_35_fu_836_p2;
wire   [0:0] p_Repl2_36_fu_842_p2;
wire   [0:0] p_Repl2_37_fu_848_p2;
wire   [0:0] p_Repl2_38_fu_854_p2;
wire   [0:0] p_Repl2_39_fu_860_p2;
wire   [0:0] p_Repl2_40_fu_866_p2;
wire   [0:0] p_Repl2_41_fu_872_p2;
wire   [0:0] p_Repl2_42_fu_878_p2;
wire   [0:0] p_Repl2_43_fu_884_p2;
wire   [0:0] p_Repl2_44_fu_890_p2;
wire   [0:0] p_Repl2_45_fu_896_p2;
wire   [0:0] p_Repl2_46_fu_902_p2;
wire   [0:0] p_Repl2_47_fu_908_p2;
wire   [0:0] p_Repl2_48_fu_914_p2;
wire   [0:0] p_Repl2_49_fu_920_p2;
wire   [0:0] p_Repl2_50_fu_926_p2;
wire   [0:0] p_Repl2_51_fu_932_p2;
wire   [0:0] p_Repl2_52_fu_938_p2;
wire   [0:0] p_Repl2_53_fu_944_p2;
wire   [0:0] p_Repl2_54_fu_950_p2;
wire   [0:0] p_Repl2_55_fu_956_p2;
wire   [0:0] p_Repl2_56_fu_962_p2;
wire   [0:0] p_Repl2_57_fu_968_p2;
wire   [0:0] p_Repl2_58_fu_974_p2;
wire   [0:0] p_Repl2_59_fu_980_p2;
wire   [0:0] p_Repl2_60_fu_986_p2;
wire   [0:0] p_Repl2_61_fu_992_p2;
wire   [0:0] p_Repl2_62_fu_998_p2;
wire   [0:0] p_Repl2_63_fu_1014_p2;
wire   [0:0] icmp_ln891_fu_1278_p2;
wire   [13:0] trunc_ln102_fu_1284_p1;
wire   [0:0] icmp_ln899_1_fu_1272_p2;
wire   [13:0] select_ln102_fu_1288_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_condition_84;

// power-on initialization
initial begin
#0 done_reg_V = 1'd0;
#0 axis_reg_data_V = 512'd0;
#0 axis_reg_keep_V = 64'd0;
#0 axis_reg_last_V = 1'd0;
#0 axis_reg_valid_V = 1'd0;
#0 cnt_V = 32'd0;
#0 time_elapse_reg_V = 64'd0;
#0 start_reg_V = 1'd0;
#0 payload_len_adjusted = 14'd0;
#0 status_V = 1'd0;
#0 packet_id_V = 32'd0;
#0 length_remain_V = 16'd0;
#0 packet_num_reg_V = 32'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                axis_reg_data_V[448] <= 1'b0;
        axis_reg_data_V[449] <= 1'b0;
        axis_reg_data_V[450] <= 1'b0;
        axis_reg_data_V[451] <= 1'b0;
        axis_reg_data_V[452] <= 1'b0;
        axis_reg_data_V[453] <= 1'b0;
        axis_reg_data_V[454] <= 1'b0;
        axis_reg_data_V[455] <= 1'b0;
        axis_reg_data_V[456] <= 1'b0;
        axis_reg_data_V[457] <= 1'b0;
        axis_reg_data_V[458] <= 1'b0;
        axis_reg_data_V[459] <= 1'b0;
        axis_reg_data_V[460] <= 1'b0;
        axis_reg_data_V[461] <= 1'b0;
        axis_reg_data_V[462] <= 1'b0;
        axis_reg_data_V[463] <= 1'b0;
        axis_reg_data_V[464] <= 1'b0;
        axis_reg_data_V[465] <= 1'b0;
        axis_reg_data_V[466] <= 1'b0;
        axis_reg_data_V[467] <= 1'b0;
        axis_reg_data_V[468] <= 1'b0;
        axis_reg_data_V[469] <= 1'b0;
        axis_reg_data_V[470] <= 1'b0;
        axis_reg_data_V[471] <= 1'b0;
        axis_reg_data_V[472] <= 1'b0;
        axis_reg_data_V[473] <= 1'b0;
        axis_reg_data_V[474] <= 1'b0;
        axis_reg_data_V[475] <= 1'b0;
        axis_reg_data_V[476] <= 1'b0;
        axis_reg_data_V[477] <= 1'b0;
        axis_reg_data_V[478] <= 1'b0;
        axis_reg_data_V[479] <= 1'b0;
        axis_reg_data_V[480] <= 1'b0;
        axis_reg_data_V[481] <= 1'b0;
        axis_reg_data_V[482] <= 1'b0;
        axis_reg_data_V[483] <= 1'b0;
        axis_reg_data_V[484] <= 1'b0;
        axis_reg_data_V[485] <= 1'b0;
        axis_reg_data_V[486] <= 1'b0;
        axis_reg_data_V[487] <= 1'b0;
        axis_reg_data_V[488] <= 1'b0;
        axis_reg_data_V[489] <= 1'b0;
        axis_reg_data_V[490] <= 1'b0;
        axis_reg_data_V[491] <= 1'b0;
        axis_reg_data_V[492] <= 1'b0;
        axis_reg_data_V[493] <= 1'b0;
        axis_reg_data_V[494] <= 1'b0;
        axis_reg_data_V[495] <= 1'b0;
        axis_reg_data_V[496] <= 1'b0;
        axis_reg_data_V[497] <= 1'b0;
        axis_reg_data_V[498] <= 1'b0;
        axis_reg_data_V[499] <= 1'b0;
        axis_reg_data_V[500] <= 1'b0;
        axis_reg_data_V[501] <= 1'b0;
        axis_reg_data_V[502] <= 1'b0;
        axis_reg_data_V[503] <= 1'b0;
        axis_reg_data_V[504] <= 1'b0;
        axis_reg_data_V[505] <= 1'b0;
        axis_reg_data_V[506] <= 1'b0;
        axis_reg_data_V[507] <= 1'b0;
        axis_reg_data_V[508] <= 1'b0;
        axis_reg_data_V[509] <= 1'b0;
        axis_reg_data_V[510] <= 1'b0;
        axis_reg_data_V[511] <= 1'b0;
    end else begin
        if (((ret_V_4_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0))) begin
                        axis_reg_data_V[511 : 448] <= p_Result_s_fu_560_p4[511 : 448];
        end else if ((((1'b1 == ap_CS_fsm_state1) & (rhs_V_load_fu_472_p1 == 1'd0) & (ret_V_4_fu_528_p2 == 1'd0) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0)) | ((1'd1 == and_ln76_fu_522_p2) & (1'b1 == ap_CS_fsm_state1) & (ret_V_1_fu_457_p2 == 1'd0)))) begin
                        axis_reg_data_V[448] <= 1'b0;
            axis_reg_data_V[449] <= 1'b0;
            axis_reg_data_V[450] <= 1'b0;
            axis_reg_data_V[451] <= 1'b0;
            axis_reg_data_V[452] <= 1'b0;
            axis_reg_data_V[453] <= 1'b0;
            axis_reg_data_V[454] <= 1'b0;
            axis_reg_data_V[455] <= 1'b0;
            axis_reg_data_V[456] <= 1'b0;
            axis_reg_data_V[457] <= 1'b0;
            axis_reg_data_V[458] <= 1'b0;
            axis_reg_data_V[459] <= 1'b0;
            axis_reg_data_V[460] <= 1'b0;
            axis_reg_data_V[461] <= 1'b0;
            axis_reg_data_V[462] <= 1'b0;
            axis_reg_data_V[463] <= 1'b0;
            axis_reg_data_V[464] <= 1'b0;
            axis_reg_data_V[465] <= 1'b0;
            axis_reg_data_V[466] <= 1'b0;
            axis_reg_data_V[467] <= 1'b0;
            axis_reg_data_V[468] <= 1'b0;
            axis_reg_data_V[469] <= 1'b0;
            axis_reg_data_V[470] <= 1'b0;
            axis_reg_data_V[471] <= 1'b0;
            axis_reg_data_V[472] <= 1'b0;
            axis_reg_data_V[473] <= 1'b0;
            axis_reg_data_V[474] <= 1'b0;
            axis_reg_data_V[475] <= 1'b0;
            axis_reg_data_V[476] <= 1'b0;
            axis_reg_data_V[477] <= 1'b0;
            axis_reg_data_V[478] <= 1'b0;
            axis_reg_data_V[479] <= 1'b0;
            axis_reg_data_V[480] <= 1'b0;
            axis_reg_data_V[481] <= 1'b0;
            axis_reg_data_V[482] <= 1'b0;
            axis_reg_data_V[483] <= 1'b0;
            axis_reg_data_V[484] <= 1'b0;
            axis_reg_data_V[485] <= 1'b0;
            axis_reg_data_V[486] <= 1'b0;
            axis_reg_data_V[487] <= 1'b0;
            axis_reg_data_V[488] <= 1'b0;
            axis_reg_data_V[489] <= 1'b0;
            axis_reg_data_V[490] <= 1'b0;
            axis_reg_data_V[491] <= 1'b0;
            axis_reg_data_V[492] <= 1'b0;
            axis_reg_data_V[493] <= 1'b0;
            axis_reg_data_V[494] <= 1'b0;
            axis_reg_data_V[495] <= 1'b0;
            axis_reg_data_V[496] <= 1'b0;
            axis_reg_data_V[497] <= 1'b0;
            axis_reg_data_V[498] <= 1'b0;
            axis_reg_data_V[499] <= 1'b0;
            axis_reg_data_V[500] <= 1'b0;
            axis_reg_data_V[501] <= 1'b0;
            axis_reg_data_V[502] <= 1'b0;
            axis_reg_data_V[503] <= 1'b0;
            axis_reg_data_V[504] <= 1'b0;
            axis_reg_data_V[505] <= 1'b0;
            axis_reg_data_V[506] <= 1'b0;
            axis_reg_data_V[507] <= 1'b0;
            axis_reg_data_V[508] <= 1'b0;
            axis_reg_data_V[509] <= 1'b0;
            axis_reg_data_V[510] <= 1'b0;
            axis_reg_data_V[511] <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_reg_keep_V <= 64'd0;
    end else begin
        if (((ret_V_4_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0))) begin
            axis_reg_keep_V <= p_Result_1_fu_1020_p65;
        end else if ((((1'b1 == ap_CS_fsm_state1) & (rhs_V_load_fu_472_p1 == 1'd0) & (ret_V_4_fu_528_p2 == 1'd0) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0)) | ((1'd1 == and_ln76_fu_522_p2) & (1'b1 == ap_CS_fsm_state1) & (ret_V_1_fu_457_p2 == 1'd0)))) begin
            axis_reg_keep_V <= 64'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_reg_last_V <= 1'd0;
    end else begin
        if (((icmp_ln899_fu_1158_p2 == 1'd1) & (ret_V_4_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0))) begin
            axis_reg_last_V <= p_Repl2_s_fu_576_p2;
        end else if ((((ret_V_4_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln899_fu_1158_p2 == 1'd0) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state1) & (rhs_V_load_fu_472_p1 == 1'd0) & (ret_V_4_fu_528_p2 == 1'd0) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0)) | ((1'd1 == and_ln76_fu_522_p2) & (1'b1 == ap_CS_fsm_state1) & (ret_V_1_fu_457_p2 == 1'd0)))) begin
            axis_reg_last_V <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_reg_valid_V <= 1'd0;
    end else begin
        if (((icmp_ln899_fu_1158_p2 == 1'd1) & (ret_V_4_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0))) begin
            axis_reg_valid_V <= p_Repl2_s_fu_576_p2;
        end else if (((ret_V_4_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln899_fu_1158_p2 == 1'd0) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0))) begin
            axis_reg_valid_V <= 1'd1;
        end else if ((((1'b1 == ap_CS_fsm_state1) & (rhs_V_load_fu_472_p1 == 1'd0) & (ret_V_4_fu_528_p2 == 1'd0) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0)) | ((1'd1 == and_ln76_fu_522_p2) & (1'b1 == ap_CS_fsm_state1) & (ret_V_1_fu_457_p2 == 1'd0)))) begin
            axis_reg_valid_V <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        cnt_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_1_fu_457_p2 == 1'd1)) begin
                cnt_V <= 32'd0;
            end else if ((ret_V_1_fu_457_p2 == 1'd0)) begin
                cnt_V <= add_ln700_2_fu_1218_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        done_reg_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_1_fu_457_p2 == 1'd1)) begin
                done_reg_V <= 1'd0;
            end else if (((1'd1 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0))) begin
                done_reg_V <= 1'd1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        length_remain_V <= 16'd0;
    end else begin
        if ((((ret_V_1_fu_457_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln899_fu_1158_p2 == 1'd1) & (ret_V_4_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0)))) begin
            length_remain_V <= zext_ln321_fu_467_p1;
        end else if (((ret_V_4_fu_528_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (icmp_ln899_fu_1158_p2 == 1'd0) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0))) begin
            length_remain_V <= add_ln701_fu_1170_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        packet_id_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_1_fu_457_p2 == 1'd1)) begin
                packet_id_V <= 32'd1;
            end else if ((1'b1 == ap_condition_84)) begin
                packet_id_V <= add_ln700_1_fu_1194_p2;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        packet_num_reg_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            packet_num_reg_V <= packet_num_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        payload_len_adjusted <= 14'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            payload_len_adjusted <= select_ln899_fu_1296_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_reg_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            start_reg_V <= start_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        status_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_1_fu_457_p2 == 1'd1)) begin
                status_V <= 1'd1;
            end else if (((1'd1 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0))) begin
                status_V <= 1'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        time_elapse_reg_V <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_1_fu_457_p2 == 1'd1)) begin
                time_elapse_reg_V <= 64'd0;
            end else if (((ret_V_2_fu_476_p2 == 1'd1) & (ret_V_1_fu_457_p2 == 1'd0))) begin
                time_elapse_reg_V <= add_ln700_fu_482_p2;
            end
        end
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_1_fu_1194_p2 = (packet_id_V + 32'd1);

assign add_ln700_2_fu_1218_p2 = (cnt_V + 32'd1);

assign add_ln700_fu_482_p2 = (time_elapse_reg_V + 64'd1);

assign add_ln701_fu_1170_p2 = ($signed(length_remain_V) + $signed(16'd65472));

assign and_ln76_fu_522_p2 = (ready_V & icmp_ln76_fu_516_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_84 = ((icmp_ln899_fu_1158_p2 == 1'd1) & (ret_V_4_fu_528_p2 == 1'd1) & (1'd0 == and_ln76_fu_522_p2) & (ret_V_1_fu_457_p2 == 1'd0));
end

assign counter_out_V = cnt_V;

assign done_V = done_reg_V;

assign icmp_ln76_fu_516_p2 = ((zext_ln76_fu_512_p1 == ret_V_3_fu_502_p2) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_538_p2 = ((length_remain_V == zext_ln321_fu_467_p1) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_1278_p2 = ((payload_len_V < 16'd9558) ? 1'b1 : 1'b0);

assign icmp_ln899_1_fu_1272_p2 = ((payload_len_V < 16'd9) ? 1'b1 : 1'b0);

assign icmp_ln899_fu_1158_p2 = ((length_remain_V < 16'd65) ? 1'b1 : 1'b0);

assign lhs_V_1_fu_371_p2 = (done_reg_V ^ 1'd1);

assign lhs_V_fu_451_p2 = (start_reg_V ^ 1'd1);

assign m_axis_data_V = ((ret_V_fu_377_p2[0:0] === 1'b1) ? axis_reg_data_V : 512'd0);

assign m_axis_keep_V = ((ret_V_fu_377_p2[0:0] === 1'b1) ? axis_reg_keep_V : 64'd0);

assign m_axis_last_V = (ret_V_fu_377_p2 & axis_reg_last_V);

assign m_axis_valid_V = (ret_V_fu_377_p2 & axis_reg_valid_V);

assign p_Repl2_10_fu_666_p2 = ((length_remain_V > 16'd10) ? 1'b1 : 1'b0);

assign p_Repl2_11_fu_672_p2 = ((length_remain_V > 16'd11) ? 1'b1 : 1'b0);

assign p_Repl2_12_fu_678_p2 = ((length_remain_V > 16'd12) ? 1'b1 : 1'b0);

assign p_Repl2_13_fu_684_p2 = ((length_remain_V > 16'd13) ? 1'b1 : 1'b0);

assign p_Repl2_14_fu_690_p2 = ((length_remain_V > 16'd14) ? 1'b1 : 1'b0);

assign p_Repl2_15_fu_706_p2 = ((tmp_3_fu_696_p4 != 12'd0) ? 1'b1 : 1'b0);

assign p_Repl2_16_fu_712_p2 = ((length_remain_V > 16'd16) ? 1'b1 : 1'b0);

assign p_Repl2_17_fu_718_p2 = ((length_remain_V > 16'd17) ? 1'b1 : 1'b0);

assign p_Repl2_18_fu_724_p2 = ((length_remain_V > 16'd18) ? 1'b1 : 1'b0);

assign p_Repl2_19_fu_730_p2 = ((length_remain_V > 16'd19) ? 1'b1 : 1'b0);

assign p_Repl2_1_fu_592_p2 = ((tmp_fu_582_p4 != 15'd0) ? 1'b1 : 1'b0);

assign p_Repl2_20_fu_736_p2 = ((length_remain_V > 16'd20) ? 1'b1 : 1'b0);

assign p_Repl2_21_fu_742_p2 = ((length_remain_V > 16'd21) ? 1'b1 : 1'b0);

assign p_Repl2_22_fu_748_p2 = ((length_remain_V > 16'd22) ? 1'b1 : 1'b0);

assign p_Repl2_23_fu_754_p2 = ((length_remain_V > 16'd23) ? 1'b1 : 1'b0);

assign p_Repl2_24_fu_760_p2 = ((length_remain_V > 16'd24) ? 1'b1 : 1'b0);

assign p_Repl2_25_fu_766_p2 = ((length_remain_V > 16'd25) ? 1'b1 : 1'b0);

assign p_Repl2_26_fu_772_p2 = ((length_remain_V > 16'd26) ? 1'b1 : 1'b0);

assign p_Repl2_27_fu_778_p2 = ((length_remain_V > 16'd27) ? 1'b1 : 1'b0);

assign p_Repl2_28_fu_784_p2 = ((length_remain_V > 16'd28) ? 1'b1 : 1'b0);

assign p_Repl2_29_fu_790_p2 = ((length_remain_V > 16'd29) ? 1'b1 : 1'b0);

assign p_Repl2_2_fu_598_p2 = ((length_remain_V > 16'd2) ? 1'b1 : 1'b0);

assign p_Repl2_30_fu_796_p2 = ((length_remain_V > 16'd30) ? 1'b1 : 1'b0);

assign p_Repl2_31_fu_812_p2 = ((tmp_4_fu_802_p4 != 11'd0) ? 1'b1 : 1'b0);

assign p_Repl2_32_fu_818_p2 = ((length_remain_V > 16'd32) ? 1'b1 : 1'b0);

assign p_Repl2_33_fu_824_p2 = ((length_remain_V > 16'd33) ? 1'b1 : 1'b0);

assign p_Repl2_34_fu_830_p2 = ((length_remain_V > 16'd34) ? 1'b1 : 1'b0);

assign p_Repl2_35_fu_836_p2 = ((length_remain_V > 16'd35) ? 1'b1 : 1'b0);

assign p_Repl2_36_fu_842_p2 = ((length_remain_V > 16'd36) ? 1'b1 : 1'b0);

assign p_Repl2_37_fu_848_p2 = ((length_remain_V > 16'd37) ? 1'b1 : 1'b0);

assign p_Repl2_38_fu_854_p2 = ((length_remain_V > 16'd38) ? 1'b1 : 1'b0);

assign p_Repl2_39_fu_860_p2 = ((length_remain_V > 16'd39) ? 1'b1 : 1'b0);

assign p_Repl2_3_fu_614_p2 = ((tmp_1_fu_604_p4 != 14'd0) ? 1'b1 : 1'b0);

assign p_Repl2_40_fu_866_p2 = ((length_remain_V > 16'd40) ? 1'b1 : 1'b0);

assign p_Repl2_41_fu_872_p2 = ((length_remain_V > 16'd41) ? 1'b1 : 1'b0);

assign p_Repl2_42_fu_878_p2 = ((length_remain_V > 16'd42) ? 1'b1 : 1'b0);

assign p_Repl2_43_fu_884_p2 = ((length_remain_V > 16'd43) ? 1'b1 : 1'b0);

assign p_Repl2_44_fu_890_p2 = ((length_remain_V > 16'd44) ? 1'b1 : 1'b0);

assign p_Repl2_45_fu_896_p2 = ((length_remain_V > 16'd45) ? 1'b1 : 1'b0);

assign p_Repl2_46_fu_902_p2 = ((length_remain_V > 16'd46) ? 1'b1 : 1'b0);

assign p_Repl2_47_fu_908_p2 = ((length_remain_V > 16'd47) ? 1'b1 : 1'b0);

assign p_Repl2_48_fu_914_p2 = ((length_remain_V > 16'd48) ? 1'b1 : 1'b0);

assign p_Repl2_49_fu_920_p2 = ((length_remain_V > 16'd49) ? 1'b1 : 1'b0);

assign p_Repl2_4_fu_620_p2 = ((length_remain_V > 16'd4) ? 1'b1 : 1'b0);

assign p_Repl2_50_fu_926_p2 = ((length_remain_V > 16'd50) ? 1'b1 : 1'b0);

assign p_Repl2_51_fu_932_p2 = ((length_remain_V > 16'd51) ? 1'b1 : 1'b0);

assign p_Repl2_52_fu_938_p2 = ((length_remain_V > 16'd52) ? 1'b1 : 1'b0);

assign p_Repl2_53_fu_944_p2 = ((length_remain_V > 16'd53) ? 1'b1 : 1'b0);

assign p_Repl2_54_fu_950_p2 = ((length_remain_V > 16'd54) ? 1'b1 : 1'b0);

assign p_Repl2_55_fu_956_p2 = ((length_remain_V > 16'd55) ? 1'b1 : 1'b0);

assign p_Repl2_56_fu_962_p2 = ((length_remain_V > 16'd56) ? 1'b1 : 1'b0);

assign p_Repl2_57_fu_968_p2 = ((length_remain_V > 16'd57) ? 1'b1 : 1'b0);

assign p_Repl2_58_fu_974_p2 = ((length_remain_V > 16'd58) ? 1'b1 : 1'b0);

assign p_Repl2_59_fu_980_p2 = ((length_remain_V > 16'd59) ? 1'b1 : 1'b0);

assign p_Repl2_5_fu_626_p2 = ((length_remain_V > 16'd5) ? 1'b1 : 1'b0);

assign p_Repl2_60_fu_986_p2 = ((length_remain_V > 16'd60) ? 1'b1 : 1'b0);

assign p_Repl2_61_fu_992_p2 = ((length_remain_V > 16'd61) ? 1'b1 : 1'b0);

assign p_Repl2_62_fu_998_p2 = ((length_remain_V > 16'd62) ? 1'b1 : 1'b0);

assign p_Repl2_63_fu_1014_p2 = ((tmp_5_fu_1004_p4 != 10'd0) ? 1'b1 : 1'b0);

assign p_Repl2_6_fu_632_p2 = ((length_remain_V > 16'd6) ? 1'b1 : 1'b0);

assign p_Repl2_7_fu_648_p2 = ((tmp_2_fu_638_p4 != 13'd0) ? 1'b1 : 1'b0);

assign p_Repl2_8_fu_654_p2 = ((length_remain_V > 16'd8) ? 1'b1 : 1'b0);

assign p_Repl2_9_fu_660_p2 = ((length_remain_V > 16'd9) ? 1'b1 : 1'b0);

assign p_Repl2_s_fu_576_p2 = ((length_remain_V != 16'd0) ? 1'b1 : 1'b0);

assign p_Result_1_fu_1020_p65 = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{p_Repl2_s_fu_576_p2}, {p_Repl2_1_fu_592_p2}}, {p_Repl2_2_fu_598_p2}}, {p_Repl2_3_fu_614_p2}}, {p_Repl2_4_fu_620_p2}}, {p_Repl2_5_fu_626_p2}}, {p_Repl2_6_fu_632_p2}}, {p_Repl2_7_fu_648_p2}}, {p_Repl2_8_fu_654_p2}}, {p_Repl2_9_fu_660_p2}}, {p_Repl2_10_fu_666_p2}}, {p_Repl2_11_fu_672_p2}}, {p_Repl2_12_fu_678_p2}}, {p_Repl2_13_fu_684_p2}}, {p_Repl2_14_fu_690_p2}}, {p_Repl2_15_fu_706_p2}}, {p_Repl2_16_fu_712_p2}}, {p_Repl2_17_fu_718_p2}}, {p_Repl2_18_fu_724_p2}}, {p_Repl2_19_fu_730_p2}}, {p_Repl2_20_fu_736_p2}}, {p_Repl2_21_fu_742_p2}}, {p_Repl2_22_fu_748_p2}}, {p_Repl2_23_fu_754_p2}}, {p_Repl2_24_fu_760_p2}}, {p_Repl2_25_fu_766_p2}}, {p_Repl2_26_fu_772_p2}}, {p_Repl2_27_fu_778_p2}}, {p_Repl2_28_fu_784_p2}}, {p_Repl2_29_fu_790_p2}}, {p_Repl2_30_fu_796_p2}}, {p_Repl2_31_fu_812_p2}}, {p_Repl2_32_fu_818_p2}}, {p_Repl2_33_fu_824_p2}}, {p_Repl2_34_fu_830_p2}}, {p_Repl2_35_fu_836_p2}}, {p_Repl2_36_fu_842_p2}}, {p_Repl2_37_fu_848_p2}}, {p_Repl2_38_fu_854_p2}}, {p_Repl2_39_fu_860_p2}}, {p_Repl2_40_fu_866_p2}}, {p_Repl2_41_fu_872_p2}}, {p_Repl2_42_fu_878_p2}}, {p_Repl2_43_fu_884_p2}}, {p_Repl2_44_fu_890_p2}}, {p_Repl2_45_fu_896_p2}}, {p_Repl2_46_fu_902_p2}}, {p_Repl2_47_fu_908_p2}}, {p_Repl2_48_fu_914_p2}}, {p_Repl2_49_fu_920_p2}}, {p_Repl2_50_fu_926_p2}}, {p_Repl2_51_fu_932_p2}}, {p_Repl2_52_fu_938_p2}}, {p_Repl2_53_fu_944_p2}}, {p_Repl2_54_fu_950_p2}}, {p_Repl2_55_fu_956_p2}}, {p_Repl2_56_fu_962_p2}}, {p_Repl2_57_fu_968_p2}}, {p_Repl2_58_fu_974_p2}}, {p_Repl2_59_fu_980_p2}}, {p_Repl2_60_fu_986_p2}}, {p_Repl2_61_fu_992_p2}}, {p_Repl2_62_fu_998_p2}}, {p_Repl2_63_fu_1014_p2}};

assign p_Result_s_fu_560_p4 = {{{select_ln81_fu_544_p3}, {t_V_1_fu_552_p3}}, {448'd0}};

assign ret_V_1_fu_457_p2 = (start_V & lhs_V_fu_451_p2);

assign ret_V_2_fu_476_p2 = (status_V & lhs_V_1_fu_371_p2);

assign ret_V_3_fu_502_p2 = (zext_ln215_fu_498_p1 + 33'd1);

assign ret_V_4_fu_528_p2 = (status_V & ready_V);

assign ret_V_fu_377_p2 = (ready_V & lhs_V_1_fu_371_p2);

assign rhs_V_load_fu_472_p1 = status_V;

assign select_ln102_fu_1288_p3 = ((icmp_ln891_fu_1278_p2[0:0] === 1'b1) ? trunc_ln102_fu_1284_p1 : 14'd9558);

assign select_ln81_fu_544_p3 = ((icmp_ln879_fu_538_p2[0:0] === 1'b1) ? packet_id_V : 32'd0);

assign select_ln899_fu_1296_p3 = ((icmp_ln899_1_fu_1272_p2[0:0] === 1'b1) ? 14'd8 : select_ln102_fu_1288_p3);

assign t_V_1_fu_552_p3 = ((icmp_ln879_fu_538_p2[0:0] === 1'b1) ? cnt_V : 32'd0);

assign time_elapse_V = ($signed(time_elapse_reg_V) + $signed(64'd18446744073709551615));

assign tmp_1_fu_604_p4 = {{length_remain_V[15:2]}};

assign tmp_2_fu_638_p4 = {{length_remain_V[15:3]}};

assign tmp_3_fu_696_p4 = {{length_remain_V[15:4]}};

assign tmp_4_fu_802_p4 = {{length_remain_V[15:5]}};

assign tmp_5_fu_1004_p4 = {{length_remain_V[15:6]}};

assign tmp_fu_582_p4 = {{length_remain_V[15:1]}};

assign trunc_ln102_fu_1284_p1 = payload_len_V[13:0];

assign zext_ln215_fu_498_p1 = packet_num_reg_V;

assign zext_ln321_fu_467_p1 = payload_len_adjusted;

assign zext_ln76_fu_512_p1 = packet_id_V;

always @ (posedge ap_clk) begin
    axis_reg_data_V[447:0] <= 448'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
end

endmodule //payload_generator
