-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity PSInterface is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    start_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    pkt_num_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    pkt_len_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    remote_ip_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    remote_port_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    local_port_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    tx_timeElapse_V : IN STD_LOGIC_VECTOR (63 downto 0);
    tx_done_V : IN STD_LOGIC_VECTOR (0 downto 0);
    latency_sum_V : IN STD_LOGIC_VECTOR (63 downto 0);
    rx_timeElapse_V : IN STD_LOGIC_VECTOR (63 downto 0);
    rx_cnt_V : IN STD_LOGIC_VECTOR (31 downto 0);
    rx_done_V : IN STD_LOGIC_VECTOR (0 downto 0);
    rx_error_V : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC );
end;


architecture behav of PSInterface is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "PSInterface,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=638,HLS_SYN_LUT=1064,HLS_VERSION=2019_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal axil_start_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_pkt_num_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_pkt_len_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_remote_ip_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_remote_port_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_local_port_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_tx_timeElapse_high_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_tx_timeElapse_high_V_ap_vld : STD_LOGIC;
    signal axil_tx_timeElapse_low_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_tx_timeElapse_low_V_ap_vld : STD_LOGIC;
    signal axil_tx_done_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_tx_done_V_ap_vld : STD_LOGIC;
    signal axil_latency_sum_high_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_latency_sum_high_V_ap_vld : STD_LOGIC;
    signal axil_latency_sum_low_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_latency_sum_low_V_ap_vld : STD_LOGIC;
    signal axil_rx_timeElaspe_high_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_rx_timeElaspe_high_V_ap_vld : STD_LOGIC;
    signal axil_rx_timeElaspe_low_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_rx_timeElaspe_low_V_ap_vld : STD_LOGIC;
    signal axil_rx_done_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_rx_done_V_ap_vld : STD_LOGIC;
    signal axil_rx_error_V : STD_LOGIC_VECTOR (31 downto 0);
    signal axil_rx_error_V_ap_vld : STD_LOGIC;
    signal axil_rx_curr_cnt_V_ap_vld : STD_LOGIC;
    signal ap_rst_n_inv : STD_LOGIC;

    component PSInterface_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        axil_start_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        axil_pkt_num_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        axil_pkt_len_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        axil_remote_ip_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        axil_remote_port_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        axil_local_port_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        axil_tx_timeElapse_high_V : IN STD_LOGIC_VECTOR (31 downto 0);
        axil_tx_timeElapse_high_V_ap_vld : IN STD_LOGIC;
        axil_tx_timeElapse_low_V : IN STD_LOGIC_VECTOR (31 downto 0);
        axil_tx_timeElapse_low_V_ap_vld : IN STD_LOGIC;
        axil_tx_done_V : IN STD_LOGIC_VECTOR (31 downto 0);
        axil_tx_done_V_ap_vld : IN STD_LOGIC;
        axil_latency_sum_high_V : IN STD_LOGIC_VECTOR (31 downto 0);
        axil_latency_sum_high_V_ap_vld : IN STD_LOGIC;
        axil_latency_sum_low_V : IN STD_LOGIC_VECTOR (31 downto 0);
        axil_latency_sum_low_V_ap_vld : IN STD_LOGIC;
        axil_rx_timeElaspe_high_V : IN STD_LOGIC_VECTOR (31 downto 0);
        axil_rx_timeElaspe_high_V_ap_vld : IN STD_LOGIC;
        axil_rx_timeElaspe_low_V : IN STD_LOGIC_VECTOR (31 downto 0);
        axil_rx_timeElaspe_low_V_ap_vld : IN STD_LOGIC;
        axil_rx_done_V : IN STD_LOGIC_VECTOR (31 downto 0);
        axil_rx_done_V_ap_vld : IN STD_LOGIC;
        axil_rx_error_V : IN STD_LOGIC_VECTOR (31 downto 0);
        axil_rx_error_V_ap_vld : IN STD_LOGIC;
        axil_rx_curr_cnt_V : IN STD_LOGIC_VECTOR (31 downto 0);
        axil_rx_curr_cnt_V_ap_vld : IN STD_LOGIC );
    end component;



begin
    PSInterface_AXILiteS_s_axi_U : component PSInterface_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        axil_start_V => axil_start_V,
        axil_pkt_num_V => axil_pkt_num_V,
        axil_pkt_len_V => axil_pkt_len_V,
        axil_remote_ip_V => axil_remote_ip_V,
        axil_remote_port_V => axil_remote_port_V,
        axil_local_port_V => axil_local_port_V,
        axil_tx_timeElapse_high_V => axil_tx_timeElapse_high_V,
        axil_tx_timeElapse_high_V_ap_vld => axil_tx_timeElapse_high_V_ap_vld,
        axil_tx_timeElapse_low_V => axil_tx_timeElapse_low_V,
        axil_tx_timeElapse_low_V_ap_vld => axil_tx_timeElapse_low_V_ap_vld,
        axil_tx_done_V => axil_tx_done_V,
        axil_tx_done_V_ap_vld => axil_tx_done_V_ap_vld,
        axil_latency_sum_high_V => axil_latency_sum_high_V,
        axil_latency_sum_high_V_ap_vld => axil_latency_sum_high_V_ap_vld,
        axil_latency_sum_low_V => axil_latency_sum_low_V,
        axil_latency_sum_low_V_ap_vld => axil_latency_sum_low_V_ap_vld,
        axil_rx_timeElaspe_high_V => axil_rx_timeElaspe_high_V,
        axil_rx_timeElaspe_high_V_ap_vld => axil_rx_timeElaspe_high_V_ap_vld,
        axil_rx_timeElaspe_low_V => axil_rx_timeElaspe_low_V,
        axil_rx_timeElaspe_low_V_ap_vld => axil_rx_timeElaspe_low_V_ap_vld,
        axil_rx_done_V => axil_rx_done_V,
        axil_rx_done_V_ap_vld => axil_rx_done_V_ap_vld,
        axil_rx_error_V => axil_rx_error_V,
        axil_rx_error_V_ap_vld => axil_rx_error_V_ap_vld,
        axil_rx_curr_cnt_V => rx_cnt_V,
        axil_rx_curr_cnt_V_ap_vld => axil_rx_curr_cnt_V_ap_vld);





    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    axil_latency_sum_high_V <= latency_sum_V(63 downto 32);
    axil_latency_sum_high_V_ap_vld <= ap_const_logic_1;
    axil_latency_sum_low_V <= latency_sum_V(32 - 1 downto 0);
    axil_latency_sum_low_V_ap_vld <= ap_const_logic_1;
    axil_rx_curr_cnt_V_ap_vld <= ap_const_logic_1;
    axil_rx_done_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rx_done_V),32));
    axil_rx_done_V_ap_vld <= ap_const_logic_1;
    axil_rx_error_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rx_error_V),32));
    axil_rx_error_V_ap_vld <= ap_const_logic_1;
    axil_rx_timeElaspe_high_V <= rx_timeElapse_V(63 downto 32);
    axil_rx_timeElaspe_high_V_ap_vld <= ap_const_logic_1;
    axil_rx_timeElaspe_low_V <= rx_timeElapse_V(32 - 1 downto 0);
    axil_rx_timeElaspe_low_V_ap_vld <= ap_const_logic_1;
    axil_tx_done_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tx_done_V),32));
    axil_tx_done_V_ap_vld <= ap_const_logic_1;
    axil_tx_timeElapse_high_V <= tx_timeElapse_V(63 downto 32);
    axil_tx_timeElapse_high_V_ap_vld <= ap_const_logic_1;
    axil_tx_timeElapse_low_V <= tx_timeElapse_V(32 - 1 downto 0);
    axil_tx_timeElapse_low_V_ap_vld <= ap_const_logic_1;
    local_port_V <= axil_local_port_V(16 - 1 downto 0);
    pkt_len_V <= axil_pkt_len_V(16 - 1 downto 0);
    pkt_num_V <= axil_pkt_num_V;
    remote_ip_V <= axil_remote_ip_V;
    remote_port_V <= axil_remote_port_V(16 - 1 downto 0);
    start_V <= axil_start_V(1 - 1 downto 0);
end behav;
