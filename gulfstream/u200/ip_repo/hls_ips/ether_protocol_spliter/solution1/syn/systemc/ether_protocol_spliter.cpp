// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ether_protocol_spliter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ether_protocol_spliter::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> ether_protocol_spliter::ap_ST_fsm_state1 = "1";
const sc_lv<336> ether_protocol_spliter::ap_const_lv336_lc_1 = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> ether_protocol_spliter::ap_const_lv1_0 = "0";
const sc_lv<512> ether_protocol_spliter::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<16> ether_protocol_spliter::ap_const_lv16_0 = "0000000000000000";
const sc_lv<48> ether_protocol_spliter::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<64> ether_protocol_spliter::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> ether_protocol_spliter::ap_const_lv1_1 = "1";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_B0 = "10110000";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_1FF = "111111111";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_1D0 = "111010000";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_190 = "110010000";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_19F = "110011111";
const sc_lv<16> ether_protocol_spliter::ap_const_lv16_800 = "100000000000";
const sc_lv<48> ether_protocol_spliter::ap_const_lv48_FFFFFFFFFFFF = "111111111111111111111111111111111111111111111111";
const sc_lv<16> ether_protocol_spliter::ap_const_lv16_806 = "100000000110";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_15 = "10101";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_170 = "101110000";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_17F = "101111111";
const sc_lv<16> ether_protocol_spliter::ap_const_lv16_FFE4 = "1111111111100100";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_150 = "101010000";
const sc_lv<32> ether_protocol_spliter::ap_const_lv32_14F = "101001111";
const sc_logic ether_protocol_spliter::ap_const_logic_0 = sc_dt::Log_0;
const bool ether_protocol_spliter::ap_const_boolean_1 = true;

ether_protocol_spliter::ether_protocol_spliter(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln214_fu_602_p2);
    sensitive << ( p_Result_4_fu_592_p4 );

    SC_METHOD(thread_and_ln1355_3_fu_747_p2);
    sensitive << ( axis_input_reg_valid );
    sensitive << ( icmp_ln879_4_fu_450_p2 );

    SC_METHOD(thread_and_ln1355_4_fu_753_p2);
    sensitive << ( and_ln64_fu_478_p2 );
    sensitive << ( ret_V_18_fu_741_p2 );

    SC_METHOD(thread_and_ln1355_fu_544_p2);
    sensitive << ( s_axis_last_V );
    sensitive << ( xor_ln1355_fu_538_p2 );

    SC_METHOD(thread_and_ln63_fu_427_p2);
    sensitive << ( xor_ln761_fu_385_p2 );
    sensitive << ( icmp_ln879_3_fu_421_p2 );

    SC_METHOD(thread_and_ln64_fu_478_p2);
    sensitive << ( icmp_ln879_5_fu_466_p2 );
    sensitive << ( xor_ln761_1_fu_472_p2 );

    SC_METHOD(thread_and_ln879_1_fu_397_p2);
    sensitive << ( and_ln879_fu_391_p2 );
    sensitive << ( icmp_ln879_1_fu_379_p2 );

    SC_METHOD(thread_and_ln879_2_fu_484_p2);
    sensitive << ( icmp_ln879_4_fu_450_p2 );
    sensitive << ( and_ln64_fu_478_p2 );

    SC_METHOD(thread_and_ln879_3_fu_490_p2);
    sensitive << ( axis_input_reg_valid );
    sensitive << ( and_ln879_2_fu_484_p2 );

    SC_METHOD(thread_and_ln879_fu_391_p2);
    sensitive << ( icmp_ln879_fu_363_p2 );
    sensitive << ( xor_ln761_fu_385_p2 );

    SC_METHOD(thread_and_ln96_fu_784_p2);
    sensitive << ( axis_input_reg_valid );
    sensitive << ( icmp_ln879_4_fu_450_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_158);
    sensitive << ( ret_V_fu_556_p2 );
    sensitive << ( and_ln96_fu_784_p2 );
    sensitive << ( or_ln96_1_fu_802_p2 );

    SC_METHOD(thread_ap_phi_mux_p_Val2_3_phi_fu_256_p4);
    sensitive << ( payload_output_reg_d );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_3_load_fu_330_p1 );
    sensitive << ( ret_V_4_fu_568_p2 );
    sensitive << ( p_Result_s_10_fu_648_p5 );

    SC_METHOD(thread_ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_3_load_fu_330_p1 );
    sensitive << ( ret_V_4_fu_568_p2 );

    SC_METHOD(thread_ap_phi_mux_storemerge1171_phi_fu_265_p6);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_4_fu_568_p2 );
    sensitive << ( ret_V_10_fu_771_p2 );
    sensitive << ( ret_V_8_fu_759_p2 );

    SC_METHOD(thread_ap_phi_mux_val_assign_1_phi_fu_232_p6);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_3_load_fu_330_p1 );
    sensitive << ( or_ln63_fu_415_p2 );
    sensitive << ( and_ln63_fu_427_p2 );

    SC_METHOD(thread_arp_data_V);
    sensitive << ( arp_output_reg_data_s );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_arp_valid_V);
    sensitive << ( arp_output_reg_valid );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln70_fu_574_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_3_load_fu_330_p1 );
    sensitive << ( ret_V_4_fu_568_p2 );
    sensitive << ( icmp_ln879_4_fu_450_p2 );
    sensitive << ( p_Result_6_fu_456_p4 );

    SC_METHOD(thread_icmp_ln73_fu_626_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_3_load_fu_330_p1 );
    sensitive << ( ret_V_4_fu_568_p2 );
    sensitive << ( or_ln70_fu_580_p2 );
    sensitive << ( or_ln73_fu_620_p2 );
    sensitive << ( icmp_ln879_4_fu_450_p2 );
    sensitive << ( p_Result_6_fu_456_p4 );

    SC_METHOD(thread_icmp_ln879_1_fu_379_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_3_load_fu_330_p1 );
    sensitive << ( p_Result_1_fu_369_p4 );

    SC_METHOD(thread_icmp_ln879_2_fu_409_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_3_load_fu_330_p1 );
    sensitive << ( p_Result_s_fu_353_p4 );

    SC_METHOD(thread_icmp_ln879_3_fu_421_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_3_load_fu_330_p1 );
    sensitive << ( or_ln63_fu_415_p2 );
    sensitive << ( p_Result_1_fu_369_p4 );

    SC_METHOD(thread_icmp_ln879_4_fu_450_p2);
    sensitive << ( myMacAddr_reg_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_Result_5_fu_440_p4 );

    SC_METHOD(thread_icmp_ln879_5_fu_466_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( p_Result_6_fu_456_p4 );

    SC_METHOD(thread_icmp_ln879_6_fu_614_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_3_load_fu_330_p1 );
    sensitive << ( ret_V_4_fu_568_p2 );
    sensitive << ( or_ln70_fu_580_p2 );
    sensitive << ( icmp_ln879_4_fu_450_p2 );
    sensitive << ( p_Result_5_fu_440_p4 );

    SC_METHOD(thread_icmp_ln879_fu_363_p2);
    sensitive << ( myMacAddr_reg_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_3_load_fu_330_p1 );
    sensitive << ( p_Result_s_fu_353_p4 );

    SC_METHOD(thread_icmp_ln96_fu_790_p2);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln96_fu_784_p2 );
    sensitive << ( p_Result_6_fu_456_p4 );

    SC_METHOD(thread_ip_data_V);
    sensitive << ( ip_output_reg_data_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ip_valid_V);
    sensitive << ( ip_output_reg_valid_s );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_lhs_V_3_load_fu_330_p1);
    sensitive << ( axis_input_reg_valid );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_or_ln1355_1_fu_713_p2);
    sensitive << ( or_ln1355_fu_707_p2 );
    sensitive << ( ret_V_6_fu_667_p2 );

    SC_METHOD(thread_or_ln1355_fu_707_p2);
    sensitive << ( ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 );
    sensitive << ( ret_V_14_fu_506_p2 );

    SC_METHOD(thread_or_ln63_fu_415_p2);
    sensitive << ( icmp_ln879_fu_363_p2 );
    sensitive << ( icmp_ln879_2_fu_409_p2 );

    SC_METHOD(thread_or_ln70_fu_580_p2);
    sensitive << ( in_ip_packet_V );
    sensitive << ( icmp_ln70_fu_574_p2 );

    SC_METHOD(thread_or_ln73_1_fu_632_p2);
    sensitive << ( in_ip_packet_V );
    sensitive << ( icmp_ln73_fu_626_p2 );

    SC_METHOD(thread_or_ln73_fu_620_p2);
    sensitive << ( icmp_ln879_4_fu_450_p2 );
    sensitive << ( icmp_ln879_6_fu_614_p2 );

    SC_METHOD(thread_or_ln96_1_fu_802_p2);
    sensitive << ( axis_input_reg_last_s );
    sensitive << ( or_ln96_fu_796_p2 );

    SC_METHOD(thread_or_ln96_fu_796_p2);
    sensitive << ( ret_V_16_fu_550_p2 );
    sensitive << ( icmp_ln96_fu_790_p2 );

    SC_METHOD(thread_p_Result_1_fu_369_p4);
    sensitive << ( axis_input_reg_data_s );

    SC_METHOD(thread_p_Result_2_fu_683_p5);
    sensitive << ( ap_phi_mux_p_Val2_3_phi_fu_256_p4 );
    sensitive << ( p_Result_8_fu_673_p4 );

    SC_METHOD(thread_p_Result_3_fu_695_p5);
    sensitive << ( ap_phi_mux_p_Val2_3_phi_fu_256_p4 );

    SC_METHOD(thread_p_Result_4_fu_592_p4);
    sensitive << ( axis_input_reg_data_s );

    SC_METHOD(thread_p_Result_5_fu_440_p4);
    sensitive << ( axis_input_reg_data_s );

    SC_METHOD(thread_p_Result_6_fu_456_p4);
    sensitive << ( axis_input_reg_data_s );

    SC_METHOD(thread_p_Result_8_fu_673_p4);
    sensitive << ( s_axis_data_V );

    SC_METHOD(thread_p_Result_s_10_fu_648_p5);
    sensitive << ( payload_output_reg_d );
    sensitive << ( trunc_ln647_fu_644_p1 );

    SC_METHOD(thread_p_Result_s_fu_353_p4);
    sensitive << ( axis_input_reg_data_s );

    SC_METHOD(thread_payload_data_V);
    sensitive << ( payload_output_reg_d );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_payload_last_V);
    sensitive << ( payload_output_reg_l );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_payload_len_data_V);
    sensitive << ( payload_len_reg_data );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_payload_len_valid_V);
    sensitive << ( payload_len_reg_vali );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_payload_valid_V);
    sensitive << ( payload_output_reg_v );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ret_V_10_fu_771_p2);
    sensitive << ( in_ip_packet_V );
    sensitive << ( ret_V_17_fu_765_p2 );

    SC_METHOD(thread_ret_V_14_fu_506_p2);
    sensitive << ( axis_input_reg_valid );
    sensitive << ( axis_input_reg_last_s );

    SC_METHOD(thread_ret_V_15_fu_524_p2);
    sensitive << ( ret_V_14_fu_506_p2 );
    sensitive << ( tmp_fu_516_p3 );

    SC_METHOD(thread_ret_V_16_fu_550_p2);
    sensitive << ( s_axis_valid_V );
    sensitive << ( and_ln1355_fu_544_p2 );

    SC_METHOD(thread_ret_V_17_fu_765_p2);
    sensitive << ( s_axis_valid_V );
    sensitive << ( ret_V_14_fu_506_p2 );

    SC_METHOD(thread_ret_V_18_fu_741_p2);
    sensitive << ( s_axis_valid_V );
    sensitive << ( axis_input_reg_last_s );

    SC_METHOD(thread_ret_V_4_fu_568_p2);
    sensitive << ( s_axis_valid_V );
    sensitive << ( axis_input_reg_valid );

    SC_METHOD(thread_ret_V_6_fu_667_p2);
    sensitive << ( s_axis_valid_V );
    sensitive << ( rhs_V_fu_661_p2 );

    SC_METHOD(thread_ret_V_8_fu_759_p2);
    sensitive << ( and_ln1355_4_fu_753_p2 );
    sensitive << ( and_ln1355_3_fu_747_p2 );

    SC_METHOD(thread_ret_V_fu_556_p2);
    sensitive << ( ret_V_15_fu_524_p2 );
    sensitive << ( ret_V_16_fu_550_p2 );

    SC_METHOD(thread_rhs_V_fu_661_p2);
    sensitive << ( ret_V_14_fu_506_p2 );

    SC_METHOD(thread_select_ln1355_1_fu_727_p3);
    sensitive << ( ret_V_14_fu_506_p2 );
    sensitive << ( p_Result_3_fu_695_p5 );
    sensitive << ( select_ln1355_fu_719_p3 );

    SC_METHOD(thread_select_ln1355_fu_719_p3);
    sensitive << ( ap_phi_mux_p_Val2_3_phi_fu_256_p4 );
    sensitive << ( ret_V_6_fu_667_p2 );
    sensitive << ( p_Result_2_fu_683_p5 );

    SC_METHOD(thread_tmp_1_fu_530_p3);
    sensitive << ( s_axis_keep_V );

    SC_METHOD(thread_tmp_fu_516_p3);
    sensitive << ( axis_input_reg_keep_s );

    SC_METHOD(thread_trunc_ln647_fu_644_p1);
    sensitive << ( axis_input_reg_data_s );

    SC_METHOD(thread_xor_ln1355_fu_538_p2);
    sensitive << ( tmp_1_fu_530_p3 );

    SC_METHOD(thread_xor_ln761_1_fu_472_p2);
    sensitive << ( in_ip_packet_V );

    SC_METHOD(thread_xor_ln761_fu_385_p2);
    sensitive << ( in_ip_packet_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    arp_output_reg_data_s = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    arp_output_reg_valid = "0";
    ip_output_reg_data_V = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    ip_output_reg_valid_s = "0";
    payload_output_reg_d = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    payload_output_reg_v = "0";
    payload_output_reg_l = "0";
    payload_len_reg_data = "0000000000000000";
    payload_len_reg_vali = "0";
    axis_input_reg_valid = "0";
    axis_input_reg_data_s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    myMacAddr_reg_V = "000000000000000000000000000000000000000000000000";
    in_ip_packet_V = "0";
    axis_input_reg_last_s = "0";
    axis_input_reg_keep_s = "0000000000000000000000000000000000000000000000000000000000000000";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ether_protocol_spliter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, myMacAddr_V, "(port)myMacAddr_V");
    sc_trace(mVcdFile, s_axis_data_V, "(port)s_axis_data_V");
    sc_trace(mVcdFile, s_axis_keep_V, "(port)s_axis_keep_V");
    sc_trace(mVcdFile, s_axis_last_V, "(port)s_axis_last_V");
    sc_trace(mVcdFile, s_axis_valid_V, "(port)s_axis_valid_V");
    sc_trace(mVcdFile, arp_data_V, "(port)arp_data_V");
    sc_trace(mVcdFile, arp_valid_V, "(port)arp_valid_V");
    sc_trace(mVcdFile, ip_data_V, "(port)ip_data_V");
    sc_trace(mVcdFile, ip_valid_V, "(port)ip_valid_V");
    sc_trace(mVcdFile, payload_data_V, "(port)payload_data_V");
    sc_trace(mVcdFile, payload_valid_V, "(port)payload_valid_V");
    sc_trace(mVcdFile, payload_last_V, "(port)payload_last_V");
    sc_trace(mVcdFile, payload_len_data_V, "(port)payload_len_data_V");
    sc_trace(mVcdFile, payload_len_valid_V, "(port)payload_len_valid_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, arp_output_reg_data_s, "arp_output_reg_data_s");
    sc_trace(mVcdFile, arp_output_reg_valid, "arp_output_reg_valid");
    sc_trace(mVcdFile, ip_output_reg_data_V, "ip_output_reg_data_V");
    sc_trace(mVcdFile, ip_output_reg_valid_s, "ip_output_reg_valid_s");
    sc_trace(mVcdFile, payload_output_reg_d, "payload_output_reg_d");
    sc_trace(mVcdFile, payload_output_reg_v, "payload_output_reg_v");
    sc_trace(mVcdFile, payload_output_reg_l, "payload_output_reg_l");
    sc_trace(mVcdFile, payload_len_reg_data, "payload_len_reg_data");
    sc_trace(mVcdFile, payload_len_reg_vali, "payload_len_reg_vali");
    sc_trace(mVcdFile, axis_input_reg_valid, "axis_input_reg_valid");
    sc_trace(mVcdFile, axis_input_reg_data_s, "axis_input_reg_data_s");
    sc_trace(mVcdFile, myMacAddr_reg_V, "myMacAddr_reg_V");
    sc_trace(mVcdFile, in_ip_packet_V, "in_ip_packet_V");
    sc_trace(mVcdFile, axis_input_reg_last_s, "axis_input_reg_last_s");
    sc_trace(mVcdFile, axis_input_reg_keep_s, "axis_input_reg_keep_s");
    sc_trace(mVcdFile, ap_phi_mux_val_assign_1_phi_fu_232_p6, "ap_phi_mux_val_assign_1_phi_fu_232_p6");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, lhs_V_3_load_fu_330_p1, "lhs_V_3_load_fu_330_p1");
    sc_trace(mVcdFile, or_ln63_fu_415_p2, "or_ln63_fu_415_p2");
    sc_trace(mVcdFile, and_ln63_fu_427_p2, "and_ln63_fu_427_p2");
    sc_trace(mVcdFile, ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4, "ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4");
    sc_trace(mVcdFile, ret_V_4_fu_568_p2, "ret_V_4_fu_568_p2");
    sc_trace(mVcdFile, p_Result_s_10_fu_648_p5, "p_Result_s_10_fu_648_p5");
    sc_trace(mVcdFile, ap_phi_mux_p_Val2_3_phi_fu_256_p4, "ap_phi_mux_p_Val2_3_phi_fu_256_p4");
    sc_trace(mVcdFile, ret_V_10_fu_771_p2, "ret_V_10_fu_771_p2");
    sc_trace(mVcdFile, ap_phi_mux_storemerge1171_phi_fu_265_p6, "ap_phi_mux_storemerge1171_phi_fu_265_p6");
    sc_trace(mVcdFile, ret_V_8_fu_759_p2, "ret_V_8_fu_759_p2");
    sc_trace(mVcdFile, or_ln70_fu_580_p2, "or_ln70_fu_580_p2");
    sc_trace(mVcdFile, or_ln73_fu_620_p2, "or_ln73_fu_620_p2");
    sc_trace(mVcdFile, or_ln73_1_fu_632_p2, "or_ln73_1_fu_632_p2");
    sc_trace(mVcdFile, icmp_ln879_4_fu_450_p2, "icmp_ln879_4_fu_450_p2");
    sc_trace(mVcdFile, and_ln879_1_fu_397_p2, "and_ln879_1_fu_397_p2");
    sc_trace(mVcdFile, select_ln1355_1_fu_727_p3, "select_ln1355_1_fu_727_p3");
    sc_trace(mVcdFile, or_ln1355_1_fu_713_p2, "or_ln1355_1_fu_713_p2");
    sc_trace(mVcdFile, ret_V_fu_556_p2, "ret_V_fu_556_p2");
    sc_trace(mVcdFile, add_ln214_fu_602_p2, "add_ln214_fu_602_p2");
    sc_trace(mVcdFile, and_ln879_3_fu_490_p2, "and_ln879_3_fu_490_p2");
    sc_trace(mVcdFile, and_ln96_fu_784_p2, "and_ln96_fu_784_p2");
    sc_trace(mVcdFile, or_ln96_1_fu_802_p2, "or_ln96_1_fu_802_p2");
    sc_trace(mVcdFile, p_Result_s_fu_353_p4, "p_Result_s_fu_353_p4");
    sc_trace(mVcdFile, p_Result_1_fu_369_p4, "p_Result_1_fu_369_p4");
    sc_trace(mVcdFile, icmp_ln879_fu_363_p2, "icmp_ln879_fu_363_p2");
    sc_trace(mVcdFile, xor_ln761_fu_385_p2, "xor_ln761_fu_385_p2");
    sc_trace(mVcdFile, and_ln879_fu_391_p2, "and_ln879_fu_391_p2");
    sc_trace(mVcdFile, icmp_ln879_1_fu_379_p2, "icmp_ln879_1_fu_379_p2");
    sc_trace(mVcdFile, icmp_ln879_2_fu_409_p2, "icmp_ln879_2_fu_409_p2");
    sc_trace(mVcdFile, icmp_ln879_3_fu_421_p2, "icmp_ln879_3_fu_421_p2");
    sc_trace(mVcdFile, p_Result_5_fu_440_p4, "p_Result_5_fu_440_p4");
    sc_trace(mVcdFile, p_Result_6_fu_456_p4, "p_Result_6_fu_456_p4");
    sc_trace(mVcdFile, icmp_ln879_5_fu_466_p2, "icmp_ln879_5_fu_466_p2");
    sc_trace(mVcdFile, xor_ln761_1_fu_472_p2, "xor_ln761_1_fu_472_p2");
    sc_trace(mVcdFile, and_ln64_fu_478_p2, "and_ln64_fu_478_p2");
    sc_trace(mVcdFile, and_ln879_2_fu_484_p2, "and_ln879_2_fu_484_p2");
    sc_trace(mVcdFile, ret_V_14_fu_506_p2, "ret_V_14_fu_506_p2");
    sc_trace(mVcdFile, tmp_fu_516_p3, "tmp_fu_516_p3");
    sc_trace(mVcdFile, tmp_1_fu_530_p3, "tmp_1_fu_530_p3");
    sc_trace(mVcdFile, xor_ln1355_fu_538_p2, "xor_ln1355_fu_538_p2");
    sc_trace(mVcdFile, and_ln1355_fu_544_p2, "and_ln1355_fu_544_p2");
    sc_trace(mVcdFile, ret_V_15_fu_524_p2, "ret_V_15_fu_524_p2");
    sc_trace(mVcdFile, ret_V_16_fu_550_p2, "ret_V_16_fu_550_p2");
    sc_trace(mVcdFile, icmp_ln70_fu_574_p2, "icmp_ln70_fu_574_p2");
    sc_trace(mVcdFile, p_Result_4_fu_592_p4, "p_Result_4_fu_592_p4");
    sc_trace(mVcdFile, icmp_ln879_6_fu_614_p2, "icmp_ln879_6_fu_614_p2");
    sc_trace(mVcdFile, icmp_ln73_fu_626_p2, "icmp_ln73_fu_626_p2");
    sc_trace(mVcdFile, trunc_ln647_fu_644_p1, "trunc_ln647_fu_644_p1");
    sc_trace(mVcdFile, rhs_V_fu_661_p2, "rhs_V_fu_661_p2");
    sc_trace(mVcdFile, p_Result_8_fu_673_p4, "p_Result_8_fu_673_p4");
    sc_trace(mVcdFile, or_ln1355_fu_707_p2, "or_ln1355_fu_707_p2");
    sc_trace(mVcdFile, ret_V_6_fu_667_p2, "ret_V_6_fu_667_p2");
    sc_trace(mVcdFile, p_Result_2_fu_683_p5, "p_Result_2_fu_683_p5");
    sc_trace(mVcdFile, p_Result_3_fu_695_p5, "p_Result_3_fu_695_p5");
    sc_trace(mVcdFile, select_ln1355_fu_719_p3, "select_ln1355_fu_719_p3");
    sc_trace(mVcdFile, ret_V_18_fu_741_p2, "ret_V_18_fu_741_p2");
    sc_trace(mVcdFile, and_ln1355_4_fu_753_p2, "and_ln1355_4_fu_753_p2");
    sc_trace(mVcdFile, and_ln1355_3_fu_747_p2, "and_ln1355_3_fu_747_p2");
    sc_trace(mVcdFile, ret_V_17_fu_765_p2, "ret_V_17_fu_765_p2");
    sc_trace(mVcdFile, icmp_ln96_fu_790_p2, "icmp_ln96_fu_790_p2");
    sc_trace(mVcdFile, or_ln96_fu_796_p2, "or_ln96_fu_796_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_158, "ap_condition_158");
#endif

    }
    mHdltvinHandle.open("ether_protocol_spliter.hdltvin.dat");
    mHdltvoutHandle.open("ether_protocol_spliter.hdltvout.dat");
}

ether_protocol_spliter::~ether_protocol_spliter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ether_protocol_spliter::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_output_reg_data_s = ap_const_lv336_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             ((esl_seteq<1,1,1>(lhs_V_3_load_fu_330_p1.read(), ap_const_lv1_1) && 
               esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_4_fu_568_p2.read()) && 
               esl_seteq<1,1,1>(ap_const_lv1_1, or_ln70_fu_580_p2.read()) && 
               esl_seteq<1,1,1>(ap_const_lv1_1, or_ln73_fu_620_p2.read()) && 
               esl_seteq<1,1,1>(ap_const_lv1_0, or_ln73_1_fu_632_p2.read())) || 
              (esl_seteq<1,1,1>(lhs_V_3_load_fu_330_p1.read(), ap_const_lv1_1) && 
               esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_4_fu_568_p2.read()) && 
               esl_seteq<1,1,1>(ap_const_lv1_1, or_ln73_fu_620_p2.read()) && 
               esl_seteq<1,1,1>(ap_const_lv1_0, or_ln73_1_fu_632_p2.read()) && 
               esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_4_fu_450_p2.read()))))) {
            arp_output_reg_data_s = axis_input_reg_data_s.read().range(511, 176);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        arp_output_reg_valid = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            arp_output_reg_valid = ap_phi_mux_val_assign_1_phi_fu_232_p6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        axis_input_reg_data_s = ap_const_lv512_lc_1;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            axis_input_reg_data_s = s_axis_data_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        axis_input_reg_keep_s = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            axis_input_reg_keep_s = s_axis_keep_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        axis_input_reg_last_s = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            axis_input_reg_last_s = s_axis_last_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        axis_input_reg_valid = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            axis_input_reg_valid = s_axis_valid_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_ip_packet_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ap_condition_158.read(), ap_const_boolean_1)) {
                in_ip_packet_V = ap_const_lv1_0;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, and_ln96_fu_784_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_0, or_ln96_1_fu_802_p2.read()))) {
                in_ip_packet_V = ap_const_lv1_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_output_reg_data_V = ap_const_lv336_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(lhs_V_3_load_fu_330_p1.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_4_fu_568_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_4_fu_450_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, or_ln70_fu_580_p2.read()))) {
            ip_output_reg_data_V = axis_input_reg_data_s.read().range(511, 176);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ip_output_reg_valid_s = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(lhs_V_3_load_fu_330_p1.read(), ap_const_lv1_1)) {
                ip_output_reg_valid_s = and_ln879_1_fu_397_p2.read();
            } else if (esl_seteq<1,1,1>(ap_const_lv1_0, lhs_V_3_load_fu_330_p1.read())) {
                ip_output_reg_valid_s = ap_const_lv1_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        myMacAddr_reg_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            myMacAddr_reg_V = myMacAddr_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_len_reg_data = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(lhs_V_3_load_fu_330_p1.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_4_fu_568_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln879_4_fu_450_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_0, or_ln70_fu_580_p2.read()))) {
            payload_len_reg_data = add_ln214_fu_602_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_len_reg_vali = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            payload_len_reg_vali = and_ln879_3_fu_490_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_output_reg_d = ap_const_lv512_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_4_fu_568_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, or_ln1355_1_fu_713_p2.read()))) {
            payload_output_reg_d = select_ln1355_1_fu_727_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_output_reg_l = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            payload_output_reg_l = ret_V_fu_556_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_output_reg_v = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            payload_output_reg_v = ap_phi_mux_storemerge1171_phi_fu_265_p6.read();
        }
    }
}

void ether_protocol_spliter::thread_add_ln214_fu_602_p2() {
    add_ln214_fu_602_p2 = (!p_Result_4_fu_592_p4.read().is_01() || !ap_const_lv16_FFE4.is_01())? sc_lv<16>(): (sc_biguint<16>(p_Result_4_fu_592_p4.read()) + sc_bigint<16>(ap_const_lv16_FFE4));
}

void ether_protocol_spliter::thread_and_ln1355_3_fu_747_p2() {
    and_ln1355_3_fu_747_p2 = (axis_input_reg_valid.read() & icmp_ln879_4_fu_450_p2.read());
}

void ether_protocol_spliter::thread_and_ln1355_4_fu_753_p2() {
    and_ln1355_4_fu_753_p2 = (and_ln64_fu_478_p2.read() & ret_V_18_fu_741_p2.read());
}

void ether_protocol_spliter::thread_and_ln1355_fu_544_p2() {
    and_ln1355_fu_544_p2 = (s_axis_last_V.read() & xor_ln1355_fu_538_p2.read());
}

void ether_protocol_spliter::thread_and_ln63_fu_427_p2() {
    and_ln63_fu_427_p2 = (icmp_ln879_3_fu_421_p2.read() & xor_ln761_fu_385_p2.read());
}

void ether_protocol_spliter::thread_and_ln64_fu_478_p2() {
    and_ln64_fu_478_p2 = (icmp_ln879_5_fu_466_p2.read() & xor_ln761_1_fu_472_p2.read());
}

void ether_protocol_spliter::thread_and_ln879_1_fu_397_p2() {
    and_ln879_1_fu_397_p2 = (and_ln879_fu_391_p2.read() & icmp_ln879_1_fu_379_p2.read());
}

void ether_protocol_spliter::thread_and_ln879_2_fu_484_p2() {
    and_ln879_2_fu_484_p2 = (icmp_ln879_4_fu_450_p2.read() & and_ln64_fu_478_p2.read());
}

void ether_protocol_spliter::thread_and_ln879_3_fu_490_p2() {
    and_ln879_3_fu_490_p2 = (and_ln879_2_fu_484_p2.read() & axis_input_reg_valid.read());
}

void ether_protocol_spliter::thread_and_ln879_fu_391_p2() {
    and_ln879_fu_391_p2 = (icmp_ln879_fu_363_p2.read() & xor_ln761_fu_385_p2.read());
}

void ether_protocol_spliter::thread_and_ln96_fu_784_p2() {
    and_ln96_fu_784_p2 = (axis_input_reg_valid.read() & icmp_ln879_4_fu_450_p2.read());
}

void ether_protocol_spliter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ether_protocol_spliter::thread_ap_condition_158() {
    ap_condition_158 = ((esl_seteq<1,1,1>(ap_const_lv1_1, or_ln96_1_fu_802_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_fu_556_p2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_fu_556_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, and_ln96_fu_784_p2.read())));
}

void ether_protocol_spliter::thread_ap_phi_mux_p_Val2_3_phi_fu_256_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_4_fu_568_p2.read()))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, lhs_V_3_load_fu_330_p1.read())) {
            ap_phi_mux_p_Val2_3_phi_fu_256_p4 = payload_output_reg_d.read();
        } else if (esl_seteq<1,1,1>(lhs_V_3_load_fu_330_p1.read(), ap_const_lv1_1)) {
            ap_phi_mux_p_Val2_3_phi_fu_256_p4 = p_Result_s_10_fu_648_p5.read();
        } else {
            ap_phi_mux_p_Val2_3_phi_fu_256_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_p_Val2_3_phi_fu_256_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void ether_protocol_spliter::thread_ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_4_fu_568_p2.read()))) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, lhs_V_3_load_fu_330_p1.read())) {
            ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(lhs_V_3_load_fu_330_p1.read(), ap_const_lv1_1)) {
            ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 = ap_const_lv1_1;
        } else {
            ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 =  (sc_lv<1>) ("X");
        }
    } else {
        ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 =  (sc_lv<1>) ("X");
    }
}

void ether_protocol_spliter::thread_ap_phi_mux_storemerge1171_phi_fu_265_p6() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_4_fu_568_p2.read()) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_8_fu_759_p2.read()))) {
            ap_phi_mux_storemerge1171_phi_fu_265_p6 = ap_const_lv1_1;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_4_fu_568_p2.read())) {
            ap_phi_mux_storemerge1171_phi_fu_265_p6 = ap_const_lv1_0;
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_4_fu_568_p2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_8_fu_759_p2.read()))) {
            ap_phi_mux_storemerge1171_phi_fu_265_p6 = ret_V_10_fu_771_p2.read();
        } else {
            ap_phi_mux_storemerge1171_phi_fu_265_p6 =  (sc_lv<1>) ("X");
        }
    } else {
        ap_phi_mux_storemerge1171_phi_fu_265_p6 =  (sc_lv<1>) ("X");
    }
}

void ether_protocol_spliter::thread_ap_phi_mux_val_assign_1_phi_fu_232_p6() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(lhs_V_3_load_fu_330_p1.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, or_ln63_fu_415_p2.read()))) {
        ap_phi_mux_val_assign_1_phi_fu_232_p6 = and_ln63_fu_427_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, lhs_V_3_load_fu_330_p1.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(lhs_V_3_load_fu_330_p1.read(), ap_const_lv1_1) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, or_ln63_fu_415_p2.read())))) {
        ap_phi_mux_val_assign_1_phi_fu_232_p6 = ap_const_lv1_0;
    } else {
        ap_phi_mux_val_assign_1_phi_fu_232_p6 =  (sc_lv<1>) ("X");
    }
}

void ether_protocol_spliter::thread_arp_data_V() {
    arp_data_V = arp_output_reg_data_s.read();
}

void ether_protocol_spliter::thread_arp_valid_V() {
    arp_valid_V = arp_output_reg_valid.read();
}

void ether_protocol_spliter::thread_icmp_ln70_fu_574_p2() {
    icmp_ln70_fu_574_p2 = (!p_Result_6_fu_456_p4.read().is_01() || !ap_const_lv16_800.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_6_fu_456_p4.read() != ap_const_lv16_800);
}

void ether_protocol_spliter::thread_icmp_ln73_fu_626_p2() {
    icmp_ln73_fu_626_p2 = (!p_Result_6_fu_456_p4.read().is_01() || !ap_const_lv16_806.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_6_fu_456_p4.read() != ap_const_lv16_806);
}

void ether_protocol_spliter::thread_icmp_ln879_1_fu_379_p2() {
    icmp_ln879_1_fu_379_p2 = (!p_Result_1_fu_369_p4.read().is_01() || !ap_const_lv16_800.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_1_fu_369_p4.read() == ap_const_lv16_800);
}

void ether_protocol_spliter::thread_icmp_ln879_2_fu_409_p2() {
    icmp_ln879_2_fu_409_p2 = (!p_Result_s_fu_353_p4.read().is_01() || !ap_const_lv48_FFFFFFFFFFFF.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_s_fu_353_p4.read() == ap_const_lv48_FFFFFFFFFFFF);
}

void ether_protocol_spliter::thread_icmp_ln879_3_fu_421_p2() {
    icmp_ln879_3_fu_421_p2 = (!p_Result_1_fu_369_p4.read().is_01() || !ap_const_lv16_806.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_1_fu_369_p4.read() == ap_const_lv16_806);
}

void ether_protocol_spliter::thread_icmp_ln879_4_fu_450_p2() {
    icmp_ln879_4_fu_450_p2 = (!p_Result_5_fu_440_p4.read().is_01() || !myMacAddr_reg_V.read().is_01())? sc_lv<1>(): sc_lv<1>(p_Result_5_fu_440_p4.read() == myMacAddr_reg_V.read());
}

void ether_protocol_spliter::thread_icmp_ln879_5_fu_466_p2() {
    icmp_ln879_5_fu_466_p2 = (!p_Result_6_fu_456_p4.read().is_01() || !ap_const_lv16_800.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_6_fu_456_p4.read() == ap_const_lv16_800);
}

void ether_protocol_spliter::thread_icmp_ln879_6_fu_614_p2() {
    icmp_ln879_6_fu_614_p2 = (!p_Result_5_fu_440_p4.read().is_01() || !ap_const_lv48_FFFFFFFFFFFF.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_5_fu_440_p4.read() == ap_const_lv48_FFFFFFFFFFFF);
}

void ether_protocol_spliter::thread_icmp_ln879_fu_363_p2() {
    icmp_ln879_fu_363_p2 = (!p_Result_s_fu_353_p4.read().is_01() || !myMacAddr_reg_V.read().is_01())? sc_lv<1>(): sc_lv<1>(p_Result_s_fu_353_p4.read() == myMacAddr_reg_V.read());
}

void ether_protocol_spliter::thread_icmp_ln96_fu_790_p2() {
    icmp_ln96_fu_790_p2 = (!p_Result_6_fu_456_p4.read().is_01() || !ap_const_lv16_800.is_01())? sc_lv<1>(): sc_lv<1>(p_Result_6_fu_456_p4.read() != ap_const_lv16_800);
}

void ether_protocol_spliter::thread_ip_data_V() {
    ip_data_V = ip_output_reg_data_V.read();
}

void ether_protocol_spliter::thread_ip_valid_V() {
    ip_valid_V = ip_output_reg_valid_s.read();
}

void ether_protocol_spliter::thread_lhs_V_3_load_fu_330_p1() {
    lhs_V_3_load_fu_330_p1 = axis_input_reg_valid.read();
}

void ether_protocol_spliter::thread_or_ln1355_1_fu_713_p2() {
    or_ln1355_1_fu_713_p2 = (or_ln1355_fu_707_p2.read() | ret_V_6_fu_667_p2.read());
}

void ether_protocol_spliter::thread_or_ln1355_fu_707_p2() {
    or_ln1355_fu_707_p2 = (ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4.read() | ret_V_14_fu_506_p2.read());
}

void ether_protocol_spliter::thread_or_ln63_fu_415_p2() {
    or_ln63_fu_415_p2 = (icmp_ln879_2_fu_409_p2.read() | icmp_ln879_fu_363_p2.read());
}

void ether_protocol_spliter::thread_or_ln70_fu_580_p2() {
    or_ln70_fu_580_p2 = (in_ip_packet_V.read() | icmp_ln70_fu_574_p2.read());
}

void ether_protocol_spliter::thread_or_ln73_1_fu_632_p2() {
    or_ln73_1_fu_632_p2 = (in_ip_packet_V.read() | icmp_ln73_fu_626_p2.read());
}

void ether_protocol_spliter::thread_or_ln73_fu_620_p2() {
    or_ln73_fu_620_p2 = (icmp_ln879_6_fu_614_p2.read() | icmp_ln879_4_fu_450_p2.read());
}

void ether_protocol_spliter::thread_or_ln96_1_fu_802_p2() {
    or_ln96_1_fu_802_p2 = (or_ln96_fu_796_p2.read() | axis_input_reg_last_s.read());
}

void ether_protocol_spliter::thread_or_ln96_fu_796_p2() {
    or_ln96_fu_796_p2 = (icmp_ln96_fu_790_p2.read() | ret_V_16_fu_550_p2.read());
}

void ether_protocol_spliter::thread_p_Result_1_fu_369_p4() {
    p_Result_1_fu_369_p4 = axis_input_reg_data_s.read().range(415, 400);
}

void ether_protocol_spliter::thread_p_Result_2_fu_683_p5() {
    p_Result_2_fu_683_p5 = esl_partset<512,512,336,32,32>(ap_phi_mux_p_Val2_3_phi_fu_256_p4.read(), p_Result_8_fu_673_p4.read(), ap_const_lv32_0, ap_const_lv32_14F);
}

void ether_protocol_spliter::thread_p_Result_3_fu_695_p5() {
    p_Result_3_fu_695_p5 = esl_partset<512,512,336,32,32>(ap_phi_mux_p_Val2_3_phi_fu_256_p4.read(), ap_const_lv336_lc_1, ap_const_lv32_0, ap_const_lv32_14F);
}

void ether_protocol_spliter::thread_p_Result_4_fu_592_p4() {
    p_Result_4_fu_592_p4 = axis_input_reg_data_s.read().range(383, 368);
}

void ether_protocol_spliter::thread_p_Result_5_fu_440_p4() {
    p_Result_5_fu_440_p4 = axis_input_reg_data_s.read().range(511, 464);
}

void ether_protocol_spliter::thread_p_Result_6_fu_456_p4() {
    p_Result_6_fu_456_p4 = axis_input_reg_data_s.read().range(415, 400);
}

void ether_protocol_spliter::thread_p_Result_8_fu_673_p4() {
    p_Result_8_fu_673_p4 = s_axis_data_V.read().range(511, 176);
}

void ether_protocol_spliter::thread_p_Result_s_10_fu_648_p5() {
    p_Result_s_10_fu_648_p5 = esl_partset<512,512,176,32,32>(payload_output_reg_d.read(), trunc_ln647_fu_644_p1.read(), ap_const_lv32_150, ap_const_lv32_1FF);
}

void ether_protocol_spliter::thread_p_Result_s_fu_353_p4() {
    p_Result_s_fu_353_p4 = axis_input_reg_data_s.read().range(511, 464);
}

void ether_protocol_spliter::thread_payload_data_V() {
    payload_data_V = payload_output_reg_d.read();
}

void ether_protocol_spliter::thread_payload_last_V() {
    payload_last_V = payload_output_reg_l.read();
}

void ether_protocol_spliter::thread_payload_len_data_V() {
    payload_len_data_V = payload_len_reg_data.read();
}

void ether_protocol_spliter::thread_payload_len_valid_V() {
    payload_len_valid_V = payload_len_reg_vali.read();
}

void ether_protocol_spliter::thread_payload_valid_V() {
    payload_valid_V = payload_output_reg_v.read();
}

void ether_protocol_spliter::thread_ret_V_10_fu_771_p2() {
    ret_V_10_fu_771_p2 = (in_ip_packet_V.read() & ret_V_17_fu_765_p2.read());
}

void ether_protocol_spliter::thread_ret_V_14_fu_506_p2() {
    ret_V_14_fu_506_p2 = (axis_input_reg_valid.read() & axis_input_reg_last_s.read());
}

void ether_protocol_spliter::thread_ret_V_15_fu_524_p2() {
    ret_V_15_fu_524_p2 = (ret_V_14_fu_506_p2.read() & tmp_fu_516_p3.read());
}

void ether_protocol_spliter::thread_ret_V_16_fu_550_p2() {
    ret_V_16_fu_550_p2 = (and_ln1355_fu_544_p2.read() & s_axis_valid_V.read());
}

void ether_protocol_spliter::thread_ret_V_17_fu_765_p2() {
    ret_V_17_fu_765_p2 = (ret_V_14_fu_506_p2.read() | s_axis_valid_V.read());
}

void ether_protocol_spliter::thread_ret_V_18_fu_741_p2() {
    ret_V_18_fu_741_p2 = (axis_input_reg_last_s.read() | s_axis_valid_V.read());
}

void ether_protocol_spliter::thread_ret_V_4_fu_568_p2() {
    ret_V_4_fu_568_p2 = (axis_input_reg_valid.read() | s_axis_valid_V.read());
}

void ether_protocol_spliter::thread_ret_V_6_fu_667_p2() {
    ret_V_6_fu_667_p2 = (s_axis_valid_V.read() & rhs_V_fu_661_p2.read());
}

void ether_protocol_spliter::thread_ret_V_8_fu_759_p2() {
    ret_V_8_fu_759_p2 = (and_ln1355_4_fu_753_p2.read() & and_ln1355_3_fu_747_p2.read());
}

void ether_protocol_spliter::thread_ret_V_fu_556_p2() {
    ret_V_fu_556_p2 = (ret_V_15_fu_524_p2.read() | ret_V_16_fu_550_p2.read());
}

void ether_protocol_spliter::thread_rhs_V_fu_661_p2() {
    rhs_V_fu_661_p2 = (ret_V_14_fu_506_p2.read() ^ ap_const_lv1_1);
}

void ether_protocol_spliter::thread_select_ln1355_1_fu_727_p3() {
    select_ln1355_1_fu_727_p3 = (!ret_V_14_fu_506_p2.read()[0].is_01())? sc_lv<512>(): ((ret_V_14_fu_506_p2.read()[0].to_bool())? p_Result_3_fu_695_p5.read(): select_ln1355_fu_719_p3.read());
}

void ether_protocol_spliter::thread_select_ln1355_fu_719_p3() {
    select_ln1355_fu_719_p3 = (!ret_V_6_fu_667_p2.read()[0].is_01())? sc_lv<512>(): ((ret_V_6_fu_667_p2.read()[0].to_bool())? p_Result_2_fu_683_p5.read(): ap_phi_mux_p_Val2_3_phi_fu_256_p4.read());
}

void ether_protocol_spliter::thread_tmp_1_fu_530_p3() {
    tmp_1_fu_530_p3 = s_axis_keep_V.read().range(21, 21);
}

void ether_protocol_spliter::thread_tmp_fu_516_p3() {
    tmp_fu_516_p3 = axis_input_reg_keep_s.read().range(21, 21);
}

void ether_protocol_spliter::thread_trunc_ln647_fu_644_p1() {
    trunc_ln647_fu_644_p1 = axis_input_reg_data_s.read().range(176-1, 0);
}

void ether_protocol_spliter::thread_xor_ln1355_fu_538_p2() {
    xor_ln1355_fu_538_p2 = (tmp_1_fu_530_p3.read() ^ ap_const_lv1_1);
}

void ether_protocol_spliter::thread_xor_ln761_1_fu_472_p2() {
    xor_ln761_1_fu_472_p2 = (in_ip_packet_V.read() ^ ap_const_lv1_1);
}

void ether_protocol_spliter::thread_xor_ln761_fu_385_p2() {
    xor_ln761_fu_385_p2 = (in_ip_packet_V.read() ^ ap_const_lv1_1);
}

void ether_protocol_spliter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void ether_protocol_spliter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"myMacAddr_V\" :  \"" << myMacAddr_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_data_V\" :  \"" << s_axis_data_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_keep_V\" :  \"" << s_axis_keep_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_last_V\" :  \"" << s_axis_last_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axis_valid_V\" :  \"" << s_axis_valid_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"arp_data_V\" :  \"" << arp_data_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"arp_valid_V\" :  \"" << arp_valid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ip_data_V\" :  \"" << ip_data_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ip_valid_V\" :  \"" << ip_valid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_data_V\" :  \"" << payload_data_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_valid_V\" :  \"" << payload_valid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_last_V\" :  \"" << payload_last_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_len_data_V\" :  \"" << payload_len_data_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_len_valid_V\" :  \"" << payload_len_valid_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

