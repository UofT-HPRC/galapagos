// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "action_excecutor.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic action_excecutor::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> action_excecutor::ap_ST_fsm_state1 = "1";
const sc_lv<512> action_excecutor::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> action_excecutor::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> action_excecutor::ap_const_lv1_0 = "0";
const sc_lv<32> action_excecutor::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<16> action_excecutor::ap_const_lv16_0 = "0000000000000000";
const sc_lv<1> action_excecutor::ap_const_lv1_1 = "1";
const sc_lv<32> action_excecutor::ap_const_lv32_40 = "1000000";
const sc_lv<32> action_excecutor::ap_const_lv32_20 = "100000";
const sc_lv<32> action_excecutor::ap_const_lv32_2F = "101111";
const sc_lv<32> action_excecutor::ap_const_lv32_30 = "110000";
const sc_lv<32> action_excecutor::ap_const_lv32_3F = "111111";
const sc_logic action_excecutor::ap_const_logic_0 = sc_dt::Log_0;
const bool action_excecutor::ap_const_boolean_1 = true;

action_excecutor::action_excecutor(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_action_re_V);
    sensitive << ( payload_in_valid_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln1355_fu_380_p2 );

    SC_METHOD(thread_and_ln1355_fu_380_p2);
    sensitive << ( payload_in_last_V );
    sensitive << ( lhs_V_fu_374_p2 );

    SC_METHOD(thread_and_ln68_fu_289_p2);
    sensitive << ( payload_in_last_V );
    sensitive << ( ret_V_fu_267_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_phi_mux_storemerge_phi_fu_211_p4);
    sensitive << ( action );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ret_V_1_fu_261_p2 );

    SC_METHOD(thread_dst_port_V);
    sensitive << ( dst_port_reg_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_lhs_V_fu_374_p2);
    sensitive << ( action_empty_V );

    SC_METHOD(thread_payload_out_data_V);
    sensitive << ( payload_out_reg_data );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_payload_out_keep_V);
    sensitive << ( payload_out_reg_keep );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_payload_out_last_V);
    sensitive << ( payload_out_reg_last );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_payload_out_valid_V);
    sensitive << ( payload_out_reg_vali );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_payload_ready_V);
    sensitive << ( action_valid_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ret_V_1_fu_261_p2);
    sensitive << ( action_valid_V );
    sensitive << ( rhs_V_fu_253_p3 );

    SC_METHOD(thread_ret_V_fu_267_p2);
    sensitive << ( payload_in_valid_V );
    sensitive << ( ret_V_1_fu_261_p2 );

    SC_METHOD(thread_rhs_V_fu_253_p3);
    sensitive << ( action );

    SC_METHOD(thread_select_ln68_1_fu_281_p3);
    sensitive << ( payload_in_keep_V );
    sensitive << ( ret_V_fu_267_p2 );

    SC_METHOD(thread_select_ln68_fu_273_p3);
    sensitive << ( payload_in_data_V );
    sensitive << ( ret_V_fu_267_p2 );

    SC_METHOD(thread_src_ip_V);
    sensitive << ( src_ip_reg_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_src_port_V);
    sensitive << ( src_port_reg_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_trunc_ln321_fu_331_p1);
    sensitive << ( action );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    payload_out_reg_data = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    payload_out_reg_keep = "0000000000000000000000000000000000000000000000000000000000000000";
    payload_out_reg_vali = "0";
    payload_out_reg_last = "0";
    src_ip_reg_V = "00000000000000000000000000000000";
    src_port_reg_V = "0000000000000000";
    dst_port_reg_V = "0000000000000000";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "action_excecutor_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, action, "(port)action");
    sc_trace(mVcdFile, action_valid_V, "(port)action_valid_V");
    sc_trace(mVcdFile, action_empty_V, "(port)action_empty_V");
    sc_trace(mVcdFile, action_re_V, "(port)action_re_V");
    sc_trace(mVcdFile, payload_in_data_V, "(port)payload_in_data_V");
    sc_trace(mVcdFile, payload_in_keep_V, "(port)payload_in_keep_V");
    sc_trace(mVcdFile, payload_in_valid_V, "(port)payload_in_valid_V");
    sc_trace(mVcdFile, payload_in_last_V, "(port)payload_in_last_V");
    sc_trace(mVcdFile, payload_ready_V, "(port)payload_ready_V");
    sc_trace(mVcdFile, payload_out_data_V, "(port)payload_out_data_V");
    sc_trace(mVcdFile, payload_out_keep_V, "(port)payload_out_keep_V");
    sc_trace(mVcdFile, payload_out_valid_V, "(port)payload_out_valid_V");
    sc_trace(mVcdFile, payload_out_last_V, "(port)payload_out_last_V");
    sc_trace(mVcdFile, src_ip_V, "(port)src_ip_V");
    sc_trace(mVcdFile, src_port_V, "(port)src_port_V");
    sc_trace(mVcdFile, dst_port_V, "(port)dst_port_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, payload_out_reg_data, "payload_out_reg_data");
    sc_trace(mVcdFile, payload_out_reg_keep, "payload_out_reg_keep");
    sc_trace(mVcdFile, payload_out_reg_vali, "payload_out_reg_vali");
    sc_trace(mVcdFile, payload_out_reg_last, "payload_out_reg_last");
    sc_trace(mVcdFile, src_ip_reg_V, "src_ip_reg_V");
    sc_trace(mVcdFile, src_port_reg_V, "src_port_reg_V");
    sc_trace(mVcdFile, dst_port_reg_V, "dst_port_reg_V");
    sc_trace(mVcdFile, ap_phi_mux_storemerge_phi_fu_211_p4, "ap_phi_mux_storemerge_phi_fu_211_p4");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ret_V_1_fu_261_p2, "ret_V_1_fu_261_p2");
    sc_trace(mVcdFile, select_ln68_fu_273_p3, "select_ln68_fu_273_p3");
    sc_trace(mVcdFile, select_ln68_1_fu_281_p3, "select_ln68_1_fu_281_p3");
    sc_trace(mVcdFile, ret_V_fu_267_p2, "ret_V_fu_267_p2");
    sc_trace(mVcdFile, and_ln68_fu_289_p2, "and_ln68_fu_289_p2");
    sc_trace(mVcdFile, trunc_ln321_fu_331_p1, "trunc_ln321_fu_331_p1");
    sc_trace(mVcdFile, rhs_V_fu_253_p3, "rhs_V_fu_253_p3");
    sc_trace(mVcdFile, lhs_V_fu_374_p2, "lhs_V_fu_374_p2");
    sc_trace(mVcdFile, and_ln1355_fu_380_p2, "and_ln1355_fu_380_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("action_excecutor.hdltvin.dat");
    mHdltvoutHandle.open("action_excecutor.hdltvout.dat");
}

action_excecutor::~action_excecutor() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void action_excecutor::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dst_port_reg_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            dst_port_reg_V = ap_phi_mux_storemerge_phi_fu_211_p4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_out_reg_data = ap_const_lv512_lc_1;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            payload_out_reg_data = select_ln68_fu_273_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_out_reg_keep = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            payload_out_reg_keep = select_ln68_1_fu_281_p3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_out_reg_last = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            payload_out_reg_last = and_ln68_fu_289_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_out_reg_vali = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            payload_out_reg_vali = ret_V_fu_267_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        src_ip_reg_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_1_fu_261_p2.read(), ap_const_lv1_1)) {
                src_ip_reg_V = trunc_ln321_fu_331_p1.read();
            } else if (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_1_fu_261_p2.read())) {
                src_ip_reg_V = ap_const_lv32_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        src_port_reg_V = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            if (esl_seteq<1,1,1>(ret_V_1_fu_261_p2.read(), ap_const_lv1_1)) {
                src_port_reg_V = action.read().range(47, 32);
            } else if (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_1_fu_261_p2.read())) {
                src_port_reg_V = ap_const_lv16_0;
            }
        }
    }
}

void action_excecutor::thread_action_re_V() {
    action_re_V = (and_ln1355_fu_380_p2.read() & payload_in_valid_V.read());
}

void action_excecutor::thread_and_ln1355_fu_380_p2() {
    and_ln1355_fu_380_p2 = (payload_in_last_V.read() & lhs_V_fu_374_p2.read());
}

void action_excecutor::thread_and_ln68_fu_289_p2() {
    and_ln68_fu_289_p2 = (ret_V_fu_267_p2.read() & payload_in_last_V.read());
}

void action_excecutor::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void action_excecutor::thread_ap_phi_mux_storemerge_phi_fu_211_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(ret_V_1_fu_261_p2.read(), ap_const_lv1_1)) {
            ap_phi_mux_storemerge_phi_fu_211_p4 = action.read().range(63, 48);
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_1_fu_261_p2.read())) {
            ap_phi_mux_storemerge_phi_fu_211_p4 = ap_const_lv16_0;
        } else {
            ap_phi_mux_storemerge_phi_fu_211_p4 = "XXXXXXXXXXXXXXXX";
        }
    } else {
        ap_phi_mux_storemerge_phi_fu_211_p4 = "XXXXXXXXXXXXXXXX";
    }
}

void action_excecutor::thread_dst_port_V() {
    dst_port_V = dst_port_reg_V.read();
}

void action_excecutor::thread_lhs_V_fu_374_p2() {
    lhs_V_fu_374_p2 = (action_empty_V.read() ^ ap_const_lv1_1);
}

void action_excecutor::thread_payload_out_data_V() {
    payload_out_data_V = payload_out_reg_data.read();
}

void action_excecutor::thread_payload_out_keep_V() {
    payload_out_keep_V = payload_out_reg_keep.read();
}

void action_excecutor::thread_payload_out_last_V() {
    payload_out_last_V = payload_out_reg_last.read();
}

void action_excecutor::thread_payload_out_valid_V() {
    payload_out_valid_V = payload_out_reg_vali.read();
}

void action_excecutor::thread_payload_ready_V() {
    payload_ready_V = action_valid_V.read();
}

void action_excecutor::thread_ret_V_1_fu_261_p2() {
    ret_V_1_fu_261_p2 = (rhs_V_fu_253_p3.read() & action_valid_V.read());
}

void action_excecutor::thread_ret_V_fu_267_p2() {
    ret_V_fu_267_p2 = (ret_V_1_fu_261_p2.read() & payload_in_valid_V.read());
}

void action_excecutor::thread_rhs_V_fu_253_p3() {
    rhs_V_fu_253_p3 = action.read().range(64, 64);
}

void action_excecutor::thread_select_ln68_1_fu_281_p3() {
    select_ln68_1_fu_281_p3 = (!ret_V_fu_267_p2.read()[0].is_01())? sc_lv<64>(): ((ret_V_fu_267_p2.read()[0].to_bool())? payload_in_keep_V.read(): ap_const_lv64_0);
}

void action_excecutor::thread_select_ln68_fu_273_p3() {
    select_ln68_fu_273_p3 = (!ret_V_fu_267_p2.read()[0].is_01())? sc_lv<512>(): ((ret_V_fu_267_p2.read()[0].to_bool())? payload_in_data_V.read(): ap_const_lv512_lc_1);
}

void action_excecutor::thread_src_ip_V() {
    src_ip_V = src_ip_reg_V.read();
}

void action_excecutor::thread_src_port_V() {
    src_port_V = src_port_reg_V.read();
}

void action_excecutor::thread_trunc_ln321_fu_331_p1() {
    trunc_ln321_fu_331_p1 = action.read().range(32-1, 0);
}

void action_excecutor::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<1>) ("X");
            break;
    }
}

void action_excecutor::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"action\" :  \"" << action.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"action_valid_V\" :  \"" << action_valid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"action_empty_V\" :  \"" << action_empty_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"action_re_V\" :  \"" << action_re_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"payload_in_data_V\" :  \"" << payload_in_data_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"payload_in_keep_V\" :  \"" << payload_in_keep_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"payload_in_valid_V\" :  \"" << payload_in_valid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"payload_in_last_V\" :  \"" << payload_in_last_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_ready_V\" :  \"" << payload_ready_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_out_data_V\" :  \"" << payload_out_data_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_out_keep_V\" :  \"" << payload_out_keep_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_out_valid_V\" :  \"" << payload_out_valid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_out_last_V\" :  \"" << payload_out_last_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_ip_V\" :  \"" << src_ip_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"src_port_V\" :  \"" << src_port_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_port_V\" :  \"" << dst_port_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

