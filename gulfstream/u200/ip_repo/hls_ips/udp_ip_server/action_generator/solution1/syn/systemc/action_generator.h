// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _action_generator_HH_
#define _action_generator_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct action_generator : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_lv<32> > meta_in_src_ip_V;
    sc_in< sc_lv<64> > meta_in_protocol_header_V;
    sc_in< sc_lv<32> > meta_in_checksum_V;
    sc_in< sc_lv<2> > meta_in_action_V;
    sc_in< sc_lv<32> > payload_cksum_data_V;
    sc_in< sc_lv<1> > payload_cksum_valid_V;
    sc_out< sc_lv<65> > action_out;
    sc_out< sc_lv<1> > action_out_valid_V;


    // Module declarations
    action_generator(sc_module_name name);
    SC_HAS_PROCESS(action_generator);

    ~action_generator();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<32> > action_out_reg1_src_1;
    sc_signal< sc_lv<16> > action_out_reg1_src_s;
    sc_signal< sc_lv<16> > action_out_reg1_dst_s;
    sc_signal< sc_lv<1> > ignore_flag1_V;
    sc_signal< sc_lv<16> > combined_cksum_final;
    sc_signal< sc_lv<1> > action_out_valid_reg;
    sc_signal< sc_lv<32> > combined_cksum_V;
    sc_signal< sc_lv<32> > action_out_reg_src_i;
    sc_signal< sc_lv<16> > action_out_reg_src_p;
    sc_signal< sc_lv<16> > action_out_reg_dst_p;
    sc_signal< sc_lv<1> > action_out_valid_reg_1;
    sc_signal< sc_lv<1> > ignore_flag_V;
    sc_signal< sc_lv<32> > meta_in_reg_checksum;
    sc_signal< sc_lv<32> > meta_in_reg_src_ip_V;
    sc_signal< sc_lv<64> > meta_in_reg_protocol;
    sc_signal< sc_lv<2> > meta_in_reg_action_V;
    sc_signal< sc_lv<32> > meta_in_reg0_src_ip_s;
    sc_signal< sc_lv<64> > meta_in_reg0_protoco;
    sc_signal< sc_lv<32> > meta_in_reg0_checksu;
    sc_signal< sc_lv<2> > meta_in_reg0_action_s;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<16> > add_ln209_fu_224_p2;
    sc_signal< sc_lv<32> > add_ln209_1_fu_290_p2;
    sc_signal< sc_lv<1> > icmp_ln879_1_fu_358_p2;
    sc_signal< sc_lv<1> > icmp_ln879_fu_176_p2;
    sc_signal< sc_lv<1> > or_ln544_fu_182_p2;
    sc_signal< sc_lv<16> > p_Result_s_fu_210_p4;
    sc_signal< sc_lv<16> > trunc_ln357_fu_220_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<16> ap_const_lv16_FFFF;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_30;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_2F;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_action_out();
    void thread_action_out_valid_V();
    void thread_add_ln209_1_fu_290_p2();
    void thread_add_ln209_fu_224_p2();
    void thread_ap_CS_fsm_state1();
    void thread_icmp_ln879_1_fu_358_p2();
    void thread_icmp_ln879_fu_176_p2();
    void thread_or_ln544_fu_182_p2();
    void thread_p_Result_s_fu_210_p4();
    void thread_trunc_ln357_fu_220_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
