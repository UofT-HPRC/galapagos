// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "action_generator.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic action_generator::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> action_generator::ap_ST_fsm_state1 = "1";
const sc_lv<32> action_generator::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<16> action_generator::ap_const_lv16_0 = "0000000000000000";
const sc_lv<1> action_generator::ap_const_lv1_0 = "0";
const sc_lv<64> action_generator::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<2> action_generator::ap_const_lv2_0 = "00";
const sc_lv<16> action_generator::ap_const_lv16_FFFF = "1111111111111111";
const sc_lv<32> action_generator::ap_const_lv32_10 = "10000";
const sc_lv<32> action_generator::ap_const_lv32_1F = "11111";
const sc_lv<32> action_generator::ap_const_lv32_30 = "110000";
const sc_lv<32> action_generator::ap_const_lv32_3F = "111111";
const sc_lv<32> action_generator::ap_const_lv32_20 = "100000";
const sc_lv<32> action_generator::ap_const_lv32_2F = "101111";
const sc_lv<2> action_generator::ap_const_lv2_2 = "10";
const sc_logic action_generator::ap_const_logic_0 = sc_dt::Log_0;
const bool action_generator::ap_const_boolean_1 = true;

action_generator::action_generator(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_action_out);
    sensitive << ( action_out_reg1_src_1 );
    sensitive << ( action_out_reg1_src_s );
    sensitive << ( action_out_reg1_dst_s );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( or_ln544_fu_182_p2 );

    SC_METHOD(thread_action_out_valid_V);
    sensitive << ( action_out_valid_reg );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_add_ln209_1_fu_290_p2);
    sensitive << ( payload_cksum_data_V );
    sensitive << ( meta_in_reg_checksum );

    SC_METHOD(thread_add_ln209_fu_224_p2);
    sensitive << ( p_Result_s_fu_210_p4 );
    sensitive << ( trunc_ln357_fu_220_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_icmp_ln879_1_fu_358_p2);
    sensitive << ( meta_in_reg_action_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_icmp_ln879_fu_176_p2);
    sensitive << ( combined_cksum_final );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_or_ln544_fu_182_p2);
    sensitive << ( ignore_flag1_V );
    sensitive << ( icmp_ln879_fu_176_p2 );

    SC_METHOD(thread_p_Result_s_fu_210_p4);
    sensitive << ( combined_cksum_V );

    SC_METHOD(thread_trunc_ln357_fu_220_p1);
    sensitive << ( combined_cksum_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    action_out_reg1_src_1 = "00000000000000000000000000000000";
    action_out_reg1_src_s = "0000000000000000";
    action_out_reg1_dst_s = "0000000000000000";
    ignore_flag1_V = "0";
    combined_cksum_final = "0000000000000000";
    action_out_valid_reg = "0";
    combined_cksum_V = "00000000000000000000000000000000";
    action_out_reg_src_i = "00000000000000000000000000000000";
    action_out_reg_src_p = "0000000000000000";
    action_out_reg_dst_p = "0000000000000000";
    action_out_valid_reg_1 = "0";
    ignore_flag_V = "0";
    meta_in_reg_checksum = "00000000000000000000000000000000";
    meta_in_reg_src_ip_V = "00000000000000000000000000000000";
    meta_in_reg_protocol = "0000000000000000000000000000000000000000000000000000000000000000";
    meta_in_reg_action_V = "00";
    meta_in_reg0_src_ip_s = "00000000000000000000000000000000";
    meta_in_reg0_protoco = "0000000000000000000000000000000000000000000000000000000000000000";
    meta_in_reg0_checksu = "00000000000000000000000000000000";
    meta_in_reg0_action_s = "00";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "action_generator_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, meta_in_src_ip_V, "(port)meta_in_src_ip_V");
    sc_trace(mVcdFile, meta_in_protocol_header_V, "(port)meta_in_protocol_header_V");
    sc_trace(mVcdFile, meta_in_checksum_V, "(port)meta_in_checksum_V");
    sc_trace(mVcdFile, meta_in_action_V, "(port)meta_in_action_V");
    sc_trace(mVcdFile, payload_cksum_data_V, "(port)payload_cksum_data_V");
    sc_trace(mVcdFile, payload_cksum_valid_V, "(port)payload_cksum_valid_V");
    sc_trace(mVcdFile, action_out, "(port)action_out");
    sc_trace(mVcdFile, action_out_valid_V, "(port)action_out_valid_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, action_out_reg1_src_1, "action_out_reg1_src_1");
    sc_trace(mVcdFile, action_out_reg1_src_s, "action_out_reg1_src_s");
    sc_trace(mVcdFile, action_out_reg1_dst_s, "action_out_reg1_dst_s");
    sc_trace(mVcdFile, ignore_flag1_V, "ignore_flag1_V");
    sc_trace(mVcdFile, combined_cksum_final, "combined_cksum_final");
    sc_trace(mVcdFile, action_out_valid_reg, "action_out_valid_reg");
    sc_trace(mVcdFile, combined_cksum_V, "combined_cksum_V");
    sc_trace(mVcdFile, action_out_reg_src_i, "action_out_reg_src_i");
    sc_trace(mVcdFile, action_out_reg_src_p, "action_out_reg_src_p");
    sc_trace(mVcdFile, action_out_reg_dst_p, "action_out_reg_dst_p");
    sc_trace(mVcdFile, action_out_valid_reg_1, "action_out_valid_reg_1");
    sc_trace(mVcdFile, ignore_flag_V, "ignore_flag_V");
    sc_trace(mVcdFile, meta_in_reg_checksum, "meta_in_reg_checksum");
    sc_trace(mVcdFile, meta_in_reg_src_ip_V, "meta_in_reg_src_ip_V");
    sc_trace(mVcdFile, meta_in_reg_protocol, "meta_in_reg_protocol");
    sc_trace(mVcdFile, meta_in_reg_action_V, "meta_in_reg_action_V");
    sc_trace(mVcdFile, meta_in_reg0_src_ip_s, "meta_in_reg0_src_ip_s");
    sc_trace(mVcdFile, meta_in_reg0_protoco, "meta_in_reg0_protoco");
    sc_trace(mVcdFile, meta_in_reg0_checksu, "meta_in_reg0_checksu");
    sc_trace(mVcdFile, meta_in_reg0_action_s, "meta_in_reg0_action_s");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, add_ln209_fu_224_p2, "add_ln209_fu_224_p2");
    sc_trace(mVcdFile, add_ln209_1_fu_290_p2, "add_ln209_1_fu_290_p2");
    sc_trace(mVcdFile, icmp_ln879_1_fu_358_p2, "icmp_ln879_1_fu_358_p2");
    sc_trace(mVcdFile, icmp_ln879_fu_176_p2, "icmp_ln879_fu_176_p2");
    sc_trace(mVcdFile, or_ln544_fu_182_p2, "or_ln544_fu_182_p2");
    sc_trace(mVcdFile, p_Result_s_fu_210_p4, "p_Result_s_fu_210_p4");
    sc_trace(mVcdFile, trunc_ln357_fu_220_p1, "trunc_ln357_fu_220_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("action_generator.hdltvin.dat");
    mHdltvoutHandle.open("action_generator.hdltvout.dat");
}

action_generator::~action_generator() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void action_generator::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        action_out_reg1_dst_s = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            action_out_reg1_dst_s = action_out_reg_dst_p.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        action_out_reg1_src_1 = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            action_out_reg1_src_1 = action_out_reg_src_i.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        action_out_reg1_src_s = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            action_out_reg1_src_s = action_out_reg_src_p.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        action_out_reg_dst_p = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            action_out_reg_dst_p = meta_in_reg_protocol.read().range(47, 32);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        action_out_reg_src_i = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            action_out_reg_src_i = meta_in_reg_src_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        action_out_reg_src_p = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            action_out_reg_src_p = meta_in_reg_protocol.read().range(63, 48);
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        action_out_valid_reg = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            action_out_valid_reg = action_out_valid_reg_1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        action_out_valid_reg_1 = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            action_out_valid_reg_1 = payload_cksum_valid_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        combined_cksum_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            combined_cksum_V = add_ln209_1_fu_290_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        combined_cksum_final = ap_const_lv16_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            combined_cksum_final = add_ln209_fu_224_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ignore_flag1_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ignore_flag1_V = ignore_flag_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ignore_flag_V = ap_const_lv1_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            ignore_flag_V = icmp_ln879_1_fu_358_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_in_reg0_action_s = ap_const_lv2_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            meta_in_reg0_action_s = meta_in_action_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_in_reg0_checksu = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            meta_in_reg0_checksu = meta_in_checksum_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_in_reg0_protoco = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            meta_in_reg0_protoco = meta_in_protocol_header_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_in_reg0_src_ip_s = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            meta_in_reg0_src_ip_s = meta_in_src_ip_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_in_reg_action_V = ap_const_lv2_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            meta_in_reg_action_V = meta_in_reg0_action_s.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_in_reg_checksum = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            meta_in_reg_checksum = meta_in_reg0_checksu.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_in_reg_protocol = ap_const_lv64_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            meta_in_reg_protocol = meta_in_reg0_protoco.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        meta_in_reg_src_ip_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            meta_in_reg_src_ip_V = meta_in_reg0_src_ip_s.read();
        }
    }
}

void action_generator::thread_action_out() {
    action_out = esl_concat<33,32>(esl_concat<17,16>(esl_concat<1,16>(or_ln544_fu_182_p2.read(), action_out_reg1_dst_s.read()), action_out_reg1_src_s.read()), action_out_reg1_src_1.read());
}

void action_generator::thread_action_out_valid_V() {
    action_out_valid_V = action_out_valid_reg.read();
}

void action_generator::thread_add_ln209_1_fu_290_p2() {
    add_ln209_1_fu_290_p2 = (!payload_cksum_data_V.read().is_01() || !meta_in_reg_checksum.read().is_01())? sc_lv<32>(): (sc_biguint<32>(payload_cksum_data_V.read()) + sc_biguint<32>(meta_in_reg_checksum.read()));
}

void action_generator::thread_add_ln209_fu_224_p2() {
    add_ln209_fu_224_p2 = (!p_Result_s_fu_210_p4.read().is_01() || !trunc_ln357_fu_220_p1.read().is_01())? sc_lv<16>(): (sc_biguint<16>(p_Result_s_fu_210_p4.read()) + sc_biguint<16>(trunc_ln357_fu_220_p1.read()));
}

void action_generator::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void action_generator::thread_icmp_ln879_1_fu_358_p2() {
    icmp_ln879_1_fu_358_p2 = (!meta_in_reg_action_V.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(meta_in_reg_action_V.read() == ap_const_lv2_2);
}

void action_generator::thread_icmp_ln879_fu_176_p2() {
    icmp_ln879_fu_176_p2 = (!combined_cksum_final.read().is_01() || !ap_const_lv16_FFFF.is_01())? sc_lv<1>(): sc_lv<1>(combined_cksum_final.read() == ap_const_lv16_FFFF);
}

void action_generator::thread_or_ln544_fu_182_p2() {
    or_ln544_fu_182_p2 = (ignore_flag1_V.read() | icmp_ln879_fu_176_p2.read());
}

void action_generator::thread_p_Result_s_fu_210_p4() {
    p_Result_s_fu_210_p4 = combined_cksum_V.read().range(31, 16);
}

void action_generator::thread_trunc_ln357_fu_220_p1() {
    trunc_ln357_fu_220_p1 = combined_cksum_V.read().range(16-1, 0);
}

void action_generator::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void action_generator::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"meta_in_src_ip_V\" :  \"" << meta_in_src_ip_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"meta_in_protocol_header_V\" :  \"" << meta_in_protocol_header_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"meta_in_checksum_V\" :  \"" << meta_in_checksum_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"meta_in_action_V\" :  \"" << meta_in_action_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"payload_cksum_data_V\" :  \"" << payload_cksum_data_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"payload_cksum_valid_V\" :  \"" << payload_cksum_valid_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"action_out\" :  \"" << action_out.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"action_out_valid_V\" :  \"" << action_out_valid_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

