// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "udp_eth_assemble.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic udp_eth_assemble::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<1> udp_eth_assemble::ap_ST_fsm_state1 = "1";
const sc_lv<512> udp_eth_assemble::ap_const_lv512_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> udp_eth_assemble::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> udp_eth_assemble::ap_const_lv1_0 = "0";
const sc_lv<48> udp_eth_assemble::ap_const_lv48_0 = "000000000000000000000000000000000000000000000000";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> udp_eth_assemble::ap_const_lv1_1 = "1";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_150 = "101010000";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_1FF = "111111111";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_2A = "101010";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_3F = "111111";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_29 = "101001";
const sc_lv<176> udp_eth_assemble::ap_const_lv176_lc_1 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<22> udp_eth_assemble::ap_const_lv22_0 = "0000000000000000000000";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_20 = "100000";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_4F = "1001111";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_91 = "10010001";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_A0 = "10100000";
const sc_lv<16> udp_eth_assemble::ap_const_lv16_1C = "11100";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_81 = "10000001";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_90 = "10010000";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_50 = "1010000";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_5F = "1011111";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_60 = "1100000";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_6F = "1101111";
const sc_lv<16> udp_eth_assemble::ap_const_lv16_8 = "1000";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_70 = "1110000";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_7F = "1111111";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_80 = "10000000";
const sc_lv<16> udp_eth_assemble::ap_const_lv16_FFFF = "1111111111111111";
const sc_lv<32> udp_eth_assemble::ap_const_lv32_8004500 = "1000000000000100010100000000";
const sc_lv<48> udp_eth_assemble::ap_const_lv48_40004011 = "1000000000000000100000000010001";
const sc_lv<22> udp_eth_assemble::ap_const_lv22_3FFFF0 = "1111111111111111110000";
const sc_lv<42> udp_eth_assemble::ap_const_lv42_3FFFFFFFFFF = "111111111111111111111111111111111111111111";
const sc_logic udp_eth_assemble::ap_const_logic_0 = sc_dt::Log_0;
const bool udp_eth_assemble::ap_const_boolean_1 = true;

udp_eth_assemble::udp_eth_assemble(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_IN_PACKET_V_load_load_fu_392_p1);
    sensitive << ( IN_PACKET_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packet_out_ready_V_r_read_fu_170_p2 );

    SC_METHOD(thread_action_dst_mac_V_loa_fu_542_p4);
    sensitive << ( action );

    SC_METHOD(thread_action_dst_port_V_lo_fu_600_p4);
    sensitive << ( action );

    SC_METHOD(thread_action_ip_cksum_V_lo_fu_572_p4);
    sensitive << ( action );

    SC_METHOD(thread_action_payload_lengt_fu_556_p4);
    sensitive << ( action );

    SC_METHOD(thread_action_re_V);
    sensitive << ( packet_out_ready_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln1355_2_fu_354_p2 );

    SC_METHOD(thread_action_src_port_V_lo_fu_590_p4);
    sensitive << ( action );

    SC_METHOD(thread_action_valid_V_read_read_fu_206_p2);
    sensitive << ( action_valid_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_add_ln215_1_fu_610_p2);
    sensitive << ( action_payload_lengt_fu_556_p4 );

    SC_METHOD(thread_add_ln215_2_fu_638_p2);
    sensitive << ( zext_ln215_fu_634_p1 );
    sensitive << ( p_Result_s_fu_616_p4 );

    SC_METHOD(thread_add_ln215_fu_566_p2);
    sensitive << ( action_payload_lengt_fu_556_p4 );

    SC_METHOD(thread_and_ln1355_2_fu_354_p2);
    sensitive << ( ret_V_13_fu_348_p2 );
    sensitive << ( rhs_V_fu_312_p2 );

    SC_METHOD(thread_and_ln1355_4_fu_373_p2);
    sensitive << ( action_valid_V );
    sensitive << ( rhs_V_3_fu_367_p2 );

    SC_METHOD(thread_and_ln1355_fu_756_p2);
    sensitive << ( payload_in_last_V );
    sensitive << ( tmp_fu_318_p3 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_354);
    sensitive << ( ret_V_5_fu_402_p2 );
    sensitive << ( IN_PACKET_V_load_load_fu_392_p1 );
    sensitive << ( ret_V_9_fu_530_p2 );

    SC_METHOD(thread_grp_fu_272_p4);
    sensitive << ( payload_in_data_V );

    SC_METHOD(thread_grp_fu_282_p4);
    sensitive << ( payload_in_keep_V );

    SC_METHOD(thread_lhs_V_fu_444_p2);
    sensitive << ( payload_in_reg_last_s );

    SC_METHOD(thread_or_ln1356_fu_686_p2);
    sensitive << ( grp_fu_282_p4 );

    SC_METHOD(thread_p_Result_2_fu_692_p3);
    sensitive << ( or_ln1356_fu_686_p2 );

    SC_METHOD(thread_p_Result_4_fu_464_p3);
    sensitive << ( trunc_ln647_fu_436_p1 );
    sensitive << ( select_ln1355_fu_456_p3 );

    SC_METHOD(thread_p_Result_5_fu_494_p3);
    sensitive << ( trunc_ln647_1_fu_482_p1 );
    sensitive << ( select_ln1355_1_fu_486_p3 );

    SC_METHOD(thread_p_Result_s_8_fu_650_p14);
    sensitive << ( myMac_reg_V );
    sensitive << ( myIP_reg_V );
    sensitive << ( grp_fu_272_p4 );
    sensitive << ( action_dst_mac_V_loa_fu_542_p4 );
    sensitive << ( add_ln215_fu_566_p2 );
    sensitive << ( action_ip_cksum_V_lo_fu_572_p4 );
    sensitive << ( trunc_ln215_fu_586_p1 );
    sensitive << ( action_src_port_V_lo_fu_590_p4 );
    sensitive << ( action_dst_port_V_lo_fu_600_p4 );
    sensitive << ( add_ln215_1_fu_610_p2 );
    sensitive << ( xor_ln215_fu_644_p2 );

    SC_METHOD(thread_p_Result_s_fu_616_p4);
    sensitive << ( action );

    SC_METHOD(thread_packet_out_data_V);
    sensitive << ( packet_out_reg_data_s );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_packet_out_keep_V);
    sensitive << ( packet_out_reg_keep_s );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_packet_out_last_V);
    sensitive << ( packet_out_reg_last_s );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_packet_out_ready_V_r_read_fu_170_p2);
    sensitive << ( packet_out_ready_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_packet_out_valid_V);
    sensitive << ( packet_out_reg_valid );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_payload_ready_V);
    sensitive << ( packet_out_ready_V );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( and_ln1355_4_fu_373_p2 );

    SC_METHOD(thread_ret_V_11_fu_762_p2);
    sensitive << ( ret_V_14_fu_386_p2 );
    sensitive << ( and_ln1355_fu_756_p2 );

    SC_METHOD(thread_ret_V_12_fu_338_p2);
    sensitive << ( payload_in_valid_V );
    sensitive << ( ret_V_15_fu_332_p2 );

    SC_METHOD(thread_ret_V_13_fu_348_p2);
    sensitive << ( payloadin_pause_V );
    sensitive << ( ret_V_12_fu_338_p2 );

    SC_METHOD(thread_ret_V_14_fu_386_p2);
    sensitive << ( action_valid_V );
    sensitive << ( payload_in_valid_V );

    SC_METHOD(thread_ret_V_15_fu_332_p2);
    sensitive << ( payload_in_last_V );
    sensitive << ( xor_ln1355_fu_326_p2 );

    SC_METHOD(thread_ret_V_5_fu_402_p2);
    sensitive << ( ret_V_14_fu_386_p2 );
    sensitive << ( rhs_V_4_fu_396_p2 );

    SC_METHOD(thread_ret_V_7_fu_450_p2);
    sensitive << ( payload_in_valid_V );
    sensitive << ( lhs_V_fu_444_p2 );

    SC_METHOD(thread_ret_V_8_fu_508_p2);
    sensitive << ( payload_in_reg_last_s );
    sensitive << ( ret_V_15_fu_332_p2 );

    SC_METHOD(thread_ret_V_9_fu_530_p2);
    sensitive << ( payload_in_reg_last_s );
    sensitive << ( xor_ln1355_fu_326_p2 );

    SC_METHOD(thread_rhs_V_1_load_fu_344_p1);
    sensitive << ( payloadin_pause_V );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_rhs_V_3_fu_367_p2);
    sensitive << ( payloadin_pause_V );

    SC_METHOD(thread_rhs_V_4_fu_396_p2);
    sensitive << ( IN_PACKET_V );

    SC_METHOD(thread_rhs_V_fu_312_p2);
    sensitive << ( action_empty_V );

    SC_METHOD(thread_select_ln1355_1_fu_486_p3);
    sensitive << ( ret_V_7_fu_450_p2 );
    sensitive << ( grp_fu_282_p4 );

    SC_METHOD(thread_select_ln1355_fu_456_p3);
    sensitive << ( ret_V_7_fu_450_p2 );
    sensitive << ( grp_fu_272_p4 );

    SC_METHOD(thread_tmp_1_fu_626_p3);
    sensitive << ( action );

    SC_METHOD(thread_tmp_fu_318_p3);
    sensitive << ( payload_in_keep_V );

    SC_METHOD(thread_trunc_ln215_fu_586_p1);
    sensitive << ( action );

    SC_METHOD(thread_trunc_ln647_1_fu_482_p1);
    sensitive << ( payload_in_reg_keep_s );

    SC_METHOD(thread_trunc_ln647_fu_436_p1);
    sensitive << ( payload_in_reg_data_s );

    SC_METHOD(thread_xor_ln1355_fu_326_p2);
    sensitive << ( tmp_fu_318_p3 );

    SC_METHOD(thread_xor_ln215_fu_644_p2);
    sensitive << ( add_ln215_2_fu_638_p2 );

    SC_METHOD(thread_zext_ln215_fu_634_p1);
    sensitive << ( tmp_1_fu_626_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    packet_out_reg_data_s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    packet_out_reg_keep_s = "0000000000000000000000000000000000000000000000000000000000000000";
    packet_out_reg_valid = "0";
    packet_out_reg_last_s = "0";
    payloadin_pause_V = "0";
    IN_PACKET_V = "0";
    myMac_reg_V = "000000000000000000000000000000000000000000000000";
    myIP_reg_V = "00000000000000000000000000000000";
    payload_in_reg_data_s = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    payload_in_reg_last_s = "0";
    payload_in_reg_keep_s = "0000000000000000000000000000000000000000000000000000000000000000";
    payload_in_reg_valid = "0";
    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "udp_eth_assemble_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, myMac_V, "(port)myMac_V");
    sc_trace(mVcdFile, myIP_V, "(port)myIP_V");
    sc_trace(mVcdFile, action, "(port)action");
    sc_trace(mVcdFile, action_valid_V, "(port)action_valid_V");
    sc_trace(mVcdFile, action_empty_V, "(port)action_empty_V");
    sc_trace(mVcdFile, action_re_V, "(port)action_re_V");
    sc_trace(mVcdFile, payload_in_data_V, "(port)payload_in_data_V");
    sc_trace(mVcdFile, payload_in_keep_V, "(port)payload_in_keep_V");
    sc_trace(mVcdFile, payload_in_valid_V, "(port)payload_in_valid_V");
    sc_trace(mVcdFile, payload_in_last_V, "(port)payload_in_last_V");
    sc_trace(mVcdFile, payload_ready_V, "(port)payload_ready_V");
    sc_trace(mVcdFile, packet_out_data_V, "(port)packet_out_data_V");
    sc_trace(mVcdFile, packet_out_keep_V, "(port)packet_out_keep_V");
    sc_trace(mVcdFile, packet_out_valid_V, "(port)packet_out_valid_V");
    sc_trace(mVcdFile, packet_out_last_V, "(port)packet_out_last_V");
    sc_trace(mVcdFile, packet_out_ready_V, "(port)packet_out_ready_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, packet_out_reg_data_s, "packet_out_reg_data_s");
    sc_trace(mVcdFile, packet_out_reg_keep_s, "packet_out_reg_keep_s");
    sc_trace(mVcdFile, packet_out_reg_valid, "packet_out_reg_valid");
    sc_trace(mVcdFile, packet_out_reg_last_s, "packet_out_reg_last_s");
    sc_trace(mVcdFile, payloadin_pause_V, "payloadin_pause_V");
    sc_trace(mVcdFile, IN_PACKET_V, "IN_PACKET_V");
    sc_trace(mVcdFile, myMac_reg_V, "myMac_reg_V");
    sc_trace(mVcdFile, myIP_reg_V, "myIP_reg_V");
    sc_trace(mVcdFile, payload_in_reg_data_s, "payload_in_reg_data_s");
    sc_trace(mVcdFile, payload_in_reg_last_s, "payload_in_reg_last_s");
    sc_trace(mVcdFile, payload_in_reg_keep_s, "payload_in_reg_keep_s");
    sc_trace(mVcdFile, payload_in_reg_valid, "payload_in_reg_valid");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, packet_out_ready_V_r_read_fu_170_p2, "packet_out_ready_V_r_read_fu_170_p2");
    sc_trace(mVcdFile, ret_V_5_fu_402_p2, "ret_V_5_fu_402_p2");
    sc_trace(mVcdFile, IN_PACKET_V_load_load_fu_392_p1, "IN_PACKET_V_load_load_fu_392_p1");
    sc_trace(mVcdFile, p_Result_4_fu_464_p3, "p_Result_4_fu_464_p3");
    sc_trace(mVcdFile, p_Result_s_8_fu_650_p14, "p_Result_s_8_fu_650_p14");
    sc_trace(mVcdFile, p_Result_5_fu_494_p3, "p_Result_5_fu_494_p3");
    sc_trace(mVcdFile, p_Result_2_fu_692_p3, "p_Result_2_fu_692_p3");
    sc_trace(mVcdFile, ret_V_8_fu_508_p2, "ret_V_8_fu_508_p2");
    sc_trace(mVcdFile, ret_V_15_fu_332_p2, "ret_V_15_fu_332_p2");
    sc_trace(mVcdFile, rhs_V_1_load_fu_344_p1, "rhs_V_1_load_fu_344_p1");
    sc_trace(mVcdFile, ret_V_11_fu_762_p2, "ret_V_11_fu_762_p2");
    sc_trace(mVcdFile, ret_V_9_fu_530_p2, "ret_V_9_fu_530_p2");
    sc_trace(mVcdFile, action_valid_V_read_read_fu_206_p2, "action_valid_V_read_read_fu_206_p2");
    sc_trace(mVcdFile, ret_V_7_fu_450_p2, "ret_V_7_fu_450_p2");
    sc_trace(mVcdFile, tmp_fu_318_p3, "tmp_fu_318_p3");
    sc_trace(mVcdFile, xor_ln1355_fu_326_p2, "xor_ln1355_fu_326_p2");
    sc_trace(mVcdFile, ret_V_12_fu_338_p2, "ret_V_12_fu_338_p2");
    sc_trace(mVcdFile, ret_V_13_fu_348_p2, "ret_V_13_fu_348_p2");
    sc_trace(mVcdFile, rhs_V_fu_312_p2, "rhs_V_fu_312_p2");
    sc_trace(mVcdFile, and_ln1355_2_fu_354_p2, "and_ln1355_2_fu_354_p2");
    sc_trace(mVcdFile, rhs_V_3_fu_367_p2, "rhs_V_3_fu_367_p2");
    sc_trace(mVcdFile, and_ln1355_4_fu_373_p2, "and_ln1355_4_fu_373_p2");
    sc_trace(mVcdFile, ret_V_14_fu_386_p2, "ret_V_14_fu_386_p2");
    sc_trace(mVcdFile, rhs_V_4_fu_396_p2, "rhs_V_4_fu_396_p2");
    sc_trace(mVcdFile, lhs_V_fu_444_p2, "lhs_V_fu_444_p2");
    sc_trace(mVcdFile, grp_fu_272_p4, "grp_fu_272_p4");
    sc_trace(mVcdFile, trunc_ln647_fu_436_p1, "trunc_ln647_fu_436_p1");
    sc_trace(mVcdFile, select_ln1355_fu_456_p3, "select_ln1355_fu_456_p3");
    sc_trace(mVcdFile, grp_fu_282_p4, "grp_fu_282_p4");
    sc_trace(mVcdFile, trunc_ln647_1_fu_482_p1, "trunc_ln647_1_fu_482_p1");
    sc_trace(mVcdFile, select_ln1355_1_fu_486_p3, "select_ln1355_1_fu_486_p3");
    sc_trace(mVcdFile, action_payload_lengt_fu_556_p4, "action_payload_lengt_fu_556_p4");
    sc_trace(mVcdFile, tmp_1_fu_626_p3, "tmp_1_fu_626_p3");
    sc_trace(mVcdFile, zext_ln215_fu_634_p1, "zext_ln215_fu_634_p1");
    sc_trace(mVcdFile, p_Result_s_fu_616_p4, "p_Result_s_fu_616_p4");
    sc_trace(mVcdFile, add_ln215_2_fu_638_p2, "add_ln215_2_fu_638_p2");
    sc_trace(mVcdFile, action_dst_mac_V_loa_fu_542_p4, "action_dst_mac_V_loa_fu_542_p4");
    sc_trace(mVcdFile, add_ln215_fu_566_p2, "add_ln215_fu_566_p2");
    sc_trace(mVcdFile, action_ip_cksum_V_lo_fu_572_p4, "action_ip_cksum_V_lo_fu_572_p4");
    sc_trace(mVcdFile, trunc_ln215_fu_586_p1, "trunc_ln215_fu_586_p1");
    sc_trace(mVcdFile, action_src_port_V_lo_fu_590_p4, "action_src_port_V_lo_fu_590_p4");
    sc_trace(mVcdFile, action_dst_port_V_lo_fu_600_p4, "action_dst_port_V_lo_fu_600_p4");
    sc_trace(mVcdFile, add_ln215_1_fu_610_p2, "add_ln215_1_fu_610_p2");
    sc_trace(mVcdFile, xor_ln215_fu_644_p2, "xor_ln215_fu_644_p2");
    sc_trace(mVcdFile, or_ln1356_fu_686_p2, "or_ln1356_fu_686_p2");
    sc_trace(mVcdFile, and_ln1355_fu_756_p2, "and_ln1355_fu_756_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_354, "ap_condition_354");
#endif

    }
    mHdltvinHandle.open("udp_eth_assemble.hdltvin.dat");
    mHdltvoutHandle.open("udp_eth_assemble.hdltvout.dat");
}

udp_eth_assemble::~udp_eth_assemble() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void udp_eth_assemble::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        IN_PACKET_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(packet_out_ready_V_r_read_fu_170_p2.read(), ap_const_lv1_1))) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_5_fu_402_p2.read())) {
                IN_PACKET_V = payload_in_keep_V.read().range(41, 41);
            } else if (esl_seteq<1,1,1>(ap_condition_354.read(), ap_const_boolean_1)) {
                IN_PACKET_V = ap_const_lv1_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        myIP_reg_V = ap_const_lv32_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            myIP_reg_V = myIP_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        myMac_reg_V = ap_const_lv48_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
            myMac_reg_V = myMac_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        packet_out_reg_data_s = ap_const_lv512_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(packet_out_ready_V_r_read_fu_170_p2.read(), ap_const_lv1_1))) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_5_fu_402_p2.read())) {
                packet_out_reg_data_s = p_Result_s_8_fu_650_p14.read();
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_5_fu_402_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, IN_PACKET_V_load_load_fu_392_p1.read()))) {
                packet_out_reg_data_s = p_Result_4_fu_464_p3.read();
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_5_fu_402_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_0, IN_PACKET_V_load_load_fu_392_p1.read()))) {
                packet_out_reg_data_s = ap_const_lv512_lc_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        packet_out_reg_keep_s = ap_const_lv64_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(packet_out_ready_V_r_read_fu_170_p2.read(), ap_const_lv1_1))) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_5_fu_402_p2.read())) {
                packet_out_reg_keep_s = p_Result_2_fu_692_p3.read();
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_5_fu_402_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, IN_PACKET_V_load_load_fu_392_p1.read()))) {
                packet_out_reg_keep_s = p_Result_5_fu_494_p3.read();
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_5_fu_402_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_0, IN_PACKET_V_load_load_fu_392_p1.read()))) {
                packet_out_reg_keep_s = ap_const_lv64_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        packet_out_reg_last_s = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(packet_out_ready_V_r_read_fu_170_p2.read(), ap_const_lv1_1))) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_5_fu_402_p2.read())) {
                packet_out_reg_last_s = ret_V_15_fu_332_p2.read();
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_5_fu_402_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, IN_PACKET_V_load_load_fu_392_p1.read()))) {
                packet_out_reg_last_s = ret_V_8_fu_508_p2.read();
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_5_fu_402_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_0, IN_PACKET_V_load_load_fu_392_p1.read()))) {
                packet_out_reg_last_s = ap_const_lv1_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        packet_out_reg_valid = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(packet_out_ready_V_r_read_fu_170_p2.read(), ap_const_lv1_1))) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_5_fu_402_p2.read())) {
                packet_out_reg_valid = ap_const_lv1_1;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_5_fu_402_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, IN_PACKET_V_load_load_fu_392_p1.read()))) {
                packet_out_reg_valid = payload_in_reg_valid.read();
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_5_fu_402_p2.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_0, IN_PACKET_V_load_load_fu_392_p1.read()))) {
                packet_out_reg_valid = ap_const_lv1_0;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_in_reg_data_s = ap_const_lv512_lc_1;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(packet_out_ready_V_r_read_fu_170_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, action_valid_V_read_read_fu_206_p2.read()))) {
            payload_in_reg_data_s = payload_in_data_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_in_reg_keep_s = ap_const_lv64_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(packet_out_ready_V_r_read_fu_170_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, action_valid_V_read_read_fu_206_p2.read()))) {
            payload_in_reg_keep_s = payload_in_keep_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_in_reg_last_s = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(packet_out_ready_V_r_read_fu_170_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, action_valid_V_read_read_fu_206_p2.read()))) {
            payload_in_reg_last_s = payload_in_last_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payload_in_reg_valid = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(packet_out_ready_V_r_read_fu_170_p2.read(), ap_const_lv1_1) && 
             esl_seteq<1,1,1>(ap_const_lv1_1, action_valid_V_read_read_fu_206_p2.read()))) {
            payload_in_reg_valid = payload_in_valid_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        payloadin_pause_V = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(packet_out_ready_V_r_read_fu_170_p2.read(), ap_const_lv1_1))) {
            if (esl_seteq<1,1,1>(ap_const_lv1_1, rhs_V_1_load_fu_344_p1.read())) {
                payloadin_pause_V = ap_const_lv1_0;
            } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, rhs_V_1_load_fu_344_p1.read()) && 
                        esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_11_fu_762_p2.read()))) {
                payloadin_pause_V = ap_const_lv1_1;
            }
        }
    }
}

void udp_eth_assemble::thread_IN_PACKET_V_load_load_fu_392_p1() {
    IN_PACKET_V_load_load_fu_392_p1 = IN_PACKET_V.read();
}

void udp_eth_assemble::thread_action_dst_mac_V_loa_fu_542_p4() {
    action_dst_mac_V_loa_fu_542_p4 = action.read().range(79, 32);
}

void udp_eth_assemble::thread_action_dst_port_V_lo_fu_600_p4() {
    action_dst_port_V_lo_fu_600_p4 = action.read().range(111, 96);
}

void udp_eth_assemble::thread_action_ip_cksum_V_lo_fu_572_p4() {
    action_ip_cksum_V_lo_fu_572_p4 = action.read().range(144, 129);
}

void udp_eth_assemble::thread_action_payload_lengt_fu_556_p4() {
    action_payload_lengt_fu_556_p4 = action.read().range(160, 145);
}

void udp_eth_assemble::thread_action_re_V() {
    action_re_V = (and_ln1355_2_fu_354_p2.read() & packet_out_ready_V.read());
}

void udp_eth_assemble::thread_action_src_port_V_lo_fu_590_p4() {
    action_src_port_V_lo_fu_590_p4 = action.read().range(95, 80);
}

void udp_eth_assemble::thread_action_valid_V_read_read_fu_206_p2() {
    action_valid_V_read_read_fu_206_p2 = action_valid_V.read();
}

void udp_eth_assemble::thread_add_ln215_1_fu_610_p2() {
    add_ln215_1_fu_610_p2 = (!ap_const_lv16_8.is_01() || !action_payload_lengt_fu_556_p4.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_8) + sc_biguint<16>(action_payload_lengt_fu_556_p4.read()));
}

void udp_eth_assemble::thread_add_ln215_2_fu_638_p2() {
    add_ln215_2_fu_638_p2 = (!zext_ln215_fu_634_p1.read().is_01() || !p_Result_s_fu_616_p4.read().is_01())? sc_lv<16>(): (sc_biguint<16>(zext_ln215_fu_634_p1.read()) + sc_biguint<16>(p_Result_s_fu_616_p4.read()));
}

void udp_eth_assemble::thread_add_ln215_fu_566_p2() {
    add_ln215_fu_566_p2 = (!ap_const_lv16_1C.is_01() || !action_payload_lengt_fu_556_p4.read().is_01())? sc_lv<16>(): (sc_biguint<16>(ap_const_lv16_1C) + sc_biguint<16>(action_payload_lengt_fu_556_p4.read()));
}

void udp_eth_assemble::thread_and_ln1355_2_fu_354_p2() {
    and_ln1355_2_fu_354_p2 = (ret_V_13_fu_348_p2.read() & rhs_V_fu_312_p2.read());
}

void udp_eth_assemble::thread_and_ln1355_4_fu_373_p2() {
    and_ln1355_4_fu_373_p2 = (action_valid_V.read() & rhs_V_3_fu_367_p2.read());
}

void udp_eth_assemble::thread_and_ln1355_fu_756_p2() {
    and_ln1355_fu_756_p2 = (tmp_fu_318_p3.read() & payload_in_last_V.read());
}

void udp_eth_assemble::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void udp_eth_assemble::thread_ap_condition_354() {
    ap_condition_354 = (esl_seteq<1,1,1>(ap_const_lv1_0, ret_V_5_fu_402_p2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, IN_PACKET_V_load_load_fu_392_p1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, ret_V_9_fu_530_p2.read()));
}

void udp_eth_assemble::thread_grp_fu_272_p4() {
    grp_fu_272_p4 = payload_in_data_V.read().range(511, 336);
}

void udp_eth_assemble::thread_grp_fu_282_p4() {
    grp_fu_282_p4 = payload_in_keep_V.read().range(63, 42);
}

void udp_eth_assemble::thread_lhs_V_fu_444_p2() {
    lhs_V_fu_444_p2 = (payload_in_reg_last_s.read() ^ ap_const_lv1_1);
}

void udp_eth_assemble::thread_or_ln1356_fu_686_p2() {
    or_ln1356_fu_686_p2 = (grp_fu_282_p4.read() | ap_const_lv22_3FFFF0);
}

void udp_eth_assemble::thread_p_Result_2_fu_692_p3() {
    p_Result_2_fu_692_p3 = esl_concat<42,22>(ap_const_lv42_3FFFFFFFFFF, or_ln1356_fu_686_p2.read());
}

void udp_eth_assemble::thread_p_Result_4_fu_464_p3() {
    p_Result_4_fu_464_p3 = esl_concat<336,176>(trunc_ln647_fu_436_p1.read(), select_ln1355_fu_456_p3.read());
}

void udp_eth_assemble::thread_p_Result_5_fu_494_p3() {
    p_Result_5_fu_494_p3 = esl_concat<42,22>(trunc_ln647_1_fu_482_p1.read(), select_ln1355_1_fu_486_p3.read());
}

void udp_eth_assemble::thread_p_Result_s_8_fu_650_p14() {
    p_Result_s_8_fu_650_p14 = esl_concat<336,176>(esl_concat<320,16>(esl_concat<304,16>(esl_concat<288,16>(esl_concat<272,16>(esl_concat<240,32>(esl_concat<208,32>(esl_concat<192,16>(esl_concat<144,48>(esl_concat<128,16>(esl_concat<96,32>(esl_concat<48,48>(action_dst_mac_V_loa_fu_542_p4.read(), myMac_reg_V.read()), ap_const_lv32_8004500), add_ln215_fu_566_p2.read()), ap_const_lv48_40004011), action_ip_cksum_V_lo_fu_572_p4.read()), myIP_reg_V.read()), trunc_ln215_fu_586_p1.read()), action_src_port_V_lo_fu_590_p4.read()), action_dst_port_V_lo_fu_600_p4.read()), add_ln215_1_fu_610_p2.read()), xor_ln215_fu_644_p2.read()), grp_fu_272_p4.read());
}

void udp_eth_assemble::thread_p_Result_s_fu_616_p4() {
    p_Result_s_fu_616_p4 = action.read().range(127, 112);
}

void udp_eth_assemble::thread_packet_out_data_V() {
    packet_out_data_V = packet_out_reg_data_s.read();
}

void udp_eth_assemble::thread_packet_out_keep_V() {
    packet_out_keep_V = packet_out_reg_keep_s.read();
}

void udp_eth_assemble::thread_packet_out_last_V() {
    packet_out_last_V = packet_out_reg_last_s.read();
}

void udp_eth_assemble::thread_packet_out_ready_V_r_read_fu_170_p2() {
    packet_out_ready_V_r_read_fu_170_p2 = packet_out_ready_V.read();
}

void udp_eth_assemble::thread_packet_out_valid_V() {
    packet_out_valid_V = packet_out_reg_valid.read();
}

void udp_eth_assemble::thread_payload_ready_V() {
    payload_ready_V = (and_ln1355_4_fu_373_p2.read() & packet_out_ready_V.read());
}

void udp_eth_assemble::thread_ret_V_11_fu_762_p2() {
    ret_V_11_fu_762_p2 = (and_ln1355_fu_756_p2.read() & ret_V_14_fu_386_p2.read());
}

void udp_eth_assemble::thread_ret_V_12_fu_338_p2() {
    ret_V_12_fu_338_p2 = (ret_V_15_fu_332_p2.read() & payload_in_valid_V.read());
}

void udp_eth_assemble::thread_ret_V_13_fu_348_p2() {
    ret_V_13_fu_348_p2 = (payloadin_pause_V.read() | ret_V_12_fu_338_p2.read());
}

void udp_eth_assemble::thread_ret_V_14_fu_386_p2() {
    ret_V_14_fu_386_p2 = (action_valid_V.read() & payload_in_valid_V.read());
}

void udp_eth_assemble::thread_ret_V_15_fu_332_p2() {
    ret_V_15_fu_332_p2 = (payload_in_last_V.read() & xor_ln1355_fu_326_p2.read());
}

void udp_eth_assemble::thread_ret_V_5_fu_402_p2() {
    ret_V_5_fu_402_p2 = (ret_V_14_fu_386_p2.read() & rhs_V_4_fu_396_p2.read());
}

void udp_eth_assemble::thread_ret_V_7_fu_450_p2() {
    ret_V_7_fu_450_p2 = (payload_in_valid_V.read() & lhs_V_fu_444_p2.read());
}

void udp_eth_assemble::thread_ret_V_8_fu_508_p2() {
    ret_V_8_fu_508_p2 = (payload_in_reg_last_s.read() | ret_V_15_fu_332_p2.read());
}

void udp_eth_assemble::thread_ret_V_9_fu_530_p2() {
    ret_V_9_fu_530_p2 = (payload_in_reg_last_s.read() | xor_ln1355_fu_326_p2.read());
}

void udp_eth_assemble::thread_rhs_V_1_load_fu_344_p1() {
    rhs_V_1_load_fu_344_p1 = payloadin_pause_V.read();
}

void udp_eth_assemble::thread_rhs_V_3_fu_367_p2() {
    rhs_V_3_fu_367_p2 = (payloadin_pause_V.read() ^ ap_const_lv1_1);
}

void udp_eth_assemble::thread_rhs_V_4_fu_396_p2() {
    rhs_V_4_fu_396_p2 = (IN_PACKET_V.read() ^ ap_const_lv1_1);
}

void udp_eth_assemble::thread_rhs_V_fu_312_p2() {
    rhs_V_fu_312_p2 = (action_empty_V.read() ^ ap_const_lv1_1);
}

void udp_eth_assemble::thread_select_ln1355_1_fu_486_p3() {
    select_ln1355_1_fu_486_p3 = (!ret_V_7_fu_450_p2.read()[0].is_01())? sc_lv<22>(): ((ret_V_7_fu_450_p2.read()[0].to_bool())? grp_fu_282_p4.read(): ap_const_lv22_0);
}

void udp_eth_assemble::thread_select_ln1355_fu_456_p3() {
    select_ln1355_fu_456_p3 = (!ret_V_7_fu_450_p2.read()[0].is_01())? sc_lv<176>(): ((ret_V_7_fu_450_p2.read()[0].to_bool())? grp_fu_272_p4.read(): ap_const_lv176_lc_1);
}

void udp_eth_assemble::thread_tmp_1_fu_626_p3() {
    tmp_1_fu_626_p3 = action.read().range(128, 128);
}

void udp_eth_assemble::thread_tmp_fu_318_p3() {
    tmp_fu_318_p3 = payload_in_keep_V.read().range(41, 41);
}

void udp_eth_assemble::thread_trunc_ln215_fu_586_p1() {
    trunc_ln215_fu_586_p1 = action.read().range(32-1, 0);
}

void udp_eth_assemble::thread_trunc_ln647_1_fu_482_p1() {
    trunc_ln647_1_fu_482_p1 = payload_in_reg_keep_s.read().range(42-1, 0);
}

void udp_eth_assemble::thread_trunc_ln647_fu_436_p1() {
    trunc_ln647_fu_436_p1 = payload_in_reg_data_s.read().range(336-1, 0);
}

void udp_eth_assemble::thread_xor_ln1355_fu_326_p2() {
    xor_ln1355_fu_326_p2 = (tmp_fu_318_p3.read() ^ ap_const_lv1_1);
}

void udp_eth_assemble::thread_xor_ln215_fu_644_p2() {
    xor_ln215_fu_644_p2 = (add_ln215_2_fu_638_p2.read() ^ ap_const_lv16_FFFF);
}

void udp_eth_assemble::thread_zext_ln215_fu_634_p1() {
    zext_ln215_fu_634_p1 = esl_zext<16,1>(tmp_1_fu_626_p3.read());
}

void udp_eth_assemble::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void udp_eth_assemble::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"myMac_V\" :  \"" << myMac_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"myIP_V\" :  \"" << myIP_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"action\" :  \"" << action.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"action_valid_V\" :  \"" << action_valid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"action_empty_V\" :  \"" << action_empty_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"action_re_V\" :  \"" << action_re_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"payload_in_data_V\" :  \"" << payload_in_data_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"payload_in_keep_V\" :  \"" << payload_in_keep_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"payload_in_valid_V\" :  \"" << payload_in_valid_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"payload_in_last_V\" :  \"" << payload_in_last_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"payload_ready_V\" :  \"" << payload_ready_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packet_out_data_V\" :  \"" << packet_out_data_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packet_out_keep_V\" :  \"" << packet_out_keep_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packet_out_valid_V\" :  \"" << packet_out_valid_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"packet_out_last_V\" :  \"" << packet_out_last_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"packet_out_ready_V\" :  \"" << packet_out_ready_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

