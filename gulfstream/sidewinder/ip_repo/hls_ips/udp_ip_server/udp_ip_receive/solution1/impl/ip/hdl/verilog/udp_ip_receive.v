// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="udp_ip_receive,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.332000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2159,HLS_SYN_LUT=649,HLS_VERSION=2019_1}" *)

module udp_ip_receive (
        ap_clk,
        ap_rst,
        myIP_V,
        ip_in_data_V,
        ip_in_valid_V,
        meta_out_src_ip_V,
        meta_out_protocol_header_V,
        meta_out_checksum_V,
        meta_out_action_V,
        arp_internal_resp_Mac_IP_V,
        arp_internal_resp_valid_V
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [31:0] myIP_V;
input  [335:0] ip_in_data_V;
input  [0:0] ip_in_valid_V;
output  [31:0] meta_out_src_ip_V;
output  [63:0] meta_out_protocol_header_V;
output  [31:0] meta_out_checksum_V;
output  [1:0] meta_out_action_V;
output  [79:0] arp_internal_resp_Mac_IP_V;
output  [0:0] arp_internal_resp_valid_V;

reg   [79:0] arp_internal_resp_re_1;
reg   [0:0] arp_internal_resp_re;
reg   [31:0] meta_out_reg_src_ip_s;
reg   [63:0] meta_out_reg_protoco;
reg   [19:0] meta_out_reg_checksu;
reg   [1:0] meta_out_reg_action_s;
reg   [31:0] ip_in_reg5_src_ip_V;
reg   [47:0] eth_src_mac5_V;
reg   [0:0] ip_in_reg5_valid_V;
reg   [31:0] ip_in_reg5_dst_ip_V;
reg   [31:0] myIP_reg_V;
reg   [15:0] checksum_reg_final_V;
reg   [7:0] ip_in_reg5_proto_V;
reg   [63:0] ip_in_reg5_proto_hea;
reg   [15:0] ip_in_reg5_fixed_hea;
reg   [15:0] ip_in_reg5_fragment_s;
reg   [0:0] udp_ignore_flag4_V;
reg   [19:0] udp_cksum4_V;
reg   [19:0] checksum_reg3_0_V;
reg   [19:0] udp_cksum3_V;
reg   [0:0] udp_ignore_flag3_V;
reg   [15:0] ip_in_reg4_fixed_hea;
reg   [15:0] ip_in_reg4_fragment_s;
reg   [7:0] ip_in_reg4_proto_V;
reg   [31:0] ip_in_reg4_src_ip_V;
reg   [31:0] ip_in_reg4_dst_ip_V;
reg   [63:0] ip_in_reg4_proto_hea;
reg   [0:0] ip_in_reg4_valid_V;
reg   [47:0] eth_src_mac4_V;
reg   [18:0] checksum_reg2_0_V;
reg   [17:0] checksum_reg2_1_V;
reg   [18:0] udp_cksum2_0_V;
reg   [17:0] udp_cksum2_1_V;
reg   [0:0] udp_ignore_flag2_V;
reg   [15:0] ip_in_reg3_fixed_hea;
reg   [15:0] ip_in_reg3_fragment_s;
reg   [7:0] ip_in_reg3_proto_V;
reg   [31:0] ip_in_reg3_src_ip_V;
reg   [31:0] ip_in_reg3_dst_ip_V;
reg   [63:0] ip_in_reg3_proto_hea;
reg   [0:0] ip_in_reg3_valid_V;
reg   [47:0] eth_src_mac3_V;
reg   [16:0] checksum_reg1_2_V;
reg   [16:0] checksum_reg1_3_V;
reg   [17:0] checksum_reg1_0_V;
reg   [16:0] checksum_reg1_1_V;
reg   [17:0] udp_cksum1_0_V;
reg   [16:0] udp_cksum1_1_V;
reg   [16:0] udp_cksum1_2_V;
reg   [16:0] udp_cksum1_3_V;
reg   [0:0] udp_ignore_flag1_V;
reg   [63:0] ip_in_reg2_proto_hea;
reg   [15:0] ip_in_reg2_fixed_hea;
reg   [15:0] ip_in_reg2_fragment_s;
reg   [7:0] ip_in_reg2_proto_V;
reg   [31:0] ip_in_reg2_src_ip_V;
reg   [31:0] ip_in_reg2_dst_ip_V;
reg   [0:0] ip_in_reg2_valid_V;
reg   [47:0] eth_src_mac2_V;
reg   [15:0] checksum_reg0_6_V;
reg   [15:0] checksum_reg0_7_V;
reg   [15:0] checksum_reg0_4_V;
reg   [15:0] checksum_reg0_5_V;
reg   [15:0] checksum_reg0_2_V;
reg   [15:0] checksum_reg0_3_V;
reg   [17:0] checksum_reg0_0_V;
reg   [15:0] checksum_reg0_1_V;
reg   [16:0] udp_cksum0_0_V;
reg   [15:0] udp_cksum0_1_V;
reg   [15:0] udp_cksum0_2_V;
reg   [15:0] udp_cksum0_3_V;
reg   [15:0] udp_cksum0_4_V;
reg   [15:0] udp_cksum0_5_V;
reg   [15:0] udp_cksum0_6_V;
reg   [15:0] udp_cksum0_7_V;
reg   [0:0] udp_ignore_flag0_V;
reg   [15:0] ip_in_reg1_fixed_hea;
reg   [15:0] ip_in_reg1_fragment_s;
reg   [7:0] ip_in_reg1_proto_V;
reg   [31:0] ip_in_reg1_src_ip_V;
reg   [31:0] ip_in_reg1_dst_ip_V;
reg   [63:0] ip_in_reg1_proto_hea;
reg   [0:0] ip_in_reg1_valid_V;
reg   [47:0] eth_src_mac1_V;
reg   [31:0] ip_in_reg0_src_ip_V;
reg   [15:0] ip_in_reg0_checksum_s;
reg   [7:0] ip_in_reg0_proto_V;
reg   [7:0] ip_in_reg0_ttl_V;
reg   [15:0] ip_in_reg0_fragment_s;
reg   [15:0] ip_in_reg0_id_V;
reg   [15:0] ip_in_reg0_length_V;
reg   [16:0] checksum_precompute_s;
reg   [63:0] ip_in_reg0_proto_hea;
reg   [15:0] ip_in_reg0_fixed_hea;
reg   [31:0] ip_in_reg0_dst_ip_V;
reg   [0:0] ip_in_reg0_valid_V;
reg   [47:0] eth_src_mac0_V;
wire   [79:0] p_Result_s_fu_461_p3;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] ip_in_reg5_valid_V_l_load_fu_475_p1;
wire   [0:0] icmp_ln879_fu_504_p2;
wire   [0:0] val_assign_fu_574_p2;
wire   [0:0] and_ln84_fu_604_p2;
wire   [0:0] empty_11_fu_598_p2;
wire   [1:0] select_ln301_fu_626_p3;
wire   [15:0] add_ln209_fu_672_p2;
wire   [19:0] ret_V_fu_800_p2;
wire   [19:0] ret_V_1_fu_828_p2;
wire   [18:0] ret_V_3_fu_974_p2;
wire   [17:0] ret_V_2_fu_946_p2;
wire   [18:0] ret_V_4_fu_1002_p2;
wire   [17:0] ret_V_5_fu_1030_p2;
wire   [0:0] or_ln544_fu_1064_p2;
wire   [16:0] ret_V_7_fu_1196_p2;
wire   [16:0] ret_V_6_fu_1168_p2;
wire   [17:0] ret_V_9_fu_1248_p2;
wire   [16:0] ret_V_8_fu_1224_p2;
wire   [17:0] ret_V_10_fu_1276_p2;
wire   [16:0] ret_V_11_fu_1304_p2;
wire   [16:0] ret_V_12_fu_1332_p2;
wire   [16:0] ret_V_13_fu_1360_p2;
wire   [15:0] trunc_ln647_1_fu_1466_p1;
wire   [15:0] p_Result_2_fu_1510_p3;
wire   [17:0] ret_V_14_fu_1562_p2;
wire   [16:0] add_ln209_1_fu_1574_p2;
wire   [15:0] trunc_ln647_2_fu_1656_p1;
wire   [0:0] icmp_ln879_6_fu_1666_p2;
wire   [16:0] add_ln209_2_fu_1764_p2;
wire   [63:0] trunc_ln647_3_fu_1936_p1;
wire   [0:0] icmp_ln879_1_fu_514_p2;
wire   [0:0] icmp_ln879_2_fu_520_p2;
wire   [0:0] icmp_ln879_3_fu_532_p2;
wire   [0:0] icmp_ln879_4_fu_538_p2;
wire   [0:0] icmp_ln74_fu_550_p2;
wire   [0:0] icmp_ln74_1_fu_556_p2;
wire   [0:0] and_ln75_fu_526_p2;
wire   [0:0] or_ln76_fu_544_p2;
wire   [0:0] tmp_fu_568_p2;
wire   [0:0] or_ln74_fu_562_p2;
wire   [0:0] empty_10_fu_592_p2;
wire   [0:0] empty_fu_586_p2;
wire   [3:0] tmp_1_fu_654_p4;
wire   [15:0] zext_ln364_fu_664_p1;
wire   [15:0] trunc_ln647_fu_668_p1;
wire   [19:0] zext_ln215_4_fu_788_p1;
wire   [19:0] zext_ln215_5_fu_796_p1;
wire   [19:0] lhs_V_fu_816_p1;
wire   [19:0] rhs_V_fu_824_p1;
wire   [17:0] zext_ln215_fu_934_p1;
wire   [17:0] zext_ln215_1_fu_942_p1;
wire   [18:0] zext_ln215_2_fu_962_p1;
wire   [18:0] zext_ln215_3_fu_970_p1;
wire   [18:0] lhs_V_1_fu_990_p1;
wire   [18:0] rhs_V_1_fu_998_p1;
wire   [17:0] zext_ln215_6_fu_1018_p1;
wire   [17:0] zext_ln215_7_fu_1026_p1;
wire   [15:0] trunc_ln357_fu_1050_p1;
wire   [18:0] zext_ln357_fu_1054_p1;
wire   [0:0] icmp_ln879_5_fu_1058_p2;
wire   [16:0] zext_ln215_8_fu_1156_p1;
wire   [16:0] zext_ln215_9_fu_1164_p1;
wire   [16:0] zext_ln215_10_fu_1184_p1;
wire   [16:0] zext_ln215_11_fu_1192_p1;
wire   [16:0] zext_ln215_12_fu_1212_p1;
wire   [16:0] zext_ln215_13_fu_1220_p1;
wire   [17:0] zext_ln215_14_fu_1244_p1;
wire   [17:0] lhs_V_2_fu_1264_p1;
wire   [17:0] rhs_V_2_fu_1272_p1;
wire   [16:0] zext_ln215_17_fu_1292_p1;
wire   [16:0] zext_ln215_18_fu_1300_p1;
wire   [16:0] zext_ln215_19_fu_1320_p1;
wire   [16:0] zext_ln215_20_fu_1328_p1;
wire   [16:0] zext_ln215_21_fu_1348_p1;
wire   [16:0] zext_ln215_22_fu_1356_p1;
wire   [17:0] rhs_V_3_fu_1558_p1;
wire   [15:0] p_Result_8_fu_1742_p4;
wire   [15:0] trunc_ln357_1_fu_1752_p1;
wire   [16:0] zext_ln209_fu_1756_p1;
wire   [16:0] zext_ln209_1_fu_1760_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_condition_165;
reg    ap_condition_171;

// power-on initialization
initial begin
#0 arp_internal_resp_re_1 = 80'd0;
#0 arp_internal_resp_re = 1'd0;
#0 meta_out_reg_src_ip_s = 32'd0;
#0 meta_out_reg_protoco = 64'd0;
#0 meta_out_reg_checksu = 20'd0;
#0 meta_out_reg_action_s = 2'd0;
#0 ip_in_reg5_src_ip_V = 32'd0;
#0 eth_src_mac5_V = 48'd0;
#0 ip_in_reg5_valid_V = 1'd0;
#0 ip_in_reg5_dst_ip_V = 32'd0;
#0 myIP_reg_V = 32'd0;
#0 checksum_reg_final_V = 16'd0;
#0 ip_in_reg5_proto_V = 8'd0;
#0 ip_in_reg5_proto_hea = 64'd0;
#0 ip_in_reg5_fixed_hea = 16'd0;
#0 ip_in_reg5_fragment_s = 16'd0;
#0 udp_ignore_flag4_V = 1'd0;
#0 udp_cksum4_V = 20'd0;
#0 checksum_reg3_0_V = 20'd0;
#0 udp_cksum3_V = 20'd0;
#0 udp_ignore_flag3_V = 1'd0;
#0 ip_in_reg4_fixed_hea = 16'd0;
#0 ip_in_reg4_fragment_s = 16'd0;
#0 ip_in_reg4_proto_V = 8'd0;
#0 ip_in_reg4_src_ip_V = 32'd0;
#0 ip_in_reg4_dst_ip_V = 32'd0;
#0 ip_in_reg4_proto_hea = 64'd0;
#0 ip_in_reg4_valid_V = 1'd0;
#0 eth_src_mac4_V = 48'd0;
#0 checksum_reg2_0_V = 19'd0;
#0 checksum_reg2_1_V = 18'd0;
#0 udp_cksum2_0_V = 19'd0;
#0 udp_cksum2_1_V = 18'd0;
#0 udp_ignore_flag2_V = 1'd0;
#0 ip_in_reg3_fixed_hea = 16'd0;
#0 ip_in_reg3_fragment_s = 16'd0;
#0 ip_in_reg3_proto_V = 8'd0;
#0 ip_in_reg3_src_ip_V = 32'd0;
#0 ip_in_reg3_dst_ip_V = 32'd0;
#0 ip_in_reg3_proto_hea = 64'd0;
#0 ip_in_reg3_valid_V = 1'd0;
#0 eth_src_mac3_V = 48'd0;
#0 checksum_reg1_2_V = 17'd0;
#0 checksum_reg1_3_V = 17'd0;
#0 checksum_reg1_0_V = 18'd0;
#0 checksum_reg1_1_V = 17'd0;
#0 udp_cksum1_0_V = 18'd0;
#0 udp_cksum1_1_V = 17'd0;
#0 udp_cksum1_2_V = 17'd0;
#0 udp_cksum1_3_V = 17'd0;
#0 udp_ignore_flag1_V = 1'd0;
#0 ip_in_reg2_proto_hea = 64'd0;
#0 ip_in_reg2_fixed_hea = 16'd0;
#0 ip_in_reg2_fragment_s = 16'd0;
#0 ip_in_reg2_proto_V = 8'd0;
#0 ip_in_reg2_src_ip_V = 32'd0;
#0 ip_in_reg2_dst_ip_V = 32'd0;
#0 ip_in_reg2_valid_V = 1'd0;
#0 eth_src_mac2_V = 48'd0;
#0 checksum_reg0_6_V = 16'd0;
#0 checksum_reg0_7_V = 16'd0;
#0 checksum_reg0_4_V = 16'd0;
#0 checksum_reg0_5_V = 16'd0;
#0 checksum_reg0_2_V = 16'd0;
#0 checksum_reg0_3_V = 16'd0;
#0 checksum_reg0_0_V = 18'd0;
#0 checksum_reg0_1_V = 16'd0;
#0 udp_cksum0_0_V = 17'd0;
#0 udp_cksum0_1_V = 16'd0;
#0 udp_cksum0_2_V = 16'd0;
#0 udp_cksum0_3_V = 16'd0;
#0 udp_cksum0_4_V = 16'd0;
#0 udp_cksum0_5_V = 16'd0;
#0 udp_cksum0_6_V = 16'd0;
#0 udp_cksum0_7_V = 16'd0;
#0 udp_ignore_flag0_V = 1'd0;
#0 ip_in_reg1_fixed_hea = 16'd0;
#0 ip_in_reg1_fragment_s = 16'd0;
#0 ip_in_reg1_proto_V = 8'd0;
#0 ip_in_reg1_src_ip_V = 32'd0;
#0 ip_in_reg1_dst_ip_V = 32'd0;
#0 ip_in_reg1_proto_hea = 64'd0;
#0 ip_in_reg1_valid_V = 1'd0;
#0 eth_src_mac1_V = 48'd0;
#0 ip_in_reg0_src_ip_V = 32'd0;
#0 ip_in_reg0_checksum_s = 16'd0;
#0 ip_in_reg0_proto_V = 8'd0;
#0 ip_in_reg0_ttl_V = 8'd0;
#0 ip_in_reg0_fragment_s = 16'd0;
#0 ip_in_reg0_id_V = 16'd0;
#0 ip_in_reg0_length_V = 16'd0;
#0 checksum_precompute_s = 17'd0;
#0 ip_in_reg0_proto_hea = 64'd0;
#0 ip_in_reg0_fixed_hea = 16'd0;
#0 ip_in_reg0_dst_ip_V = 32'd0;
#0 ip_in_reg0_valid_V = 1'd0;
#0 eth_src_mac0_V = 48'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        arp_internal_resp_re <= 1'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (icmp_ln879_fu_504_p2 == 1'd1) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd1))) begin
            arp_internal_resp_re <= val_assign_fu_574_p2;
        end else if ((((1'b1 == ap_CS_fsm_state1) & (icmp_ln879_fu_504_p2 == 1'd0) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd0)))) begin
            arp_internal_resp_re <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        arp_internal_resp_re_1 <= 80'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            arp_internal_resp_re_1 <= p_Result_s_fu_461_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_precompute_s <= 17'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_precompute_s <= add_ln209_2_fu_1764_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg0_0_V <= 18'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg0_0_V <= ret_V_14_fu_1562_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg0_1_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg0_1_V <= ip_in_reg0_length_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg0_2_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg0_2_V <= ip_in_reg0_id_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg0_3_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg0_3_V <= ip_in_reg0_fragment_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg0_4_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg0_4_V <= p_Result_2_fu_1510_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg0_5_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg0_5_V <= ip_in_reg0_checksum_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg0_6_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg0_6_V <= {{ip_in_reg0_src_ip_V[31:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg0_7_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg0_7_V <= trunc_ln647_1_fu_1466_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg1_0_V <= 18'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg1_0_V <= ret_V_9_fu_1248_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg1_1_V <= 17'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg1_1_V <= ret_V_8_fu_1224_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg1_2_V <= 17'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg1_2_V <= ret_V_7_fu_1196_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg1_3_V <= 17'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg1_3_V <= ret_V_6_fu_1168_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg2_0_V <= 19'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg2_0_V <= ret_V_3_fu_974_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg2_1_V <= 18'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg2_1_V <= ret_V_2_fu_946_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg3_0_V <= 20'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg3_0_V <= ret_V_fu_800_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        checksum_reg_final_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            checksum_reg_final_V <= add_ln209_fu_672_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        eth_src_mac0_V <= 48'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            eth_src_mac0_V <= {{ip_in_data_V[287:240]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        eth_src_mac1_V <= 48'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            eth_src_mac1_V <= eth_src_mac0_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        eth_src_mac2_V <= 48'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            eth_src_mac2_V <= eth_src_mac1_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        eth_src_mac3_V <= 48'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            eth_src_mac3_V <= eth_src_mac2_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        eth_src_mac4_V <= 48'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            eth_src_mac4_V <= eth_src_mac3_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        eth_src_mac5_V <= 48'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            eth_src_mac5_V <= eth_src_mac4_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_checksum_s <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_checksum_s <= {{ip_in_data_V[143:128]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_dst_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_dst_ip_V <= {{ip_in_data_V[95:64]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_fixed_hea <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_fixed_hea <= {{ip_in_data_V[223:208]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_fragment_s <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_fragment_s <= {{ip_in_data_V[175:160]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_id_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_id_V <= {{ip_in_data_V[191:176]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_length_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_length_V <= {{ip_in_data_V[207:192]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_proto_V <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_proto_V <= {{ip_in_data_V[151:144]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_proto_hea <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_proto_hea <= trunc_ln647_3_fu_1936_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_src_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_src_ip_V <= {{ip_in_data_V[127:96]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_ttl_V <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_ttl_V <= {{ip_in_data_V[159:152]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg0_valid_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg0_valid_V <= ip_in_valid_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg1_dst_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg1_dst_ip_V <= ip_in_reg0_dst_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg1_fixed_hea <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg1_fixed_hea <= ip_in_reg0_fixed_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg1_fragment_s <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg1_fragment_s <= ip_in_reg0_fragment_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg1_proto_V <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg1_proto_V <= ip_in_reg0_proto_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg1_proto_hea <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg1_proto_hea <= ip_in_reg0_proto_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg1_src_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg1_src_ip_V <= ip_in_reg0_src_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg1_valid_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg1_valid_V <= ip_in_reg0_valid_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg2_dst_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg2_dst_ip_V <= ip_in_reg1_dst_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg2_fixed_hea <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg2_fixed_hea <= ip_in_reg1_fixed_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg2_fragment_s <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg2_fragment_s <= ip_in_reg1_fragment_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg2_proto_V <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg2_proto_V <= ip_in_reg1_proto_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg2_proto_hea <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg2_proto_hea <= ip_in_reg1_proto_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg2_src_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg2_src_ip_V <= ip_in_reg1_src_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg2_valid_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg2_valid_V <= ip_in_reg1_valid_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg3_dst_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg3_dst_ip_V <= ip_in_reg2_dst_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg3_fixed_hea <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg3_fixed_hea <= ip_in_reg2_fixed_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg3_fragment_s <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg3_fragment_s <= ip_in_reg2_fragment_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg3_proto_V <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg3_proto_V <= ip_in_reg2_proto_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg3_proto_hea <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg3_proto_hea <= ip_in_reg2_proto_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg3_src_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg3_src_ip_V <= ip_in_reg2_src_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg3_valid_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg3_valid_V <= ip_in_reg2_valid_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg4_dst_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg4_dst_ip_V <= ip_in_reg3_dst_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg4_fixed_hea <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg4_fixed_hea <= ip_in_reg3_fixed_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg4_fragment_s <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg4_fragment_s <= ip_in_reg3_fragment_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg4_proto_V <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg4_proto_V <= ip_in_reg3_proto_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg4_proto_hea <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg4_proto_hea <= ip_in_reg3_proto_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg4_src_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg4_src_ip_V <= ip_in_reg3_src_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg4_valid_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg4_valid_V <= ip_in_reg3_valid_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg5_dst_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg5_dst_ip_V <= ip_in_reg4_dst_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg5_fixed_hea <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg5_fixed_hea <= ip_in_reg4_fixed_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg5_fragment_s <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg5_fragment_s <= ip_in_reg4_fragment_s;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg5_proto_V <= 8'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg5_proto_V <= ip_in_reg4_proto_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg5_proto_hea <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg5_proto_hea <= ip_in_reg4_proto_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg5_src_ip_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg5_src_ip_V <= ip_in_reg4_src_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_in_reg5_valid_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ip_in_reg5_valid_V <= ip_in_reg4_valid_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        meta_out_reg_action_s <= 2'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((1'b1 == ap_condition_171)) begin
                meta_out_reg_action_s <= select_ln301_fu_626_p3;
            end else if ((1'b1 == ap_condition_165)) begin
                meta_out_reg_action_s <= 2'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        meta_out_reg_checksu <= 20'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((1'b1 == ap_condition_171)) begin
                meta_out_reg_checksu <= udp_cksum4_V;
            end else if ((1'b1 == ap_condition_165)) begin
                meta_out_reg_checksu <= 20'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        meta_out_reg_protoco <= 64'd0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state1) & (icmp_ln879_fu_504_p2 == 1'd1) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (icmp_ln879_fu_504_p2 == 1'd0) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd0)))) begin
            meta_out_reg_protoco <= ip_in_reg5_proto_hea;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        meta_out_reg_src_ip_s <= 32'd0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state1) & (icmp_ln879_fu_504_p2 == 1'd1) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (icmp_ln879_fu_504_p2 == 1'd0) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd1)) | ((1'b1 == ap_CS_fsm_state1) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd0)))) begin
            meta_out_reg_src_ip_s <= ip_in_reg5_src_ip_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        myIP_reg_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            myIP_reg_V <= myIP_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum0_0_V <= 17'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum0_0_V <= add_ln209_1_fu_1574_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum0_1_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum0_1_V <= {{ip_in_reg0_src_ip_V[31:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum0_2_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum0_2_V <= trunc_ln647_1_fu_1466_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum0_3_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum0_3_V <= {{ip_in_reg0_proto_hea[31:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum0_4_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum0_4_V <= {{ip_in_reg0_proto_hea[63:48]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum0_5_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum0_5_V <= {{ip_in_reg0_proto_hea[47:32]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum0_6_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum0_6_V <= {{ip_in_reg0_proto_hea[31:16]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum0_7_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum0_7_V <= trunc_ln647_2_fu_1656_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum1_0_V <= 18'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum1_0_V <= ret_V_10_fu_1276_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum1_1_V <= 17'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum1_1_V <= ret_V_11_fu_1304_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum1_2_V <= 17'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum1_2_V <= ret_V_12_fu_1332_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum1_3_V <= 17'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum1_3_V <= ret_V_13_fu_1360_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum2_0_V <= 19'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum2_0_V <= ret_V_4_fu_1002_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum2_1_V <= 18'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum2_1_V <= ret_V_5_fu_1030_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum3_V <= 20'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum3_V <= ret_V_1_fu_828_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_cksum4_V <= 20'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_cksum4_V <= udp_cksum3_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_ignore_flag0_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_ignore_flag0_V <= icmp_ln879_6_fu_1666_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_ignore_flag1_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_ignore_flag1_V <= udp_ignore_flag0_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_ignore_flag2_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_ignore_flag2_V <= or_ln544_fu_1064_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_ignore_flag3_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_ignore_flag3_V <= udp_ignore_flag2_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        udp_ignore_flag4_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            udp_ignore_flag4_V <= udp_ignore_flag3_V;
        end
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln209_1_fu_1574_p2 = (17'd17 + checksum_precompute_s);

assign add_ln209_2_fu_1764_p2 = (zext_ln209_fu_1756_p1 + zext_ln209_1_fu_1760_p1);

assign add_ln209_fu_672_p2 = (zext_ln364_fu_664_p1 + trunc_ln647_fu_668_p1);

assign and_ln75_fu_526_p2 = (icmp_ln879_2_fu_520_p2 & icmp_ln879_1_fu_514_p2);

assign and_ln84_fu_604_p2 = (icmp_ln879_4_fu_538_p2 & and_ln75_fu_526_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_165 = ((((empty_11_fu_598_p2 == 1'd0) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd1)) | ((1'd0 == and_ln84_fu_604_p2) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd1))) | ((icmp_ln879_fu_504_p2 == 1'd0) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd1)));
end

always @ (*) begin
    ap_condition_171 = ((empty_11_fu_598_p2 == 1'd1) & (1'd1 == and_ln84_fu_604_p2) & (icmp_ln879_fu_504_p2 == 1'd1) & (ip_in_reg5_valid_V_l_load_fu_475_p1 == 1'd1));
end

assign arp_internal_resp_Mac_IP_V = arp_internal_resp_re_1;

assign arp_internal_resp_valid_V = arp_internal_resp_re;

assign empty_10_fu_592_p2 = ((ip_in_reg5_fragment_s == 16'd0) ? 1'b1 : 1'b0);

assign empty_11_fu_598_p2 = (empty_fu_586_p2 | empty_10_fu_592_p2);

assign empty_fu_586_p2 = ((ip_in_reg5_fragment_s == 16'd16384) ? 1'b1 : 1'b0);

assign icmp_ln74_1_fu_556_p2 = ((ip_in_reg5_fragment_s == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln74_fu_550_p2 = ((ip_in_reg5_fragment_s == 16'd16384) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_514_p2 = ((ip_in_reg5_dst_ip_V == myIP_reg_V) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_520_p2 = ((checksum_reg_final_V == 16'd65535) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_532_p2 = ((ip_in_reg5_proto_V == 8'd1) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_538_p2 = ((ip_in_reg5_proto_V == 8'd17) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_1058_p2 = ((ret_V_4_fu_1002_p2 == zext_ln357_fu_1054_p1) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_1666_p2 = ((trunc_ln647_2_fu_1656_p1 == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_504_p2 = ((ip_in_reg5_fixed_hea == 16'd17664) ? 1'b1 : 1'b0);

assign ip_in_reg5_valid_V_l_load_fu_475_p1 = ip_in_reg5_valid_V;

assign lhs_V_1_fu_990_p1 = udp_cksum1_0_V;

assign lhs_V_2_fu_1264_p1 = udp_cksum0_0_V;

assign lhs_V_fu_816_p1 = udp_cksum2_0_V;

assign meta_out_action_V = meta_out_reg_action_s;

assign meta_out_checksum_V = meta_out_reg_checksu;

assign meta_out_protocol_header_V = meta_out_reg_protoco;

assign meta_out_src_ip_V = meta_out_reg_src_ip_s;

assign or_ln544_fu_1064_p2 = (udp_ignore_flag1_V | icmp_ln879_5_fu_1058_p2);

assign or_ln74_fu_562_p2 = (icmp_ln74_fu_550_p2 | icmp_ln74_1_fu_556_p2);

assign or_ln76_fu_544_p2 = (icmp_ln879_4_fu_538_p2 | icmp_ln879_3_fu_532_p2);

assign p_Result_2_fu_1510_p3 = {{ip_in_reg0_ttl_V}, {ip_in_reg0_proto_V}};

assign p_Result_8_fu_1742_p4 = {{myIP_reg_V[31:16]}};

assign p_Result_s_fu_461_p3 = {{eth_src_mac5_V}, {ip_in_reg5_src_ip_V}};

assign ret_V_10_fu_1276_p2 = (lhs_V_2_fu_1264_p1 + rhs_V_2_fu_1272_p1);

assign ret_V_11_fu_1304_p2 = (zext_ln215_17_fu_1292_p1 + zext_ln215_18_fu_1300_p1);

assign ret_V_12_fu_1332_p2 = (zext_ln215_19_fu_1320_p1 + zext_ln215_20_fu_1328_p1);

assign ret_V_13_fu_1360_p2 = (zext_ln215_21_fu_1348_p1 + zext_ln215_22_fu_1356_p1);

assign ret_V_14_fu_1562_p2 = (18'd17664 + rhs_V_3_fu_1558_p1);

assign ret_V_1_fu_828_p2 = (lhs_V_fu_816_p1 + rhs_V_fu_824_p1);

assign ret_V_2_fu_946_p2 = (zext_ln215_fu_934_p1 + zext_ln215_1_fu_942_p1);

assign ret_V_3_fu_974_p2 = (zext_ln215_2_fu_962_p1 + zext_ln215_3_fu_970_p1);

assign ret_V_4_fu_1002_p2 = (lhs_V_1_fu_990_p1 + rhs_V_1_fu_998_p1);

assign ret_V_5_fu_1030_p2 = (zext_ln215_6_fu_1018_p1 + zext_ln215_7_fu_1026_p1);

assign ret_V_6_fu_1168_p2 = (zext_ln215_8_fu_1156_p1 + zext_ln215_9_fu_1164_p1);

assign ret_V_7_fu_1196_p2 = (zext_ln215_10_fu_1184_p1 + zext_ln215_11_fu_1192_p1);

assign ret_V_8_fu_1224_p2 = (zext_ln215_12_fu_1212_p1 + zext_ln215_13_fu_1220_p1);

assign ret_V_9_fu_1248_p2 = (checksum_reg0_0_V + zext_ln215_14_fu_1244_p1);

assign ret_V_fu_800_p2 = (zext_ln215_4_fu_788_p1 + zext_ln215_5_fu_796_p1);

assign rhs_V_1_fu_998_p1 = udp_cksum1_1_V;

assign rhs_V_2_fu_1272_p1 = udp_cksum0_1_V;

assign rhs_V_3_fu_1558_p1 = checksum_precompute_s;

assign rhs_V_fu_824_p1 = udp_cksum2_1_V;

assign select_ln301_fu_626_p3 = ((udp_ignore_flag4_V[0:0] === 1'b1) ? 2'd2 : 2'd1);

assign tmp_1_fu_654_p4 = {{checksum_reg3_0_V[19:16]}};

assign tmp_fu_568_p2 = (or_ln76_fu_544_p2 & and_ln75_fu_526_p2);

assign trunc_ln357_1_fu_1752_p1 = myIP_reg_V[15:0];

assign trunc_ln357_fu_1050_p1 = ip_in_reg2_proto_hea[15:0];

assign trunc_ln647_1_fu_1466_p1 = ip_in_reg0_src_ip_V[15:0];

assign trunc_ln647_2_fu_1656_p1 = ip_in_reg0_proto_hea[15:0];

assign trunc_ln647_3_fu_1936_p1 = ip_in_data_V[63:0];

assign trunc_ln647_fu_668_p1 = checksum_reg3_0_V[15:0];

assign val_assign_fu_574_p2 = (tmp_fu_568_p2 & or_ln74_fu_562_p2);

assign zext_ln209_1_fu_1760_p1 = trunc_ln357_1_fu_1752_p1;

assign zext_ln209_fu_1756_p1 = p_Result_8_fu_1742_p4;

assign zext_ln215_10_fu_1184_p1 = checksum_reg0_4_V;

assign zext_ln215_11_fu_1192_p1 = checksum_reg0_5_V;

assign zext_ln215_12_fu_1212_p1 = checksum_reg0_2_V;

assign zext_ln215_13_fu_1220_p1 = checksum_reg0_3_V;

assign zext_ln215_14_fu_1244_p1 = checksum_reg0_1_V;

assign zext_ln215_17_fu_1292_p1 = udp_cksum0_2_V;

assign zext_ln215_18_fu_1300_p1 = udp_cksum0_3_V;

assign zext_ln215_19_fu_1320_p1 = udp_cksum0_4_V;

assign zext_ln215_1_fu_942_p1 = checksum_reg1_3_V;

assign zext_ln215_20_fu_1328_p1 = udp_cksum0_5_V;

assign zext_ln215_21_fu_1348_p1 = udp_cksum0_6_V;

assign zext_ln215_22_fu_1356_p1 = udp_cksum0_7_V;

assign zext_ln215_2_fu_962_p1 = checksum_reg1_0_V;

assign zext_ln215_3_fu_970_p1 = checksum_reg1_1_V;

assign zext_ln215_4_fu_788_p1 = checksum_reg2_0_V;

assign zext_ln215_5_fu_796_p1 = checksum_reg2_1_V;

assign zext_ln215_6_fu_1018_p1 = udp_cksum1_2_V;

assign zext_ln215_7_fu_1026_p1 = udp_cksum1_3_V;

assign zext_ln215_8_fu_1156_p1 = checksum_reg0_6_V;

assign zext_ln215_9_fu_1164_p1 = checksum_reg0_7_V;

assign zext_ln215_fu_934_p1 = checksum_reg1_2_V;

assign zext_ln357_fu_1054_p1 = trunc_ln357_fu_1050_p1;

assign zext_ln364_fu_664_p1 = tmp_1_fu_654_p4;

endmodule //udp_ip_receive
