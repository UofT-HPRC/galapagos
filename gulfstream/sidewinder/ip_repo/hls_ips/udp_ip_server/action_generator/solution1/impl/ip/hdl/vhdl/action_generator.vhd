-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity action_generator is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    meta_in_src_ip_V : IN STD_LOGIC_VECTOR (31 downto 0);
    meta_in_protocol_header_V : IN STD_LOGIC_VECTOR (63 downto 0);
    meta_in_checksum_V : IN STD_LOGIC_VECTOR (31 downto 0);
    meta_in_action_V : IN STD_LOGIC_VECTOR (1 downto 0);
    payload_cksum_data_V : IN STD_LOGIC_VECTOR (31 downto 0);
    payload_cksum_valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    action_out : OUT STD_LOGIC_VECTOR (64 downto 0);
    action_out_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of action_generator is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "action_generator,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.389000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=441,HLS_SYN_LUT=86,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal action_out_reg1_src_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal action_out_reg1_src_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal action_out_reg1_dst_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ignore_flag1_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal combined_cksum_final : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal action_out_valid_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal combined_cksum_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal action_out_reg_src_i : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal action_out_reg_src_p : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal action_out_reg_dst_p : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal action_out_valid_reg_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ignore_flag_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal meta_in_reg_checksum : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal meta_in_reg_src_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal meta_in_reg_protocol : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal meta_in_reg_action_V : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal meta_in_reg0_src_ip_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal meta_in_reg0_protoco : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal meta_in_reg0_checksu : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal meta_in_reg0_action_s : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln209_fu_224_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln209_1_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln879_1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln544_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_210_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln357_fu_220_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    action_out_reg1_dst_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action_out_reg1_dst_s <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    action_out_reg1_dst_s <= action_out_reg_dst_p;
                end if; 
            end if;
        end if;
    end process;


    action_out_reg1_src_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action_out_reg1_src_1 <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    action_out_reg1_src_1 <= action_out_reg_src_i;
                end if; 
            end if;
        end if;
    end process;


    action_out_reg1_src_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action_out_reg1_src_s <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    action_out_reg1_src_s <= action_out_reg_src_p;
                end if; 
            end if;
        end if;
    end process;


    action_out_reg_dst_p_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action_out_reg_dst_p <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    action_out_reg_dst_p <= meta_in_reg_protocol(47 downto 32);
                end if; 
            end if;
        end if;
    end process;


    action_out_reg_src_i_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action_out_reg_src_i <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    action_out_reg_src_i <= meta_in_reg_src_ip_V;
                end if; 
            end if;
        end if;
    end process;


    action_out_reg_src_p_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action_out_reg_src_p <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    action_out_reg_src_p <= meta_in_reg_protocol(63 downto 48);
                end if; 
            end if;
        end if;
    end process;


    action_out_valid_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action_out_valid_reg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    action_out_valid_reg <= action_out_valid_reg_1;
                end if; 
            end if;
        end if;
    end process;


    action_out_valid_reg_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                action_out_valid_reg_1 <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    action_out_valid_reg_1 <= payload_cksum_valid_V;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    combined_cksum_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                combined_cksum_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    combined_cksum_V <= add_ln209_1_fu_290_p2;
                end if; 
            end if;
        end if;
    end process;


    combined_cksum_final_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                combined_cksum_final <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    combined_cksum_final <= add_ln209_fu_224_p2;
                end if; 
            end if;
        end if;
    end process;


    ignore_flag1_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ignore_flag1_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ignore_flag1_V <= ignore_flag_V;
                end if; 
            end if;
        end if;
    end process;


    ignore_flag_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ignore_flag_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ignore_flag_V <= icmp_ln879_1_fu_358_p2;
                end if; 
            end if;
        end if;
    end process;


    meta_in_reg0_action_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_in_reg0_action_s <= ap_const_lv2_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    meta_in_reg0_action_s <= meta_in_action_V;
                end if; 
            end if;
        end if;
    end process;


    meta_in_reg0_checksu_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_in_reg0_checksu <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    meta_in_reg0_checksu <= meta_in_checksum_V;
                end if; 
            end if;
        end if;
    end process;


    meta_in_reg0_protoco_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_in_reg0_protoco <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    meta_in_reg0_protoco <= meta_in_protocol_header_V;
                end if; 
            end if;
        end if;
    end process;


    meta_in_reg0_src_ip_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_in_reg0_src_ip_s <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    meta_in_reg0_src_ip_s <= meta_in_src_ip_V;
                end if; 
            end if;
        end if;
    end process;


    meta_in_reg_action_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_in_reg_action_V <= ap_const_lv2_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    meta_in_reg_action_V <= meta_in_reg0_action_s;
                end if; 
            end if;
        end if;
    end process;


    meta_in_reg_checksum_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_in_reg_checksum <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    meta_in_reg_checksum <= meta_in_reg0_checksu;
                end if; 
            end if;
        end if;
    end process;


    meta_in_reg_protocol_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_in_reg_protocol <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    meta_in_reg_protocol <= meta_in_reg0_protoco;
                end if; 
            end if;
        end if;
    end process;


    meta_in_reg_src_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_in_reg_src_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    meta_in_reg_src_ip_V <= meta_in_reg0_src_ip_s;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    action_out <= (((or_ln544_fu_182_p2 & action_out_reg1_dst_s) & action_out_reg1_src_s) & action_out_reg1_src_1);
    action_out_valid_V <= action_out_valid_reg;
    add_ln209_1_fu_290_p2 <= std_logic_vector(unsigned(payload_cksum_data_V) + unsigned(meta_in_reg_checksum));
    add_ln209_fu_224_p2 <= std_logic_vector(unsigned(p_Result_s_fu_210_p4) + unsigned(trunc_ln357_fu_220_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    icmp_ln879_1_fu_358_p2 <= "1" when (meta_in_reg_action_V = ap_const_lv2_2) else "0";
    icmp_ln879_fu_176_p2 <= "1" when (combined_cksum_final = ap_const_lv16_FFFF) else "0";
    or_ln544_fu_182_p2 <= (ignore_flag1_V or icmp_ln879_fu_176_p2);
    p_Result_s_fu_210_p4 <= combined_cksum_V(31 downto 16);
    trunc_ln357_fu_220_p1 <= combined_cksum_V(16 - 1 downto 0);
end behav;
