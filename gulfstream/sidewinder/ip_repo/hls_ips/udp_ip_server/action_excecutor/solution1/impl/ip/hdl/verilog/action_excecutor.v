// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="action_excecutor,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.188000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=643,HLS_SYN_LUT=614,HLS_VERSION=2019_1}" *)

module action_excecutor (
        ap_clk,
        ap_rst,
        action,
        action_valid_V,
        action_empty_V,
        action_re_V,
        payload_in_data_V,
        payload_in_keep_V,
        payload_in_valid_V,
        payload_in_last_V,
        payload_ready_V,
        payload_out_data_V,
        payload_out_keep_V,
        payload_out_valid_V,
        payload_out_last_V,
        src_ip_V,
        src_port_V,
        dst_port_V
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [64:0] action;
input  [0:0] action_valid_V;
input  [0:0] action_empty_V;
output  [0:0] action_re_V;
input  [511:0] payload_in_data_V;
input  [63:0] payload_in_keep_V;
input  [0:0] payload_in_valid_V;
input  [0:0] payload_in_last_V;
output  [0:0] payload_ready_V;
output  [511:0] payload_out_data_V;
output  [63:0] payload_out_keep_V;
output  [0:0] payload_out_valid_V;
output  [0:0] payload_out_last_V;
output  [31:0] src_ip_V;
output  [15:0] src_port_V;
output  [15:0] dst_port_V;

reg   [511:0] payload_out_reg_data;
reg   [63:0] payload_out_reg_keep;
reg   [0:0] payload_out_reg_vali;
reg   [0:0] payload_out_reg_last;
reg   [31:0] src_ip_reg_V;
reg   [15:0] src_port_reg_V;
reg   [15:0] dst_port_reg_V;
reg   [15:0] ap_phi_mux_storemerge_phi_fu_211_p4;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] ret_V_1_fu_261_p2;
wire   [511:0] select_ln68_fu_273_p3;
wire   [63:0] select_ln68_1_fu_281_p3;
wire   [0:0] ret_V_fu_267_p2;
wire   [0:0] and_ln68_fu_289_p2;
wire   [31:0] trunc_ln321_fu_331_p1;
wire   [0:0] rhs_V_fu_253_p3;
wire   [0:0] lhs_V_fu_374_p2;
wire   [0:0] and_ln1355_fu_380_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 payload_out_reg_data = 512'd0;
#0 payload_out_reg_keep = 64'd0;
#0 payload_out_reg_vali = 1'd0;
#0 payload_out_reg_last = 1'd0;
#0 src_ip_reg_V = 32'd0;
#0 src_port_reg_V = 16'd0;
#0 dst_port_reg_V = 16'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        dst_port_reg_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            dst_port_reg_V <= ap_phi_mux_storemerge_phi_fu_211_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        payload_out_reg_data <= 512'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            payload_out_reg_data <= select_ln68_fu_273_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        payload_out_reg_keep <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            payload_out_reg_keep <= select_ln68_1_fu_281_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        payload_out_reg_last <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            payload_out_reg_last <= and_ln68_fu_289_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        payload_out_reg_vali <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            payload_out_reg_vali <= ret_V_fu_267_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_ip_reg_V <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_1_fu_261_p2 == 1'd1)) begin
                src_ip_reg_V <= trunc_ln321_fu_331_p1;
            end else if ((ret_V_1_fu_261_p2 == 1'd0)) begin
                src_ip_reg_V <= 32'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_port_reg_V <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((ret_V_1_fu_261_p2 == 1'd1)) begin
                src_port_reg_V <= {{action[47:32]}};
            end else if ((ret_V_1_fu_261_p2 == 1'd0)) begin
                src_port_reg_V <= 16'd0;
            end
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((ret_V_1_fu_261_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_phi_fu_211_p4 = {{action[63:48]}};
        end else if ((ret_V_1_fu_261_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_phi_fu_211_p4 = 16'd0;
        end else begin
            ap_phi_mux_storemerge_phi_fu_211_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_phi_fu_211_p4 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign action_re_V = (payload_in_valid_V & and_ln1355_fu_380_p2);

assign and_ln1355_fu_380_p2 = (payload_in_last_V & lhs_V_fu_374_p2);

assign and_ln68_fu_289_p2 = (ret_V_fu_267_p2 & payload_in_last_V);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign dst_port_V = dst_port_reg_V;

assign lhs_V_fu_374_p2 = (1'd1 ^ action_empty_V);

assign payload_out_data_V = payload_out_reg_data;

assign payload_out_keep_V = payload_out_reg_keep;

assign payload_out_last_V = payload_out_reg_last;

assign payload_out_valid_V = payload_out_reg_vali;

assign payload_ready_V = action_valid_V;

assign ret_V_1_fu_261_p2 = (rhs_V_fu_253_p3 & action_valid_V);

assign ret_V_fu_267_p2 = (ret_V_1_fu_261_p2 & payload_in_valid_V);

assign rhs_V_fu_253_p3 = action[32'd64];

assign select_ln68_1_fu_281_p3 = ((ret_V_fu_267_p2[0:0] === 1'b1) ? payload_in_keep_V : 64'd0);

assign select_ln68_fu_273_p3 = ((ret_V_fu_267_p2[0:0] === 1'b1) ? payload_in_data_V : 512'd0);

assign src_ip_V = src_ip_reg_V;

assign src_port_V = src_port_reg_V;

assign trunc_ln321_fu_331_p1 = action[31:0];

endmodule //action_excecutor
