-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity arp_receive is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    myIP_V : IN STD_LOGIC_VECTOR (31 downto 0);
    arp_in_data_V : IN STD_LOGIC_VECTOR (335 downto 0);
    arp_in_valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    arp_internal_resp_Mac_IP_V : IN STD_LOGIC_VECTOR (79 downto 0);
    arp_internal_resp_valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    call_for_responce_Mac_IP_V : OUT STD_LOGIC_VECTOR (79 downto 0);
    call_for_responce_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    arptable_dataout_Mac_IP_V : OUT STD_LOGIC_VECTOR (79 downto 0);
    arptable_dataout_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    arptable_addrout_V : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of arp_receive is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "arp_receive,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.387950,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=557,HLS_SYN_LUT=276,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv80_0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv48_108000604 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100001000000000000000011000000100";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal call_for_responce_re_1 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal call_for_responce_re : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal arptable_dataout_reg_1 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal arptable_dataout_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal arptable_addrout_reg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal arp_in_reg_valid_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal arp_in_reg_fixed_hea : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal arp_in_reg_dst_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal myIPReg_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal arp_in_reg_opcode_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal arp_in_reg_dst_mac_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal arp_in_reg_src_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal arp_internal_resp_va : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal arp_in_reg_src_mac_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal eth_src_mac_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal arp_internal_resp_re : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_phi_mux_lhs_V_phi_fu_194_p8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal arp_in_reg_valid_V_l_load_fu_238_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_425_p3 : STD_LOGIC_VECTOR (79 downto 0);
    signal icmp_ln879_5_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_6_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_load_fu_315_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_397_p3 : STD_LOGIC_VECTOR (79 downto 0);
    signal and_ln79_1_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_7_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_439_p3 : STD_LOGIC_VECTOR (79 downto 0);
    signal ret_V_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_fu_345_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_2_fu_411_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_1_fu_453_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln647_3_fu_577_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal arp_internal_resp_va_read_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_4_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_9_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln79_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_8_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_103 : BOOLEAN;
    signal ap_condition_77 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    arp_in_reg_dst_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_in_reg_dst_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arp_in_reg_dst_ip_V <= trunc_ln647_3_fu_577_p1;
                end if; 
            end if;
        end if;
    end process;


    arp_in_reg_dst_mac_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_in_reg_dst_mac_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arp_in_reg_dst_mac_V <= arp_in_data_V(79 downto 32);
                end if; 
            end if;
        end if;
    end process;


    arp_in_reg_fixed_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_in_reg_fixed_hea <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arp_in_reg_fixed_hea <= arp_in_data_V(223 downto 176);
                end if; 
            end if;
        end if;
    end process;


    arp_in_reg_opcode_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_in_reg_opcode_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arp_in_reg_opcode_V <= arp_in_data_V(175 downto 160);
                end if; 
            end if;
        end if;
    end process;


    arp_in_reg_src_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_in_reg_src_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arp_in_reg_src_ip_V <= arp_in_data_V(111 downto 80);
                end if; 
            end if;
        end if;
    end process;


    arp_in_reg_src_mac_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_in_reg_src_mac_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arp_in_reg_src_mac_V <= arp_in_data_V(159 downto 112);
                end if; 
            end if;
        end if;
    end process;


    arp_in_reg_valid_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_in_reg_valid_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arp_in_reg_valid_V <= arp_in_valid_V;
                end if; 
            end if;
        end if;
    end process;


    arp_internal_resp_re_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_internal_resp_re <= ap_const_lv80_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arp_internal_resp_re <= arp_internal_resp_Mac_IP_V;
                end if; 
            end if;
        end if;
    end process;


    arp_internal_resp_va_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_internal_resp_va <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((arp_internal_resp_va_read_fu_126_p2 = ap_const_lv1_1)) then 
                        arp_internal_resp_va <= ap_const_lv1_1;
                    elsif (((arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_0) and (arp_internal_resp_va_read_fu_126_p2 = ap_const_lv1_0))) then 
                        arp_internal_resp_va <= ap_const_lv1_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    arptable_addrout_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arptable_addrout_reg <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ap_const_boolean_1 = ap_condition_77)) then 
                        arptable_addrout_reg <= trunc_ln647_1_fu_453_p1;
                    elsif ((ap_const_boolean_1 = ap_condition_103)) then 
                        arptable_addrout_reg <= trunc_ln647_2_fu_411_p1;
                    elsif (((rhs_V_load_fu_315_p1 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_0))) then 
                        arptable_addrout_reg <= trunc_ln647_fu_345_p1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    arptable_dataout_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arptable_dataout_reg <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arptable_dataout_reg <= ret_V_fu_319_p2;
                end if; 
            end if;
        end if;
    end process;


    arptable_dataout_reg_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arptable_dataout_reg_1 <= ap_const_lv80_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ap_const_boolean_1 = ap_condition_77)) then 
                        arptable_dataout_reg_1 <= p_Result_1_fu_439_p3;
                    elsif ((ap_const_boolean_1 = ap_condition_103)) then 
                        arptable_dataout_reg_1 <= p_Result_2_fu_397_p3;
                    elsif (((rhs_V_load_fu_315_p1 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_0))) then 
                        arptable_dataout_reg_1 <= arp_internal_resp_re;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    call_for_responce_re_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                call_for_responce_re <= ap_const_lv1_0;
            else
                if (((icmp_ln879_1_fu_278_p2 = ap_const_lv1_1) and (icmp_ln879_fu_272_p2 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    call_for_responce_re <= icmp_ln879_2_fu_266_p2;
                elsif ((((arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln879_fu_272_p2 = ap_const_lv1_0)) or ((icmp_ln879_fu_272_p2 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln879_1_fu_278_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_0)))) then 
                    call_for_responce_re <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    call_for_responce_re_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                call_for_responce_re_1 <= ap_const_lv80_0;
            else
                if (((icmp_ln879_2_fu_266_p2 = ap_const_lv1_1) and (icmp_ln879_6_fu_361_p2 = ap_const_lv1_1) and (icmp_ln879_5_fu_355_p2 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    call_for_responce_re_1 <= p_Result_s_fu_425_p3;
                end if; 
            end if;
        end if;
    end process;


    eth_src_mac_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                eth_src_mac_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    eth_src_mac_V <= arp_in_data_V(287 downto 240);
                end if; 
            end if;
        end if;
    end process;


    myIPReg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                myIPReg_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    myIPReg_V <= myIP_V;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln72_1_fu_302_p2 <= (icmp_ln879_3_fu_284_p2 and and_ln72_fu_296_p2);
    and_ln72_fu_296_p2 <= (icmp_ln879_4_fu_290_p2 and icmp_ln879_2_fu_266_p2);
    and_ln79_1_fu_391_p2 <= (icmp_ln879_8_fu_373_p2 and and_ln79_fu_385_p2);
    and_ln79_fu_385_p2 <= (icmp_ln879_9_fu_379_p2 and icmp_ln879_2_fu_266_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_condition_103_assign_proc : process(arp_in_reg_valid_V_l_load_fu_238_p1, icmp_ln879_5_fu_355_p2, icmp_ln879_6_fu_361_p2, icmp_ln879_2_fu_266_p2, and_ln79_1_fu_391_p2, icmp_ln879_7_fu_367_p2)
    begin
                ap_condition_103 <= ((((ap_const_lv1_1 = and_ln79_1_fu_391_p2) and (icmp_ln879_5_fu_355_p2 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1) and (icmp_ln879_2_fu_266_p2 = ap_const_lv1_0)) or ((icmp_ln879_7_fu_367_p2 = ap_const_lv1_1) and (icmp_ln879_6_fu_361_p2 = ap_const_lv1_1) and (icmp_ln879_5_fu_355_p2 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1) and (icmp_ln879_2_fu_266_p2 = ap_const_lv1_0))) or ((ap_const_lv1_1 = and_ln79_1_fu_391_p2) and (icmp_ln879_5_fu_355_p2 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1) and (icmp_ln879_6_fu_361_p2 = ap_const_lv1_0)));
    end process;


    ap_condition_77_assign_proc : process(arp_in_reg_valid_V_l_load_fu_238_p1, icmp_ln879_5_fu_355_p2, icmp_ln879_6_fu_361_p2, icmp_ln879_2_fu_266_p2)
    begin
                ap_condition_77 <= ((icmp_ln879_2_fu_266_p2 = ap_const_lv1_1) and (icmp_ln879_6_fu_361_p2 = ap_const_lv1_1) and (icmp_ln879_5_fu_355_p2 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1));
    end process;


    ap_phi_mux_lhs_V_phi_fu_194_p8_assign_proc : process(ap_CS_fsm_state1, arp_in_reg_valid_V_l_load_fu_238_p1, icmp_ln879_fu_272_p2, icmp_ln879_1_fu_278_p2, and_ln72_1_fu_302_p2)
    begin
        if (((icmp_ln879_fu_272_p2 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln879_1_fu_278_p2 = ap_const_lv1_0))) then 
            ap_phi_mux_lhs_V_phi_fu_194_p8 <= and_ln72_1_fu_302_p2;
        elsif (((icmp_ln879_1_fu_278_p2 = ap_const_lv1_1) and (icmp_ln879_fu_272_p2 = ap_const_lv1_1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_lhs_V_phi_fu_194_p8 <= ap_const_lv1_1;
        elsif ((((arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln879_fu_272_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (arp_in_reg_valid_V_l_load_fu_238_p1 = ap_const_lv1_0)))) then 
            ap_phi_mux_lhs_V_phi_fu_194_p8 <= ap_const_lv1_0;
        else 
            ap_phi_mux_lhs_V_phi_fu_194_p8 <= "X";
        end if; 
    end process;

    arp_in_reg_valid_V_l_load_fu_238_p1 <= arp_in_reg_valid_V;
    arp_internal_resp_va_read_fu_126_p2 <= arp_internal_resp_valid_V;
    arptable_addrout_V <= arptable_addrout_reg;
    arptable_dataout_Mac_IP_V <= arptable_dataout_reg_1;
    arptable_dataout_valid_V <= arptable_dataout_reg;
    call_for_responce_Mac_IP_V <= call_for_responce_re_1;
    call_for_responce_valid_V <= call_for_responce_re;
    icmp_ln879_1_fu_278_p2 <= "1" when (arp_in_reg_dst_ip_V = myIPReg_V) else "0";
    icmp_ln879_2_fu_266_p2 <= "1" when (arp_in_reg_opcode_V = ap_const_lv16_1) else "0";
    icmp_ln879_3_fu_284_p2 <= "1" when (arp_in_reg_dst_mac_V = ap_const_lv48_FFFFFFFFFFFF) else "0";
    icmp_ln879_4_fu_290_p2 <= "1" when (arp_in_reg_src_ip_V = arp_in_reg_dst_ip_V) else "0";
    icmp_ln879_5_fu_355_p2 <= "1" when (arp_in_reg_fixed_hea = ap_const_lv48_108000604) else "0";
    icmp_ln879_6_fu_361_p2 <= "1" when (arp_in_reg_dst_ip_V = myIPReg_V) else "0";
    icmp_ln879_7_fu_367_p2 <= "1" when (arp_in_reg_opcode_V = ap_const_lv16_2) else "0";
    icmp_ln879_8_fu_373_p2 <= "1" when (arp_in_reg_dst_mac_V = ap_const_lv48_FFFFFFFFFFFF) else "0";
    icmp_ln879_9_fu_379_p2 <= "1" when (arp_in_reg_src_ip_V = arp_in_reg_dst_ip_V) else "0";
    icmp_ln879_fu_272_p2 <= "1" when (arp_in_reg_fixed_hea = ap_const_lv48_108000604) else "0";
    p_Result_1_fu_439_p3 <= (arp_in_reg_src_mac_V & arp_in_reg_src_ip_V);
    p_Result_2_fu_397_p3 <= (arp_in_reg_src_mac_V & arp_in_reg_src_ip_V);
    p_Result_s_fu_425_p3 <= (eth_src_mac_V & arp_in_reg_src_ip_V);
    ret_V_fu_319_p2 <= (arp_internal_resp_va or ap_phi_mux_lhs_V_phi_fu_194_p8);
    rhs_V_load_fu_315_p1 <= arp_internal_resp_va;
    trunc_ln647_1_fu_453_p1 <= arp_in_reg_src_ip_V(8 - 1 downto 0);
    trunc_ln647_2_fu_411_p1 <= arp_in_reg_src_ip_V(8 - 1 downto 0);
    trunc_ln647_3_fu_577_p1 <= arp_in_data_V(32 - 1 downto 0);
    trunc_ln647_fu_345_p1 <= arp_internal_resp_re(8 - 1 downto 0);
end behav;
