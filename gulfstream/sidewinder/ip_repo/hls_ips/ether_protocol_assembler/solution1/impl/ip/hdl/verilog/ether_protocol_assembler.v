// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ether_protocol_assembler,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.575750,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=581,HLS_SYN_LUT=1196,HLS_VERSION=2019_1}" *)

module ether_protocol_assembler (
        ap_clk,
        ap_rst,
        eth_arp_in_data_V,
        eth_arp_in_keep_V,
        eth_arp_in_valid_V,
        eth_arp_in_last_V,
        arp_ready_V,
        eth_ip_in_data_V,
        eth_ip_in_keep_V,
        eth_ip_in_valid_V,
        eth_ip_in_last_V,
        ip_ready_V,
        eth_out_data_V,
        eth_out_keep_V,
        eth_out_valid_V,
        eth_out_last_V,
        eth_out_ready_V
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [511:0] eth_arp_in_data_V;
input  [63:0] eth_arp_in_keep_V;
input  [0:0] eth_arp_in_valid_V;
input  [0:0] eth_arp_in_last_V;
output  [0:0] arp_ready_V;
input  [511:0] eth_ip_in_data_V;
input  [63:0] eth_ip_in_keep_V;
input  [0:0] eth_ip_in_valid_V;
input  [0:0] eth_ip_in_last_V;
output  [0:0] ip_ready_V;
output  [511:0] eth_out_data_V;
output  [63:0] eth_out_keep_V;
output  [0:0] eth_out_valid_V;
output  [0:0] eth_out_last_V;
input  [0:0] eth_out_ready_V;

reg   [511:0] eth_out_reg_data_V;
reg   [63:0] eth_out_reg_keep_V;
reg   [0:0] eth_out_reg_valid_V;
reg   [0:0] eth_out_reg_last_V;
reg   [0:0] arbiter_V;
reg   [0:0] output_sw_reg_V;
reg   [0:0] ap_phi_mux_lhs_V_3_phi_fu_177_p8;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] ret_V_fu_253_p2;
wire   [0:0] and_ln69_fu_265_p2;
wire   [0:0] or_ln73_fu_277_p2;
wire   [511:0] eth_ip_in_data_V_eth_fu_313_p3;
wire   [0:0] eth_out_ready_V_read_read_fu_78_p2;
wire   [63:0] eth_ip_in_keep_V_eth_fu_321_p3;
wire   [0:0] eth_ip_in_valid_V_et_fu_329_p3;
wire   [0:0] eth_ip_in_last_V_eth_fu_337_p3;
wire   [0:0] xor_ln80_fu_295_p2;
wire   [0:0] ret_V_5_fu_243_p2;
wire   [0:0] xor_ln73_fu_271_p2;
wire   [0:0] ret_V_2_fu_289_p2;
wire   [0:0] lhs_V_2_fu_369_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 eth_out_reg_data_V = 512'd0;
#0 eth_out_reg_keep_V = 64'd0;
#0 eth_out_reg_valid_V = 1'd0;
#0 eth_out_reg_last_V = 1'd0;
#0 arbiter_V = 1'd1;
#0 output_sw_reg_V = 1'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        arbiter_V <= 1'd1;
    end else begin
        if (((or_ln73_fu_277_p2 == 1'd1) & (ret_V_fu_253_p2 == 1'd1) & (1'd0 == and_ln69_fu_265_p2) & (1'b1 == ap_CS_fsm_state1))) begin
            arbiter_V <= xor_ln80_fu_295_p2;
        end else if ((((ret_V_fu_253_p2 == 1'd1) & (or_ln73_fu_277_p2 == 1'd0) & (1'd0 == and_ln69_fu_265_p2) & (1'b1 == ap_CS_fsm_state1)) | ((1'd1 == and_ln69_fu_265_p2) & (ret_V_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
            arbiter_V <= 1'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        eth_out_reg_data_V <= 512'd0;
    end else begin
        if (((eth_out_ready_V_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            eth_out_reg_data_V <= eth_ip_in_data_V_eth_fu_313_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        eth_out_reg_keep_V <= 64'd0;
    end else begin
        if (((eth_out_ready_V_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            eth_out_reg_keep_V <= eth_ip_in_keep_V_eth_fu_321_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        eth_out_reg_last_V <= 1'd0;
    end else begin
        if (((eth_out_ready_V_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            eth_out_reg_last_V <= eth_ip_in_last_V_eth_fu_337_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        eth_out_reg_valid_V <= 1'd0;
    end else begin
        if (((eth_out_ready_V_read_read_fu_78_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            eth_out_reg_valid_V <= eth_ip_in_valid_V_et_fu_329_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        output_sw_reg_V <= 1'd0;
    end else begin
        if (((ret_V_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            if ((1'd1 == and_ln69_fu_265_p2)) begin
                output_sw_reg_V <= 1'd0;
            end else if (((or_ln73_fu_277_p2 == 1'd0) & (1'd0 == and_ln69_fu_265_p2))) begin
                output_sw_reg_V <= 1'd1;
            end
        end
    end
end

always @ (*) begin
    if ((((ret_V_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((or_ln73_fu_277_p2 == 1'd1) & (ret_V_fu_253_p2 == 1'd1) & (1'd0 == and_ln69_fu_265_p2) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_lhs_V_3_phi_fu_177_p8 = output_sw_reg_V;
    end else if (((ret_V_fu_253_p2 == 1'd1) & (or_ln73_fu_277_p2 == 1'd0) & (1'd0 == and_ln69_fu_265_p2) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_3_phi_fu_177_p8 = 1'd1;
    end else if (((1'd1 == and_ln69_fu_265_p2) & (ret_V_fu_253_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_lhs_V_3_phi_fu_177_p8 = 1'd0;
    end else begin
        ap_phi_mux_lhs_V_3_phi_fu_177_p8 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln69_fu_265_p2 = (output_sw_reg_V & eth_arp_in_valid_V);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign arp_ready_V = (lhs_V_2_fu_369_p2 & eth_out_ready_V);

assign eth_ip_in_data_V_eth_fu_313_p3 = ((ap_phi_mux_lhs_V_3_phi_fu_177_p8[0:0] === 1'b1) ? eth_ip_in_data_V : eth_arp_in_data_V);

assign eth_ip_in_keep_V_eth_fu_321_p3 = ((ap_phi_mux_lhs_V_3_phi_fu_177_p8[0:0] === 1'b1) ? eth_ip_in_keep_V : eth_arp_in_keep_V);

assign eth_ip_in_last_V_eth_fu_337_p3 = ((ap_phi_mux_lhs_V_3_phi_fu_177_p8[0:0] === 1'b1) ? eth_ip_in_last_V : eth_arp_in_last_V);

assign eth_ip_in_valid_V_et_fu_329_p3 = ((ap_phi_mux_lhs_V_3_phi_fu_177_p8[0:0] === 1'b1) ? eth_ip_in_valid_V : eth_arp_in_valid_V);

assign eth_out_data_V = ((eth_out_ready_V[0:0] === 1'b1) ? eth_out_reg_data_V : 512'd0);

assign eth_out_keep_V = ((eth_out_ready_V[0:0] === 1'b1) ? eth_out_reg_keep_V : 64'd0);

assign eth_out_last_V = (eth_out_reg_last_V & eth_out_ready_V);

assign eth_out_ready_V_read_read_fu_78_p2 = eth_out_ready_V;

assign eth_out_valid_V = (eth_out_reg_valid_V & eth_out_ready_V);

assign ip_ready_V = (eth_out_ready_V & ap_phi_mux_lhs_V_3_phi_fu_177_p8);

assign lhs_V_2_fu_369_p2 = (ap_phi_mux_lhs_V_3_phi_fu_177_p8 ^ 1'd1);

assign or_ln73_fu_277_p2 = (xor_ln73_fu_271_p2 | output_sw_reg_V);

assign ret_V_2_fu_289_p2 = (eth_ip_in_valid_V | eth_arp_in_valid_V);

assign ret_V_5_fu_243_p2 = (eth_out_reg_valid_V & eth_out_reg_last_V);

assign ret_V_fu_253_p2 = (ret_V_5_fu_243_p2 | arbiter_V);

assign xor_ln73_fu_271_p2 = (eth_ip_in_valid_V ^ 1'd1);

assign xor_ln80_fu_295_p2 = (ret_V_2_fu_289_p2 ^ 1'd1);

endmodule //ether_protocol_assembler
