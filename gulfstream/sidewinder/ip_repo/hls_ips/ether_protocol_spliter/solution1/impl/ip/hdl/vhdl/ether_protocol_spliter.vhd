-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ether_protocol_spliter is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    myMacAddr_V : IN STD_LOGIC_VECTOR (47 downto 0);
    s_axis_data_V : IN STD_LOGIC_VECTOR (511 downto 0);
    s_axis_keep_V : IN STD_LOGIC_VECTOR (63 downto 0);
    s_axis_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    arp_data_V : OUT STD_LOGIC_VECTOR (335 downto 0);
    arp_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    ip_data_V : OUT STD_LOGIC_VECTOR (335 downto 0);
    ip_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    payload_data_V : OUT STD_LOGIC_VECTOR (511 downto 0);
    payload_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    payload_last_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    payload_len_data_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    payload_len_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of ether_protocol_spliter is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ether_protocol_spliter,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.350750,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1833,HLS_SYN_LUT=1348,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv336_lc_1 : STD_LOGIC_VECTOR (335 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_1D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010000";
    constant ap_const_lv32_190 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv16_800 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";
    constant ap_const_lv16_806 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_170 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv16_FFE4 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111100100";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_14F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101001111";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal arp_output_reg_data_s : STD_LOGIC_VECTOR (335 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal arp_output_reg_valid : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ip_output_reg_data_V : STD_LOGIC_VECTOR (335 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ip_output_reg_valid_s : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal payload_output_reg_d : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal payload_output_reg_v : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal payload_output_reg_l : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal payload_len_reg_data : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal payload_len_reg_vali : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal axis_input_reg_valid : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal axis_input_reg_data_s : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal myMacAddr_reg_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal in_ip_packet_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal axis_input_reg_last_s : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal axis_input_reg_keep_s : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_phi_mux_val_assign_1_phi_fu_232_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal lhs_V_3_load_fu_330_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln63_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln63_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_4_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_10_fu_648_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_p_Val2_3_phi_fu_256_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ret_V_10_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_storemerge1171_phi_fu_265_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_8_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln70_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln73_1_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_4_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln1355_1_fu_727_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal or_ln1355_1_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln214_fu_602_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln879_3_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln96_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln96_1_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_353_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_1_fu_369_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln879_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln761_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_440_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal p_Result_6_fu_456_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln879_5_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln761_1_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln64_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln879_2_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_14_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_516_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1355_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_15_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_16_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_592_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln879_6_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln647_fu_644_p1 : STD_LOGIC_VECTOR (175 downto 0);
    signal rhs_V_fu_661_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_673_p4 : STD_LOGIC_VECTOR (335 downto 0);
    signal or_ln1355_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_6_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_683_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_3_fu_695_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln1355_fu_719_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal ret_V_18_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_4_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_3_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_17_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln96_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_158 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    arp_output_reg_data_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_output_reg_data_s <= ap_const_lv336_lc_1;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (((or_ln73_fu_620_p2 = ap_const_lv1_1) and (ret_V_4_fu_568_p2 = ap_const_lv1_1) and (lhs_V_3_load_fu_330_p1 = ap_const_lv1_1) and (or_ln73_1_fu_632_p2 = ap_const_lv1_0) and (icmp_ln879_4_fu_450_p2 = ap_const_lv1_0)) or ((or_ln73_fu_620_p2 = ap_const_lv1_1) and (or_ln70_fu_580_p2 = ap_const_lv1_1) and (ret_V_4_fu_568_p2 = ap_const_lv1_1) and (lhs_V_3_load_fu_330_p1 = ap_const_lv1_1) and (or_ln73_1_fu_632_p2 = ap_const_lv1_0))))) then 
                    arp_output_reg_data_s <= axis_input_reg_data_s(511 downto 176);
                end if; 
            end if;
        end if;
    end process;


    arp_output_reg_valid_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_output_reg_valid <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arp_output_reg_valid <= ap_phi_mux_val_assign_1_phi_fu_232_p6;
                end if; 
            end if;
        end if;
    end process;


    axis_input_reg_data_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_input_reg_data_s <= ap_const_lv512_lc_1;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    axis_input_reg_data_s <= s_axis_data_V;
                end if; 
            end if;
        end if;
    end process;


    axis_input_reg_keep_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_input_reg_keep_s <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    axis_input_reg_keep_s <= s_axis_keep_V;
                end if; 
            end if;
        end if;
    end process;


    axis_input_reg_last_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_input_reg_last_s <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    axis_input_reg_last_s <= s_axis_last_V;
                end if; 
            end if;
        end if;
    end process;


    axis_input_reg_valid_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axis_input_reg_valid <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    axis_input_reg_valid <= s_axis_valid_V;
                end if; 
            end if;
        end if;
    end process;


    in_ip_packet_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                in_ip_packet_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ap_const_boolean_1 = ap_condition_158)) then 
                        in_ip_packet_V <= ap_const_lv1_0;
                    elsif (((ap_const_lv1_1 = and_ln96_fu_784_p2) and (or_ln96_1_fu_802_p2 = ap_const_lv1_0))) then 
                        in_ip_packet_V <= ap_const_lv1_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ip_output_reg_data_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_output_reg_data_V <= ap_const_lv336_lc_1;
            else
                if (((ret_V_4_fu_568_p2 = ap_const_lv1_1) and (icmp_ln879_4_fu_450_p2 = ap_const_lv1_1) and (lhs_V_3_load_fu_330_p1 = ap_const_lv1_1) and (or_ln70_fu_580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ip_output_reg_data_V <= axis_input_reg_data_s(511 downto 176);
                end if; 
            end if;
        end if;
    end process;


    ip_output_reg_valid_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_output_reg_valid_s <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((lhs_V_3_load_fu_330_p1 = ap_const_lv1_1)) then 
                        ip_output_reg_valid_s <= and_ln879_1_fu_397_p2;
                    elsif ((lhs_V_3_load_fu_330_p1 = ap_const_lv1_0)) then 
                        ip_output_reg_valid_s <= ap_const_lv1_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    myMacAddr_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                myMacAddr_reg_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    myMacAddr_reg_V <= myMacAddr_V;
                end if; 
            end if;
        end if;
    end process;


    payload_len_reg_data_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_len_reg_data <= ap_const_lv16_0;
            else
                if (((ret_V_4_fu_568_p2 = ap_const_lv1_1) and (icmp_ln879_4_fu_450_p2 = ap_const_lv1_1) and (lhs_V_3_load_fu_330_p1 = ap_const_lv1_1) and (or_ln70_fu_580_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    payload_len_reg_data <= add_ln214_fu_602_p2;
                end if; 
            end if;
        end if;
    end process;


    payload_len_reg_vali_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_len_reg_vali <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    payload_len_reg_vali <= and_ln879_3_fu_490_p2;
                end if; 
            end if;
        end if;
    end process;


    payload_output_reg_d_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_output_reg_d <= ap_const_lv512_lc_1;
            else
                if (((ret_V_4_fu_568_p2 = ap_const_lv1_1) and (or_ln1355_1_fu_713_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    payload_output_reg_d <= select_ln1355_1_fu_727_p3;
                end if; 
            end if;
        end if;
    end process;


    payload_output_reg_l_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_output_reg_l <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    payload_output_reg_l <= ret_V_fu_556_p2;
                end if; 
            end if;
        end if;
    end process;


    payload_output_reg_v_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_output_reg_v <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    payload_output_reg_v <= ap_phi_mux_storemerge1171_phi_fu_265_p6;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln214_fu_602_p2 <= std_logic_vector(unsigned(p_Result_4_fu_592_p4) + unsigned(ap_const_lv16_FFE4));
    and_ln1355_3_fu_747_p2 <= (icmp_ln879_4_fu_450_p2 and axis_input_reg_valid);
    and_ln1355_4_fu_753_p2 <= (ret_V_18_fu_741_p2 and and_ln64_fu_478_p2);
    and_ln1355_fu_544_p2 <= (xor_ln1355_fu_538_p2 and s_axis_last_V);
    and_ln63_fu_427_p2 <= (xor_ln761_fu_385_p2 and icmp_ln879_3_fu_421_p2);
    and_ln64_fu_478_p2 <= (xor_ln761_1_fu_472_p2 and icmp_ln879_5_fu_466_p2);
    and_ln879_1_fu_397_p2 <= (icmp_ln879_1_fu_379_p2 and and_ln879_fu_391_p2);
    and_ln879_2_fu_484_p2 <= (icmp_ln879_4_fu_450_p2 and and_ln64_fu_478_p2);
    and_ln879_3_fu_490_p2 <= (axis_input_reg_valid and and_ln879_2_fu_484_p2);
    and_ln879_fu_391_p2 <= (xor_ln761_fu_385_p2 and icmp_ln879_fu_363_p2);
    and_ln96_fu_784_p2 <= (icmp_ln879_4_fu_450_p2 and axis_input_reg_valid);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_condition_158_assign_proc : process(ret_V_fu_556_p2, and_ln96_fu_784_p2, or_ln96_1_fu_802_p2)
    begin
                ap_condition_158 <= (((ret_V_fu_556_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln96_fu_784_p2)) or ((or_ln96_1_fu_802_p2 = ap_const_lv1_1) and (ret_V_fu_556_p2 = ap_const_lv1_1)));
    end process;


    ap_phi_mux_p_Val2_3_phi_fu_256_p4_assign_proc : process(payload_output_reg_d, ap_CS_fsm_state1, lhs_V_3_load_fu_330_p1, ret_V_4_fu_568_p2, p_Result_s_10_fu_648_p5)
    begin
        if (((ret_V_4_fu_568_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((lhs_V_3_load_fu_330_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_p_Val2_3_phi_fu_256_p4 <= payload_output_reg_d;
            elsif ((lhs_V_3_load_fu_330_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_p_Val2_3_phi_fu_256_p4 <= p_Result_s_10_fu_648_p5;
            else 
                ap_phi_mux_p_Val2_3_phi_fu_256_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_Val2_3_phi_fu_256_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4_assign_proc : process(ap_CS_fsm_state1, lhs_V_3_load_fu_330_p1, ret_V_4_fu_568_p2)
    begin
        if (((ret_V_4_fu_568_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((lhs_V_3_load_fu_330_p1 = ap_const_lv1_0)) then 
                ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 <= ap_const_lv1_0;
            elsif ((lhs_V_3_load_fu_330_p1 = ap_const_lv1_1)) then 
                ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 <= ap_const_lv1_1;
            else 
                ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 <= "X";
            end if;
        else 
            ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 <= "X";
        end if; 
    end process;


    ap_phi_mux_storemerge1171_phi_fu_265_p6_assign_proc : process(ap_CS_fsm_state1, ret_V_4_fu_568_p2, ret_V_10_fu_771_p2, ret_V_8_fu_759_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if (((ret_V_8_fu_759_p2 = ap_const_lv1_1) and (ret_V_4_fu_568_p2 = ap_const_lv1_1))) then 
                ap_phi_mux_storemerge1171_phi_fu_265_p6 <= ap_const_lv1_1;
            elsif ((ret_V_4_fu_568_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge1171_phi_fu_265_p6 <= ap_const_lv1_0;
            elsif (((ret_V_4_fu_568_p2 = ap_const_lv1_1) and (ret_V_8_fu_759_p2 = ap_const_lv1_0))) then 
                ap_phi_mux_storemerge1171_phi_fu_265_p6 <= ret_V_10_fu_771_p2;
            else 
                ap_phi_mux_storemerge1171_phi_fu_265_p6 <= "X";
            end if;
        else 
            ap_phi_mux_storemerge1171_phi_fu_265_p6 <= "X";
        end if; 
    end process;


    ap_phi_mux_val_assign_1_phi_fu_232_p6_assign_proc : process(ap_CS_fsm_state1, lhs_V_3_load_fu_330_p1, or_ln63_fu_415_p2, and_ln63_fu_427_p2)
    begin
        if (((or_ln63_fu_415_p2 = ap_const_lv1_1) and (lhs_V_3_load_fu_330_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_val_assign_1_phi_fu_232_p6 <= and_ln63_fu_427_p2;
        elsif ((((lhs_V_3_load_fu_330_p1 = ap_const_lv1_1) and (or_ln63_fu_415_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((lhs_V_3_load_fu_330_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_val_assign_1_phi_fu_232_p6 <= ap_const_lv1_0;
        else 
            ap_phi_mux_val_assign_1_phi_fu_232_p6 <= "X";
        end if; 
    end process;

    arp_data_V <= arp_output_reg_data_s;
    arp_valid_V <= arp_output_reg_valid;
    icmp_ln70_fu_574_p2 <= "0" when (p_Result_6_fu_456_p4 = ap_const_lv16_800) else "1";
    icmp_ln73_fu_626_p2 <= "0" when (p_Result_6_fu_456_p4 = ap_const_lv16_806) else "1";
    icmp_ln879_1_fu_379_p2 <= "1" when (p_Result_1_fu_369_p4 = ap_const_lv16_800) else "0";
    icmp_ln879_2_fu_409_p2 <= "1" when (p_Result_s_fu_353_p4 = ap_const_lv48_FFFFFFFFFFFF) else "0";
    icmp_ln879_3_fu_421_p2 <= "1" when (p_Result_1_fu_369_p4 = ap_const_lv16_806) else "0";
    icmp_ln879_4_fu_450_p2 <= "1" when (p_Result_5_fu_440_p4 = myMacAddr_reg_V) else "0";
    icmp_ln879_5_fu_466_p2 <= "1" when (p_Result_6_fu_456_p4 = ap_const_lv16_800) else "0";
    icmp_ln879_6_fu_614_p2 <= "1" when (p_Result_5_fu_440_p4 = ap_const_lv48_FFFFFFFFFFFF) else "0";
    icmp_ln879_fu_363_p2 <= "1" when (p_Result_s_fu_353_p4 = myMacAddr_reg_V) else "0";
    icmp_ln96_fu_790_p2 <= "0" when (p_Result_6_fu_456_p4 = ap_const_lv16_800) else "1";
    ip_data_V <= ip_output_reg_data_V;
    ip_valid_V <= ip_output_reg_valid_s;
    lhs_V_3_load_fu_330_p1 <= axis_input_reg_valid;
    or_ln1355_1_fu_713_p2 <= (ret_V_6_fu_667_p2 or or_ln1355_fu_707_p2);
    or_ln1355_fu_707_p2 <= (ret_V_14_fu_506_p2 or ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4);
    or_ln63_fu_415_p2 <= (icmp_ln879_fu_363_p2 or icmp_ln879_2_fu_409_p2);
    or_ln70_fu_580_p2 <= (in_ip_packet_V or icmp_ln70_fu_574_p2);
    or_ln73_1_fu_632_p2 <= (in_ip_packet_V or icmp_ln73_fu_626_p2);
    or_ln73_fu_620_p2 <= (icmp_ln879_6_fu_614_p2 or icmp_ln879_4_fu_450_p2);
    or_ln96_1_fu_802_p2 <= (or_ln96_fu_796_p2 or axis_input_reg_last_s);
    or_ln96_fu_796_p2 <= (ret_V_16_fu_550_p2 or icmp_ln96_fu_790_p2);
    p_Result_1_fu_369_p4 <= axis_input_reg_data_s(415 downto 400);
    p_Result_2_fu_683_p5 <= (ap_phi_mux_p_Val2_3_phi_fu_256_p4(511 downto 336) & p_Result_8_fu_673_p4);
    p_Result_3_fu_695_p5 <= (ap_phi_mux_p_Val2_3_phi_fu_256_p4(511 downto 336) & ap_const_lv336_lc_1);
    p_Result_4_fu_592_p4 <= axis_input_reg_data_s(383 downto 368);
    p_Result_5_fu_440_p4 <= axis_input_reg_data_s(511 downto 464);
    p_Result_6_fu_456_p4 <= axis_input_reg_data_s(415 downto 400);
    p_Result_8_fu_673_p4 <= s_axis_data_V(511 downto 176);
    p_Result_s_10_fu_648_p5 <= (trunc_ln647_fu_644_p1 & payload_output_reg_d(335 downto 0));
    p_Result_s_fu_353_p4 <= axis_input_reg_data_s(511 downto 464);
    payload_data_V <= payload_output_reg_d;
    payload_last_V <= payload_output_reg_l;
    payload_len_data_V <= payload_len_reg_data;
    payload_len_valid_V <= payload_len_reg_vali;
    payload_valid_V <= payload_output_reg_v;
    ret_V_10_fu_771_p2 <= (ret_V_17_fu_765_p2 and in_ip_packet_V);
    ret_V_14_fu_506_p2 <= (axis_input_reg_valid and axis_input_reg_last_s);
    ret_V_15_fu_524_p2 <= (tmp_fu_516_p3 and ret_V_14_fu_506_p2);
    ret_V_16_fu_550_p2 <= (s_axis_valid_V and and_ln1355_fu_544_p2);
    ret_V_17_fu_765_p2 <= (s_axis_valid_V or ret_V_14_fu_506_p2);
    ret_V_18_fu_741_p2 <= (s_axis_valid_V or axis_input_reg_last_s);
    ret_V_4_fu_568_p2 <= (s_axis_valid_V or axis_input_reg_valid);
    ret_V_6_fu_667_p2 <= (s_axis_valid_V and rhs_V_fu_661_p2);
    ret_V_8_fu_759_p2 <= (and_ln1355_4_fu_753_p2 and and_ln1355_3_fu_747_p2);
    ret_V_fu_556_p2 <= (ret_V_16_fu_550_p2 or ret_V_15_fu_524_p2);
    rhs_V_fu_661_p2 <= (ret_V_14_fu_506_p2 xor ap_const_lv1_1);
    select_ln1355_1_fu_727_p3 <= 
        p_Result_3_fu_695_p5 when (ret_V_14_fu_506_p2(0) = '1') else 
        select_ln1355_fu_719_p3;
    select_ln1355_fu_719_p3 <= 
        p_Result_2_fu_683_p5 when (ret_V_6_fu_667_p2(0) = '1') else 
        ap_phi_mux_p_Val2_3_phi_fu_256_p4;
    tmp_1_fu_530_p3 <= s_axis_keep_V(21 downto 21);
    tmp_fu_516_p3 <= axis_input_reg_keep_s(21 downto 21);
    trunc_ln647_fu_644_p1 <= axis_input_reg_data_s(176 - 1 downto 0);
    xor_ln1355_fu_538_p2 <= (tmp_1_fu_530_p3 xor ap_const_lv1_1);
    xor_ln761_1_fu_472_p2 <= (in_ip_packet_V xor ap_const_lv1_1);
    xor_ln761_fu_385_p2 <= (in_ip_packet_V xor ap_const_lv1_1);
end behav;
