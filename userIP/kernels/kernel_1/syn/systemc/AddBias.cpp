// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AddBias.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AddBias::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AddBias::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> AddBias::ap_ST_fsm_state1 = "1";
const sc_lv<3> AddBias::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> AddBias::ap_ST_fsm_state5 = "100";
const sc_lv<32> AddBias::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool AddBias::ap_const_boolean_1 = true;
const sc_lv<32> AddBias::ap_const_lv32_1 = "1";
const bool AddBias::ap_const_boolean_0 = false;
const sc_lv<1> AddBias::ap_const_lv1_0 = "0";
const sc_lv<1> AddBias::ap_const_lv1_1 = "1";
const sc_lv<38> AddBias::ap_const_lv38_0 = "00000000000000000000000000000000000000";
const sc_lv<6> AddBias::ap_const_lv6_0 = "000000";
const sc_lv<8> AddBias::ap_const_lv8_1 = "1";
const sc_lv<8> AddBias::ap_const_lv8_28 = "101000";
const sc_lv<16> AddBias::ap_const_lv16_31 = "110001";
const sc_lv<4> AddBias::ap_const_lv4_0 = "0000";
const sc_lv<38> AddBias::ap_const_lv38_1 = "1";
const sc_lv<6> AddBias::ap_const_lv6_30 = "110000";
const sc_lv<32> AddBias::ap_const_lv32_20 = "100000";
const sc_lv<32> AddBias::ap_const_lv32_3F = "111111";
const sc_lv<32> AddBias::ap_const_lv32_40 = "1000000";
const sc_lv<32> AddBias::ap_const_lv32_5F = "1011111";
const sc_lv<32> AddBias::ap_const_lv32_60 = "1100000";
const sc_lv<32> AddBias::ap_const_lv32_7F = "1111111";
const sc_lv<32> AddBias::ap_const_lv32_80 = "10000000";
const sc_lv<32> AddBias::ap_const_lv32_9F = "10011111";
const sc_lv<32> AddBias::ap_const_lv32_A0 = "10100000";
const sc_lv<32> AddBias::ap_const_lv32_BF = "10111111";
const sc_lv<32> AddBias::ap_const_lv32_C0 = "11000000";
const sc_lv<32> AddBias::ap_const_lv32_DF = "11011111";
const sc_lv<32> AddBias::ap_const_lv32_E0 = "11100000";
const sc_lv<32> AddBias::ap_const_lv32_FF = "11111111";
const sc_lv<32> AddBias::ap_const_lv32_100 = "100000000";
const sc_lv<32> AddBias::ap_const_lv32_11F = "100011111";
const sc_lv<32> AddBias::ap_const_lv32_120 = "100100000";
const sc_lv<32> AddBias::ap_const_lv32_13F = "100111111";
const sc_lv<32> AddBias::ap_const_lv32_140 = "101000000";
const sc_lv<32> AddBias::ap_const_lv32_15F = "101011111";
const sc_lv<32> AddBias::ap_const_lv32_160 = "101100000";
const sc_lv<32> AddBias::ap_const_lv32_17F = "101111111";
const sc_lv<32> AddBias::ap_const_lv32_180 = "110000000";
const sc_lv<32> AddBias::ap_const_lv32_19F = "110011111";
const sc_lv<32> AddBias::ap_const_lv32_1A0 = "110100000";
const sc_lv<32> AddBias::ap_const_lv32_1BF = "110111111";
const sc_lv<32> AddBias::ap_const_lv32_1C0 = "111000000";
const sc_lv<32> AddBias::ap_const_lv32_1DF = "111011111";
const sc_lv<32> AddBias::ap_const_lv32_1E0 = "111100000";
const sc_lv<32> AddBias::ap_const_lv32_1FF = "111111111";
const sc_lv<6> AddBias::ap_const_lv6_1 = "1";
const sc_lv<6> AddBias::ap_const_lv6_2F = "101111";
const sc_lv<32> AddBias::ap_const_lv32_2 = "10";

AddBias::AddBias(sc_module_name name) : sc_module(name), mVcdFile(0) {
    bias_0_U = new AddBias_bias_0("bias_0_U");
    bias_0_U->clk(ap_clk);
    bias_0_U->reset(ap_rst);
    bias_0_U->address0(bias_0_address0);
    bias_0_U->ce0(bias_0_ce0);
    bias_0_U->q0(bias_0_q0);
    bias_1_U = new AddBias_bias_1("bias_1_U");
    bias_1_U->clk(ap_clk);
    bias_1_U->reset(ap_rst);
    bias_1_U->address0(bias_1_address0);
    bias_1_U->ce0(bias_1_ce0);
    bias_1_U->q0(bias_1_q0);
    bias_2_U = new AddBias_bias_2("bias_2_U");
    bias_2_U->clk(ap_clk);
    bias_2_U->reset(ap_rst);
    bias_2_U->address0(bias_2_address0);
    bias_2_U->ce0(bias_2_ce0);
    bias_2_U->q0(bias_2_q0);
    bias_3_U = new AddBias_bias_3("bias_3_U");
    bias_3_U->clk(ap_clk);
    bias_3_U->reset(ap_rst);
    bias_3_U->address0(bias_3_address0);
    bias_3_U->ce0(bias_3_ce0);
    bias_3_U->q0(bias_3_q0);
    bias_4_U = new AddBias_bias_4("bias_4_U");
    bias_4_U->clk(ap_clk);
    bias_4_U->reset(ap_rst);
    bias_4_U->address0(bias_4_address0);
    bias_4_U->ce0(bias_4_ce0);
    bias_4_U->q0(bias_4_q0);
    bias_5_U = new AddBias_bias_5("bias_5_U");
    bias_5_U->clk(ap_clk);
    bias_5_U->reset(ap_rst);
    bias_5_U->address0(bias_5_address0);
    bias_5_U->ce0(bias_5_ce0);
    bias_5_U->q0(bias_5_q0);
    bias_6_U = new AddBias_bias_6("bias_6_U");
    bias_6_U->clk(ap_clk);
    bias_6_U->reset(ap_rst);
    bias_6_U->address0(bias_6_address0);
    bias_6_U->ce0(bias_6_ce0);
    bias_6_U->q0(bias_6_q0);
    bias_7_U = new AddBias_bias_7("bias_7_U");
    bias_7_U->clk(ap_clk);
    bias_7_U->reset(ap_rst);
    bias_7_U->address0(bias_7_address0);
    bias_7_U->ce0(bias_7_ce0);
    bias_7_U->q0(bias_7_q0);
    bias_8_U = new AddBias_bias_8("bias_8_U");
    bias_8_U->clk(ap_clk);
    bias_8_U->reset(ap_rst);
    bias_8_U->address0(bias_8_address0);
    bias_8_U->ce0(bias_8_ce0);
    bias_8_U->q0(bias_8_q0);
    bias_9_U = new AddBias_bias_9("bias_9_U");
    bias_9_U->clk(ap_clk);
    bias_9_U->reset(ap_rst);
    bias_9_U->address0(bias_9_address0);
    bias_9_U->ce0(bias_9_ce0);
    bias_9_U->q0(bias_9_q0);
    bias_10_U = new AddBias_bias_10("bias_10_U");
    bias_10_U->clk(ap_clk);
    bias_10_U->reset(ap_rst);
    bias_10_U->address0(bias_10_address0);
    bias_10_U->ce0(bias_10_ce0);
    bias_10_U->q0(bias_10_q0);
    bias_11_U = new AddBias_bias_11("bias_11_U");
    bias_11_U->clk(ap_clk);
    bias_11_U->reset(ap_rst);
    bias_11_U->address0(bias_11_address0);
    bias_11_U->ce0(bias_11_ce0);
    bias_11_U->q0(bias_11_q0);
    bias_12_U = new AddBias_bias_12("bias_12_U");
    bias_12_U->clk(ap_clk);
    bias_12_U->reset(ap_rst);
    bias_12_U->address0(bias_12_address0);
    bias_12_U->ce0(bias_12_ce0);
    bias_12_U->q0(bias_12_q0);
    bias_13_U = new AddBias_bias_13("bias_13_U");
    bias_13_U->clk(ap_clk);
    bias_13_U->reset(ap_rst);
    bias_13_U->address0(bias_13_address0);
    bias_13_U->ce0(bias_13_ce0);
    bias_13_U->q0(bias_13_q0);
    bias_14_U = new AddBias_bias_14("bias_14_U");
    bias_14_U->clk(ap_clk);
    bias_14_U->reset(ap_rst);
    bias_14_U->address0(bias_14_address0);
    bias_14_U->ce0(bias_14_ce0);
    bias_14_U->q0(bias_14_q0);
    bias_15_U = new AddBias_bias_15("bias_15_U");
    bias_15_U->clk(ap_clk);
    bias_15_U->reset(ap_rst);
    bias_15_U->address0(bias_15_address0);
    bias_15_U->ce0(bias_15_ce0);
    bias_15_U->q0(bias_15_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_N_fu_572_p1);
    sensitive << ( in_V_data_V_dout );

    SC_METHOD(thread_add_ln215_10_fu_906_p2);
    sensitive << ( p_Result_s_reg_1118 );
    sensitive << ( sext_ln215_518_fu_902_p1 );

    SC_METHOD(thread_add_ln215_11_fu_915_p2);
    sensitive << ( p_Result_10_reg_1128 );
    sensitive << ( sext_ln215_519_fu_911_p1 );

    SC_METHOD(thread_add_ln215_12_fu_924_p2);
    sensitive << ( p_Result_11_reg_1138 );
    sensitive << ( sext_ln215_520_fu_920_p1 );

    SC_METHOD(thread_add_ln215_13_fu_933_p2);
    sensitive << ( p_Result_12_reg_1148 );
    sensitive << ( sext_ln215_521_fu_929_p1 );

    SC_METHOD(thread_add_ln215_14_fu_942_p2);
    sensitive << ( p_Result_13_reg_1158 );
    sensitive << ( sext_ln215_522_fu_938_p1 );

    SC_METHOD(thread_add_ln215_15_fu_951_p2);
    sensitive << ( p_Result_14_reg_1168 );
    sensitive << ( sext_ln215_523_fu_947_p1 );

    SC_METHOD(thread_add_ln215_1_fu_825_p2);
    sensitive << ( p_Result_1_reg_1028 );
    sensitive << ( sext_ln215_509_fu_821_p1 );

    SC_METHOD(thread_add_ln215_2_fu_834_p2);
    sensitive << ( p_Result_2_reg_1038 );
    sensitive << ( sext_ln215_510_fu_830_p1 );

    SC_METHOD(thread_add_ln215_3_fu_843_p2);
    sensitive << ( p_Result_3_reg_1048 );
    sensitive << ( sext_ln215_511_fu_839_p1 );

    SC_METHOD(thread_add_ln215_4_fu_852_p2);
    sensitive << ( p_Result_4_reg_1058 );
    sensitive << ( sext_ln215_512_fu_848_p1 );

    SC_METHOD(thread_add_ln215_5_fu_861_p2);
    sensitive << ( p_Result_5_reg_1068 );
    sensitive << ( sext_ln215_513_fu_857_p1 );

    SC_METHOD(thread_add_ln215_6_fu_870_p2);
    sensitive << ( p_Result_6_reg_1078 );
    sensitive << ( sext_ln215_514_fu_866_p1 );

    SC_METHOD(thread_add_ln215_7_fu_879_p2);
    sensitive << ( p_Result_7_reg_1088 );
    sensitive << ( sext_ln215_515_fu_875_p1 );

    SC_METHOD(thread_add_ln215_8_fu_888_p2);
    sensitive << ( p_Result_8_reg_1098 );
    sensitive << ( sext_ln215_516_fu_884_p1 );

    SC_METHOD(thread_add_ln215_9_fu_897_p2);
    sensitive << ( p_Result_9_reg_1108 );
    sensitive << ( sext_ln215_517_fu_893_p1 );

    SC_METHOD(thread_add_ln215_fu_816_p2);
    sensitive << ( trunc_ln647_reg_1018 );
    sensitive << ( sext_ln215_fu_812_p1 );

    SC_METHOD(thread_add_ln525_fu_612_p2);
    sensitive << ( indvar_flatten_reg_545 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln525_reg_1004 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op33 );
    sensitive << ( io_acc_block_signal_op138 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln525_reg_1004 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op33 );
    sensitive << ( io_acc_block_signal_op138 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln525_reg_1004 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op33 );
    sensitive << ( io_acc_block_signal_op138 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( icmp_ln525_reg_1004 );
    sensitive << ( io_acc_block_signal_op33 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op138 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln525_fu_607_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_i_0_phi_fu_560_p4);
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( i_0_reg_556 );
    sensitive << ( i_reg_1178 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_bias_0_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_0_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_10_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_10_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_11_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_11_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_12_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_12_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_13_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_13_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_14_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_14_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_15_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_15_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_1_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_1_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_2_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_2_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_3_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_3_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_4_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_4_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_5_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_5_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_6_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_6_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_7_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_7_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_8_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_8_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bias_9_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln533_fu_632_p1 );

    SC_METHOD(thread_bias_9_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bound_fu_601_p2);
    sensitive << ( p_shl_fu_581_p3 );
    sensitive << ( p_shl94_fu_597_p1 );

    SC_METHOD(thread_i_fu_806_p2);
    sensitive << ( select_ln527_fu_624_p3 );

    SC_METHOD(thread_icmp_ln525_fu_607_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_545 );
    sensitive << ( bound_reg_999 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln527_fu_618_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln525_reg_1004 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_0_phi_fu_560_p4 );

    SC_METHOD(thread_in_V_data_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln525_reg_1004 );

    SC_METHOD(thread_in_V_data_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln525_reg_1004 );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_dest_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_dest_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln525_reg_1004 );

    SC_METHOD(thread_in_V_dest_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln525_reg_1004 );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_id_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_id_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln525_reg_1004 );

    SC_METHOD(thread_in_V_id_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln525_reg_1004 );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_last_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_last_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln525_reg_1004 );

    SC_METHOD(thread_in_V_last_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln525_reg_1004 );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_user_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_user_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln525_reg_1004 );

    SC_METHOD(thread_in_V_user_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln525_reg_1004 );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_io_acc_block_signal_op138);
    sensitive << ( out_V_data_V_full_n );
    sensitive << ( out_V_id_V_full_n );
    sensitive << ( out_V_dest_V_full_n );
    sensitive << ( out_V_user_V_full_n );
    sensitive << ( out_V_last_V_full_n );

    SC_METHOD(thread_io_acc_block_signal_op16);
    sensitive << ( in_V_data_V_empty_n );
    sensitive << ( in_V_id_V_empty_n );
    sensitive << ( in_V_dest_V_empty_n );
    sensitive << ( in_V_user_V_empty_n );
    sensitive << ( in_V_last_V_empty_n );

    SC_METHOD(thread_io_acc_block_signal_op20);
    sensitive << ( out_V_data_V_full_n );
    sensitive << ( out_V_id_V_full_n );
    sensitive << ( out_V_dest_V_full_n );
    sensitive << ( out_V_user_V_full_n );
    sensitive << ( out_V_last_V_full_n );

    SC_METHOD(thread_io_acc_block_signal_op33);
    sensitive << ( in_V_data_V_empty_n );
    sensitive << ( in_V_id_V_empty_n );
    sensitive << ( in_V_dest_V_empty_n );
    sensitive << ( in_V_user_V_empty_n );
    sensitive << ( in_V_last_V_empty_n );

    SC_METHOD(thread_out_V_data_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_data_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );

    SC_METHOD(thread_out_V_data_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( out_data_data_V_fu_576_p1 );
    sensitive << ( tmp_data_V_9_fu_956_p17 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_data_V_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_dest_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_dest_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );

    SC_METHOD(thread_out_V_dest_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_dest_V_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_id_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_id_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );

    SC_METHOD(thread_out_V_id_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_id_V_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_last_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_last_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );

    SC_METHOD(thread_out_V_last_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( out_data_last_V_fu_993_p2 );

    SC_METHOD(thread_out_V_last_V_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_V_user_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_V_user_V_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );

    SC_METHOD(thread_out_V_user_V_din);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_out_V_user_V_write);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_data_data_V_fu_576_p1);
    sensitive << ( N_fu_572_p1 );

    SC_METHOD(thread_out_data_last_V_fu_993_p2);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln525_reg_1004_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( select_ln527_reg_1013 );

    SC_METHOD(thread_p_shl94_fu_597_p1);
    sensitive << ( tmp_1_fu_589_p3 );

    SC_METHOD(thread_p_shl_fu_581_p3);
    sensitive << ( N_fu_572_p1 );

    SC_METHOD(thread_select_ln527_fu_624_p3);
    sensitive << ( ap_phi_mux_i_0_phi_fu_560_p4 );
    sensitive << ( icmp_ln527_fu_618_p2 );

    SC_METHOD(thread_sext_ln215_509_fu_821_p1);
    sensitive << ( bias_1_q0 );

    SC_METHOD(thread_sext_ln215_510_fu_830_p1);
    sensitive << ( bias_2_q0 );

    SC_METHOD(thread_sext_ln215_511_fu_839_p1);
    sensitive << ( bias_3_q0 );

    SC_METHOD(thread_sext_ln215_512_fu_848_p1);
    sensitive << ( bias_4_q0 );

    SC_METHOD(thread_sext_ln215_513_fu_857_p1);
    sensitive << ( bias_5_q0 );

    SC_METHOD(thread_sext_ln215_514_fu_866_p1);
    sensitive << ( bias_6_q0 );

    SC_METHOD(thread_sext_ln215_515_fu_875_p1);
    sensitive << ( bias_7_q0 );

    SC_METHOD(thread_sext_ln215_516_fu_884_p1);
    sensitive << ( bias_8_q0 );

    SC_METHOD(thread_sext_ln215_517_fu_893_p1);
    sensitive << ( bias_9_q0 );

    SC_METHOD(thread_sext_ln215_518_fu_902_p1);
    sensitive << ( bias_10_q0 );

    SC_METHOD(thread_sext_ln215_519_fu_911_p1);
    sensitive << ( bias_11_q0 );

    SC_METHOD(thread_sext_ln215_520_fu_920_p1);
    sensitive << ( bias_12_q0 );

    SC_METHOD(thread_sext_ln215_521_fu_929_p1);
    sensitive << ( bias_13_q0 );

    SC_METHOD(thread_sext_ln215_522_fu_938_p1);
    sensitive << ( bias_14_q0 );

    SC_METHOD(thread_sext_ln215_523_fu_947_p1);
    sensitive << ( bias_15_q0 );

    SC_METHOD(thread_sext_ln215_fu_812_p1);
    sensitive << ( bias_0_q0 );

    SC_METHOD(thread_tmp_1_fu_589_p3);
    sensitive << ( N_fu_572_p1 );

    SC_METHOD(thread_tmp_data_V_9_fu_956_p17);
    sensitive << ( add_ln215_15_fu_951_p2 );
    sensitive << ( add_ln215_14_fu_942_p2 );
    sensitive << ( add_ln215_13_fu_933_p2 );
    sensitive << ( add_ln215_12_fu_924_p2 );
    sensitive << ( add_ln215_11_fu_915_p2 );
    sensitive << ( add_ln215_10_fu_906_p2 );
    sensitive << ( add_ln215_9_fu_897_p2 );
    sensitive << ( add_ln215_8_fu_888_p2 );
    sensitive << ( add_ln215_7_fu_879_p2 );
    sensitive << ( add_ln215_6_fu_870_p2 );
    sensitive << ( add_ln215_5_fu_861_p2 );
    sensitive << ( add_ln215_4_fu_852_p2 );
    sensitive << ( add_ln215_3_fu_843_p2 );
    sensitive << ( add_ln215_2_fu_834_p2 );
    sensitive << ( add_ln215_1_fu_825_p2 );
    sensitive << ( add_ln215_fu_816_p2 );

    SC_METHOD(thread_trunc_ln647_fu_652_p1);
    sensitive << ( in_V_data_V_dout );

    SC_METHOD(thread_zext_ln533_fu_632_p1);
    sensitive << ( select_ln527_fu_624_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( io_acc_block_signal_op16 );
    sensitive << ( io_acc_block_signal_op20 );
    sensitive << ( icmp_ln525_fu_607_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AddBias_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_data_V_dout, "(port)in_V_data_V_dout");
    sc_trace(mVcdFile, in_V_data_V_empty_n, "(port)in_V_data_V_empty_n");
    sc_trace(mVcdFile, in_V_data_V_read, "(port)in_V_data_V_read");
    sc_trace(mVcdFile, in_V_id_V_dout, "(port)in_V_id_V_dout");
    sc_trace(mVcdFile, in_V_id_V_empty_n, "(port)in_V_id_V_empty_n");
    sc_trace(mVcdFile, in_V_id_V_read, "(port)in_V_id_V_read");
    sc_trace(mVcdFile, in_V_dest_V_dout, "(port)in_V_dest_V_dout");
    sc_trace(mVcdFile, in_V_dest_V_empty_n, "(port)in_V_dest_V_empty_n");
    sc_trace(mVcdFile, in_V_dest_V_read, "(port)in_V_dest_V_read");
    sc_trace(mVcdFile, in_V_user_V_dout, "(port)in_V_user_V_dout");
    sc_trace(mVcdFile, in_V_user_V_empty_n, "(port)in_V_user_V_empty_n");
    sc_trace(mVcdFile, in_V_user_V_read, "(port)in_V_user_V_read");
    sc_trace(mVcdFile, in_V_last_V_dout, "(port)in_V_last_V_dout");
    sc_trace(mVcdFile, in_V_last_V_empty_n, "(port)in_V_last_V_empty_n");
    sc_trace(mVcdFile, in_V_last_V_read, "(port)in_V_last_V_read");
    sc_trace(mVcdFile, out_V_data_V_din, "(port)out_V_data_V_din");
    sc_trace(mVcdFile, out_V_data_V_full_n, "(port)out_V_data_V_full_n");
    sc_trace(mVcdFile, out_V_data_V_write, "(port)out_V_data_V_write");
    sc_trace(mVcdFile, out_V_id_V_din, "(port)out_V_id_V_din");
    sc_trace(mVcdFile, out_V_id_V_full_n, "(port)out_V_id_V_full_n");
    sc_trace(mVcdFile, out_V_id_V_write, "(port)out_V_id_V_write");
    sc_trace(mVcdFile, out_V_dest_V_din, "(port)out_V_dest_V_din");
    sc_trace(mVcdFile, out_V_dest_V_full_n, "(port)out_V_dest_V_full_n");
    sc_trace(mVcdFile, out_V_dest_V_write, "(port)out_V_dest_V_write");
    sc_trace(mVcdFile, out_V_user_V_din, "(port)out_V_user_V_din");
    sc_trace(mVcdFile, out_V_user_V_full_n, "(port)out_V_user_V_full_n");
    sc_trace(mVcdFile, out_V_user_V_write, "(port)out_V_user_V_write");
    sc_trace(mVcdFile, out_V_last_V_din, "(port)out_V_last_V_din");
    sc_trace(mVcdFile, out_V_last_V_full_n, "(port)out_V_last_V_full_n");
    sc_trace(mVcdFile, out_V_last_V_write, "(port)out_V_last_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, bias_0_address0, "bias_0_address0");
    sc_trace(mVcdFile, bias_0_ce0, "bias_0_ce0");
    sc_trace(mVcdFile, bias_0_q0, "bias_0_q0");
    sc_trace(mVcdFile, bias_1_address0, "bias_1_address0");
    sc_trace(mVcdFile, bias_1_ce0, "bias_1_ce0");
    sc_trace(mVcdFile, bias_1_q0, "bias_1_q0");
    sc_trace(mVcdFile, bias_2_address0, "bias_2_address0");
    sc_trace(mVcdFile, bias_2_ce0, "bias_2_ce0");
    sc_trace(mVcdFile, bias_2_q0, "bias_2_q0");
    sc_trace(mVcdFile, bias_3_address0, "bias_3_address0");
    sc_trace(mVcdFile, bias_3_ce0, "bias_3_ce0");
    sc_trace(mVcdFile, bias_3_q0, "bias_3_q0");
    sc_trace(mVcdFile, bias_4_address0, "bias_4_address0");
    sc_trace(mVcdFile, bias_4_ce0, "bias_4_ce0");
    sc_trace(mVcdFile, bias_4_q0, "bias_4_q0");
    sc_trace(mVcdFile, bias_5_address0, "bias_5_address0");
    sc_trace(mVcdFile, bias_5_ce0, "bias_5_ce0");
    sc_trace(mVcdFile, bias_5_q0, "bias_5_q0");
    sc_trace(mVcdFile, bias_6_address0, "bias_6_address0");
    sc_trace(mVcdFile, bias_6_ce0, "bias_6_ce0");
    sc_trace(mVcdFile, bias_6_q0, "bias_6_q0");
    sc_trace(mVcdFile, bias_7_address0, "bias_7_address0");
    sc_trace(mVcdFile, bias_7_ce0, "bias_7_ce0");
    sc_trace(mVcdFile, bias_7_q0, "bias_7_q0");
    sc_trace(mVcdFile, bias_8_address0, "bias_8_address0");
    sc_trace(mVcdFile, bias_8_ce0, "bias_8_ce0");
    sc_trace(mVcdFile, bias_8_q0, "bias_8_q0");
    sc_trace(mVcdFile, bias_9_address0, "bias_9_address0");
    sc_trace(mVcdFile, bias_9_ce0, "bias_9_ce0");
    sc_trace(mVcdFile, bias_9_q0, "bias_9_q0");
    sc_trace(mVcdFile, bias_10_address0, "bias_10_address0");
    sc_trace(mVcdFile, bias_10_ce0, "bias_10_ce0");
    sc_trace(mVcdFile, bias_10_q0, "bias_10_q0");
    sc_trace(mVcdFile, bias_11_address0, "bias_11_address0");
    sc_trace(mVcdFile, bias_11_ce0, "bias_11_ce0");
    sc_trace(mVcdFile, bias_11_q0, "bias_11_q0");
    sc_trace(mVcdFile, bias_12_address0, "bias_12_address0");
    sc_trace(mVcdFile, bias_12_ce0, "bias_12_ce0");
    sc_trace(mVcdFile, bias_12_q0, "bias_12_q0");
    sc_trace(mVcdFile, bias_13_address0, "bias_13_address0");
    sc_trace(mVcdFile, bias_13_ce0, "bias_13_ce0");
    sc_trace(mVcdFile, bias_13_q0, "bias_13_q0");
    sc_trace(mVcdFile, bias_14_address0, "bias_14_address0");
    sc_trace(mVcdFile, bias_14_ce0, "bias_14_ce0");
    sc_trace(mVcdFile, bias_14_q0, "bias_14_q0");
    sc_trace(mVcdFile, bias_15_address0, "bias_15_address0");
    sc_trace(mVcdFile, bias_15_ce0, "bias_15_ce0");
    sc_trace(mVcdFile, bias_15_q0, "bias_15_q0");
    sc_trace(mVcdFile, in_V_data_V_blk_n, "in_V_data_V_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln525_reg_1004, "icmp_ln525_reg_1004");
    sc_trace(mVcdFile, in_V_id_V_blk_n, "in_V_id_V_blk_n");
    sc_trace(mVcdFile, in_V_dest_V_blk_n, "in_V_dest_V_blk_n");
    sc_trace(mVcdFile, in_V_user_V_blk_n, "in_V_user_V_blk_n");
    sc_trace(mVcdFile, in_V_last_V_blk_n, "in_V_last_V_blk_n");
    sc_trace(mVcdFile, out_V_data_V_blk_n, "out_V_data_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, icmp_ln525_reg_1004_pp0_iter1_reg, "icmp_ln525_reg_1004_pp0_iter1_reg");
    sc_trace(mVcdFile, out_V_id_V_blk_n, "out_V_id_V_blk_n");
    sc_trace(mVcdFile, out_V_dest_V_blk_n, "out_V_dest_V_blk_n");
    sc_trace(mVcdFile, out_V_user_V_blk_n, "out_V_user_V_blk_n");
    sc_trace(mVcdFile, out_V_last_V_blk_n, "out_V_last_V_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_545, "indvar_flatten_reg_545");
    sc_trace(mVcdFile, i_0_reg_556, "i_0_reg_556");
    sc_trace(mVcdFile, bound_fu_601_p2, "bound_fu_601_p2");
    sc_trace(mVcdFile, bound_reg_999, "bound_reg_999");
    sc_trace(mVcdFile, io_acc_block_signal_op16, "io_acc_block_signal_op16");
    sc_trace(mVcdFile, io_acc_block_signal_op20, "io_acc_block_signal_op20");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, icmp_ln525_fu_607_p2, "icmp_ln525_fu_607_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, io_acc_block_signal_op33, "io_acc_block_signal_op33");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, io_acc_block_signal_op138, "io_acc_block_signal_op138");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln525_fu_612_p2, "add_ln525_fu_612_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, select_ln527_fu_624_p3, "select_ln527_fu_624_p3");
    sc_trace(mVcdFile, select_ln527_reg_1013, "select_ln527_reg_1013");
    sc_trace(mVcdFile, trunc_ln647_fu_652_p1, "trunc_ln647_fu_652_p1");
    sc_trace(mVcdFile, trunc_ln647_reg_1018, "trunc_ln647_reg_1018");
    sc_trace(mVcdFile, p_Result_1_reg_1028, "p_Result_1_reg_1028");
    sc_trace(mVcdFile, p_Result_2_reg_1038, "p_Result_2_reg_1038");
    sc_trace(mVcdFile, p_Result_3_reg_1048, "p_Result_3_reg_1048");
    sc_trace(mVcdFile, p_Result_4_reg_1058, "p_Result_4_reg_1058");
    sc_trace(mVcdFile, p_Result_5_reg_1068, "p_Result_5_reg_1068");
    sc_trace(mVcdFile, p_Result_6_reg_1078, "p_Result_6_reg_1078");
    sc_trace(mVcdFile, p_Result_7_reg_1088, "p_Result_7_reg_1088");
    sc_trace(mVcdFile, p_Result_8_reg_1098, "p_Result_8_reg_1098");
    sc_trace(mVcdFile, p_Result_9_reg_1108, "p_Result_9_reg_1108");
    sc_trace(mVcdFile, p_Result_s_reg_1118, "p_Result_s_reg_1118");
    sc_trace(mVcdFile, p_Result_10_reg_1128, "p_Result_10_reg_1128");
    sc_trace(mVcdFile, p_Result_11_reg_1138, "p_Result_11_reg_1138");
    sc_trace(mVcdFile, p_Result_12_reg_1148, "p_Result_12_reg_1148");
    sc_trace(mVcdFile, p_Result_13_reg_1158, "p_Result_13_reg_1158");
    sc_trace(mVcdFile, p_Result_14_reg_1168, "p_Result_14_reg_1168");
    sc_trace(mVcdFile, i_fu_806_p2, "i_fu_806_p2");
    sc_trace(mVcdFile, i_reg_1178, "i_reg_1178");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_phi_mux_i_0_phi_fu_560_p4, "ap_phi_mux_i_0_phi_fu_560_p4");
    sc_trace(mVcdFile, zext_ln533_fu_632_p1, "zext_ln533_fu_632_p1");
    sc_trace(mVcdFile, out_data_data_V_fu_576_p1, "out_data_data_V_fu_576_p1");
    sc_trace(mVcdFile, tmp_data_V_9_fu_956_p17, "tmp_data_V_9_fu_956_p17");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, out_data_last_V_fu_993_p2, "out_data_last_V_fu_993_p2");
    sc_trace(mVcdFile, N_fu_572_p1, "N_fu_572_p1");
    sc_trace(mVcdFile, tmp_1_fu_589_p3, "tmp_1_fu_589_p3");
    sc_trace(mVcdFile, p_shl_fu_581_p3, "p_shl_fu_581_p3");
    sc_trace(mVcdFile, p_shl94_fu_597_p1, "p_shl94_fu_597_p1");
    sc_trace(mVcdFile, icmp_ln527_fu_618_p2, "icmp_ln527_fu_618_p2");
    sc_trace(mVcdFile, sext_ln215_fu_812_p1, "sext_ln215_fu_812_p1");
    sc_trace(mVcdFile, sext_ln215_509_fu_821_p1, "sext_ln215_509_fu_821_p1");
    sc_trace(mVcdFile, sext_ln215_510_fu_830_p1, "sext_ln215_510_fu_830_p1");
    sc_trace(mVcdFile, sext_ln215_511_fu_839_p1, "sext_ln215_511_fu_839_p1");
    sc_trace(mVcdFile, sext_ln215_512_fu_848_p1, "sext_ln215_512_fu_848_p1");
    sc_trace(mVcdFile, sext_ln215_513_fu_857_p1, "sext_ln215_513_fu_857_p1");
    sc_trace(mVcdFile, sext_ln215_514_fu_866_p1, "sext_ln215_514_fu_866_p1");
    sc_trace(mVcdFile, sext_ln215_515_fu_875_p1, "sext_ln215_515_fu_875_p1");
    sc_trace(mVcdFile, sext_ln215_516_fu_884_p1, "sext_ln215_516_fu_884_p1");
    sc_trace(mVcdFile, sext_ln215_517_fu_893_p1, "sext_ln215_517_fu_893_p1");
    sc_trace(mVcdFile, sext_ln215_518_fu_902_p1, "sext_ln215_518_fu_902_p1");
    sc_trace(mVcdFile, sext_ln215_519_fu_911_p1, "sext_ln215_519_fu_911_p1");
    sc_trace(mVcdFile, sext_ln215_520_fu_920_p1, "sext_ln215_520_fu_920_p1");
    sc_trace(mVcdFile, sext_ln215_521_fu_929_p1, "sext_ln215_521_fu_929_p1");
    sc_trace(mVcdFile, sext_ln215_522_fu_938_p1, "sext_ln215_522_fu_938_p1");
    sc_trace(mVcdFile, sext_ln215_523_fu_947_p1, "sext_ln215_523_fu_947_p1");
    sc_trace(mVcdFile, add_ln215_15_fu_951_p2, "add_ln215_15_fu_951_p2");
    sc_trace(mVcdFile, add_ln215_14_fu_942_p2, "add_ln215_14_fu_942_p2");
    sc_trace(mVcdFile, add_ln215_13_fu_933_p2, "add_ln215_13_fu_933_p2");
    sc_trace(mVcdFile, add_ln215_12_fu_924_p2, "add_ln215_12_fu_924_p2");
    sc_trace(mVcdFile, add_ln215_11_fu_915_p2, "add_ln215_11_fu_915_p2");
    sc_trace(mVcdFile, add_ln215_10_fu_906_p2, "add_ln215_10_fu_906_p2");
    sc_trace(mVcdFile, add_ln215_9_fu_897_p2, "add_ln215_9_fu_897_p2");
    sc_trace(mVcdFile, add_ln215_8_fu_888_p2, "add_ln215_8_fu_888_p2");
    sc_trace(mVcdFile, add_ln215_7_fu_879_p2, "add_ln215_7_fu_879_p2");
    sc_trace(mVcdFile, add_ln215_6_fu_870_p2, "add_ln215_6_fu_870_p2");
    sc_trace(mVcdFile, add_ln215_5_fu_861_p2, "add_ln215_5_fu_861_p2");
    sc_trace(mVcdFile, add_ln215_4_fu_852_p2, "add_ln215_4_fu_852_p2");
    sc_trace(mVcdFile, add_ln215_3_fu_843_p2, "add_ln215_3_fu_843_p2");
    sc_trace(mVcdFile, add_ln215_2_fu_834_p2, "add_ln215_2_fu_834_p2");
    sc_trace(mVcdFile, add_ln215_1_fu_825_p2, "add_ln215_1_fu_825_p2");
    sc_trace(mVcdFile, add_ln215_fu_816_p2, "add_ln215_fu_816_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

AddBias::~AddBias() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete bias_0_U;
    delete bias_1_U;
    delete bias_2_U;
    delete bias_3_U;
    delete bias_4_U;
    delete bias_5_U;
    delete bias_6_U;
    delete bias_7_U;
    delete bias_8_U;
    delete bias_9_U;
    delete bias_10_U;
    delete bias_11_U;
    delete bias_12_U;
    delete bias_13_U;
    delete bias_14_U;
    delete bias_15_U;
}

void AddBias::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read())))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read())))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_0_reg_556 = i_reg_1178.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read())))) {
        i_0_reg_556 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_fu_607_p2.read()))) {
        indvar_flatten_reg_545 = add_ln525_fu_612_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read())))) {
        indvar_flatten_reg_545 = ap_const_lv38_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read())))) {
        bound_reg_999 = bound_fu_601_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_1178 = i_fu_806_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln525_reg_1004 = icmp_ln525_fu_607_p2.read();
        icmp_ln525_reg_1004_pp0_iter1_reg = icmp_ln525_reg_1004.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_Result_10_reg_1128 = in_V_data_V_dout.read().range(383, 352);
        p_Result_11_reg_1138 = in_V_data_V_dout.read().range(415, 384);
        p_Result_12_reg_1148 = in_V_data_V_dout.read().range(447, 416);
        p_Result_13_reg_1158 = in_V_data_V_dout.read().range(479, 448);
        p_Result_14_reg_1168 = in_V_data_V_dout.read().range(511, 480);
        p_Result_1_reg_1028 = in_V_data_V_dout.read().range(63, 32);
        p_Result_2_reg_1038 = in_V_data_V_dout.read().range(95, 64);
        p_Result_3_reg_1048 = in_V_data_V_dout.read().range(127, 96);
        p_Result_4_reg_1058 = in_V_data_V_dout.read().range(159, 128);
        p_Result_5_reg_1068 = in_V_data_V_dout.read().range(191, 160);
        p_Result_6_reg_1078 = in_V_data_V_dout.read().range(223, 192);
        p_Result_7_reg_1088 = in_V_data_V_dout.read().range(255, 224);
        p_Result_8_reg_1098 = in_V_data_V_dout.read().range(287, 256);
        p_Result_9_reg_1108 = in_V_data_V_dout.read().range(319, 288);
        p_Result_s_reg_1118 = in_V_data_V_dout.read().range(351, 320);
        select_ln527_reg_1013 = select_ln527_fu_624_p3.read();
        trunc_ln647_reg_1018 = trunc_ln647_fu_652_p1.read();
    }
}

void AddBias::thread_N_fu_572_p1() {
    N_fu_572_p1 = in_V_data_V_dout.read().range(32-1, 0);
}

void AddBias::thread_add_ln215_10_fu_906_p2() {
    add_ln215_10_fu_906_p2 = (!sext_ln215_518_fu_902_p1.read().is_01() || !p_Result_s_reg_1118.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_518_fu_902_p1.read()) + sc_biguint<32>(p_Result_s_reg_1118.read()));
}

void AddBias::thread_add_ln215_11_fu_915_p2() {
    add_ln215_11_fu_915_p2 = (!sext_ln215_519_fu_911_p1.read().is_01() || !p_Result_10_reg_1128.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_519_fu_911_p1.read()) + sc_biguint<32>(p_Result_10_reg_1128.read()));
}

void AddBias::thread_add_ln215_12_fu_924_p2() {
    add_ln215_12_fu_924_p2 = (!sext_ln215_520_fu_920_p1.read().is_01() || !p_Result_11_reg_1138.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_520_fu_920_p1.read()) + sc_biguint<32>(p_Result_11_reg_1138.read()));
}

void AddBias::thread_add_ln215_13_fu_933_p2() {
    add_ln215_13_fu_933_p2 = (!sext_ln215_521_fu_929_p1.read().is_01() || !p_Result_12_reg_1148.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_521_fu_929_p1.read()) + sc_biguint<32>(p_Result_12_reg_1148.read()));
}

void AddBias::thread_add_ln215_14_fu_942_p2() {
    add_ln215_14_fu_942_p2 = (!sext_ln215_522_fu_938_p1.read().is_01() || !p_Result_13_reg_1158.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_522_fu_938_p1.read()) + sc_biguint<32>(p_Result_13_reg_1158.read()));
}

void AddBias::thread_add_ln215_15_fu_951_p2() {
    add_ln215_15_fu_951_p2 = (!sext_ln215_523_fu_947_p1.read().is_01() || !p_Result_14_reg_1168.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_523_fu_947_p1.read()) + sc_biguint<32>(p_Result_14_reg_1168.read()));
}

void AddBias::thread_add_ln215_1_fu_825_p2() {
    add_ln215_1_fu_825_p2 = (!sext_ln215_509_fu_821_p1.read().is_01() || !p_Result_1_reg_1028.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_509_fu_821_p1.read()) + sc_biguint<32>(p_Result_1_reg_1028.read()));
}

void AddBias::thread_add_ln215_2_fu_834_p2() {
    add_ln215_2_fu_834_p2 = (!sext_ln215_510_fu_830_p1.read().is_01() || !p_Result_2_reg_1038.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_510_fu_830_p1.read()) + sc_biguint<32>(p_Result_2_reg_1038.read()));
}

void AddBias::thread_add_ln215_3_fu_843_p2() {
    add_ln215_3_fu_843_p2 = (!sext_ln215_511_fu_839_p1.read().is_01() || !p_Result_3_reg_1048.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_511_fu_839_p1.read()) + sc_biguint<32>(p_Result_3_reg_1048.read()));
}

void AddBias::thread_add_ln215_4_fu_852_p2() {
    add_ln215_4_fu_852_p2 = (!sext_ln215_512_fu_848_p1.read().is_01() || !p_Result_4_reg_1058.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_512_fu_848_p1.read()) + sc_biguint<32>(p_Result_4_reg_1058.read()));
}

void AddBias::thread_add_ln215_5_fu_861_p2() {
    add_ln215_5_fu_861_p2 = (!sext_ln215_513_fu_857_p1.read().is_01() || !p_Result_5_reg_1068.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_513_fu_857_p1.read()) + sc_biguint<32>(p_Result_5_reg_1068.read()));
}

void AddBias::thread_add_ln215_6_fu_870_p2() {
    add_ln215_6_fu_870_p2 = (!sext_ln215_514_fu_866_p1.read().is_01() || !p_Result_6_reg_1078.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_514_fu_866_p1.read()) + sc_biguint<32>(p_Result_6_reg_1078.read()));
}

void AddBias::thread_add_ln215_7_fu_879_p2() {
    add_ln215_7_fu_879_p2 = (!sext_ln215_515_fu_875_p1.read().is_01() || !p_Result_7_reg_1088.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_515_fu_875_p1.read()) + sc_biguint<32>(p_Result_7_reg_1088.read()));
}

void AddBias::thread_add_ln215_8_fu_888_p2() {
    add_ln215_8_fu_888_p2 = (!sext_ln215_516_fu_884_p1.read().is_01() || !p_Result_8_reg_1098.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_516_fu_884_p1.read()) + sc_biguint<32>(p_Result_8_reg_1098.read()));
}

void AddBias::thread_add_ln215_9_fu_897_p2() {
    add_ln215_9_fu_897_p2 = (!sext_ln215_517_fu_893_p1.read().is_01() || !p_Result_9_reg_1108.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_517_fu_893_p1.read()) + sc_biguint<32>(p_Result_9_reg_1108.read()));
}

void AddBias::thread_add_ln215_fu_816_p2() {
    add_ln215_fu_816_p2 = (!sext_ln215_fu_812_p1.read().is_01() || !trunc_ln647_reg_1018.read().is_01())? sc_lv<32>(): (sc_bigint<32>(sext_ln215_fu_812_p1.read()) + sc_biguint<32>(trunc_ln647_reg_1018.read()));
}

void AddBias::thread_add_ln525_fu_612_p2() {
    add_ln525_fu_612_p2 = (!indvar_flatten_reg_545.read().is_01() || !ap_const_lv38_1.is_01())? sc_lv<38>(): (sc_biguint<38>(indvar_flatten_reg_545.read()) + sc_biguint<38>(ap_const_lv38_1));
}

void AddBias::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void AddBias::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AddBias::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[2];
}

void AddBias::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddBias::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op33.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op138.read())));
}

void AddBias::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op33.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op138.read())));
}

void AddBias::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op33.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op138.read())));
}

void AddBias::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()));
}

void AddBias::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void AddBias::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = (esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op33.read()));
}

void AddBias::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op138.read()));
}

void AddBias::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln525_fu_607_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void AddBias::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void AddBias::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void AddBias::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AddBias::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void AddBias::thread_ap_phi_mux_i_0_phi_fu_560_p4() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()))) {
        ap_phi_mux_i_0_phi_fu_560_p4 = i_reg_1178.read();
    } else {
        ap_phi_mux_i_0_phi_fu_560_p4 = i_0_reg_556.read();
    }
}

void AddBias::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AddBias::thread_bias_0_address0() {
    bias_0_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_0_ce0 = ap_const_logic_1;
    } else {
        bias_0_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_10_address0() {
    bias_10_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_10_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_10_ce0 = ap_const_logic_1;
    } else {
        bias_10_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_11_address0() {
    bias_11_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_11_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_11_ce0 = ap_const_logic_1;
    } else {
        bias_11_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_12_address0() {
    bias_12_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_12_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_12_ce0 = ap_const_logic_1;
    } else {
        bias_12_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_13_address0() {
    bias_13_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_13_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_13_ce0 = ap_const_logic_1;
    } else {
        bias_13_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_14_address0() {
    bias_14_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_14_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_14_ce0 = ap_const_logic_1;
    } else {
        bias_14_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_15_address0() {
    bias_15_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_15_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_15_ce0 = ap_const_logic_1;
    } else {
        bias_15_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_1_address0() {
    bias_1_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_1_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_1_ce0 = ap_const_logic_1;
    } else {
        bias_1_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_2_address0() {
    bias_2_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_2_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_2_ce0 = ap_const_logic_1;
    } else {
        bias_2_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_3_address0() {
    bias_3_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_3_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_3_ce0 = ap_const_logic_1;
    } else {
        bias_3_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_4_address0() {
    bias_4_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_4_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_4_ce0 = ap_const_logic_1;
    } else {
        bias_4_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_5_address0() {
    bias_5_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_5_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_5_ce0 = ap_const_logic_1;
    } else {
        bias_5_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_6_address0() {
    bias_6_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_6_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_6_ce0 = ap_const_logic_1;
    } else {
        bias_6_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_7_address0() {
    bias_7_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_7_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_7_ce0 = ap_const_logic_1;
    } else {
        bias_7_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_8_address0() {
    bias_8_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_8_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_8_ce0 = ap_const_logic_1;
    } else {
        bias_8_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bias_9_address0() {
    bias_9_address0 =  (sc_lv<6>) (zext_ln533_fu_632_p1.read());
}

void AddBias::thread_bias_9_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        bias_9_ce0 = ap_const_logic_1;
    } else {
        bias_9_ce0 = ap_const_logic_0;
    }
}

void AddBias::thread_bound_fu_601_p2() {
    bound_fu_601_p2 = (!p_shl_fu_581_p3.read().is_01() || !p_shl94_fu_597_p1.read().is_01())? sc_lv<38>(): (sc_biguint<38>(p_shl_fu_581_p3.read()) - sc_biguint<38>(p_shl94_fu_597_p1.read()));
}

void AddBias::thread_i_fu_806_p2() {
    i_fu_806_p2 = (!ap_const_lv6_1.is_01() || !select_ln527_fu_624_p3.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_1) + sc_biguint<6>(select_ln527_fu_624_p3.read()));
}

void AddBias::thread_icmp_ln525_fu_607_p2() {
    icmp_ln525_fu_607_p2 = (!indvar_flatten_reg_545.read().is_01() || !bound_reg_999.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_545.read() == bound_reg_999.read());
}

void AddBias::thread_icmp_ln527_fu_618_p2() {
    icmp_ln527_fu_618_p2 = (!ap_phi_mux_i_0_phi_fu_560_p4.read().is_01() || !ap_const_lv6_30.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_0_phi_fu_560_p4.read() == ap_const_lv6_30);
}

void AddBias::thread_in_V_data_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0)))) {
        in_V_data_V_blk_n = in_V_data_V_empty_n.read();
    } else {
        in_V_data_V_blk_n = ap_const_logic_1;
    }
}

void AddBias::thread_in_V_data_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_data_V_read = ap_const_logic_1;
    } else {
        in_V_data_V_read = ap_const_logic_0;
    }
}

void AddBias::thread_in_V_dest_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0)))) {
        in_V_dest_V_blk_n = in_V_dest_V_empty_n.read();
    } else {
        in_V_dest_V_blk_n = ap_const_logic_1;
    }
}

void AddBias::thread_in_V_dest_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_dest_V_read = ap_const_logic_1;
    } else {
        in_V_dest_V_read = ap_const_logic_0;
    }
}

void AddBias::thread_in_V_id_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0)))) {
        in_V_id_V_blk_n = in_V_id_V_empty_n.read();
    } else {
        in_V_id_V_blk_n = ap_const_logic_1;
    }
}

void AddBias::thread_in_V_id_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_id_V_read = ap_const_logic_1;
    } else {
        in_V_id_V_read = ap_const_logic_0;
    }
}

void AddBias::thread_in_V_last_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0)))) {
        in_V_last_V_blk_n = in_V_last_V_empty_n.read();
    } else {
        in_V_last_V_blk_n = ap_const_logic_1;
    }
}

void AddBias::thread_in_V_last_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_last_V_read = ap_const_logic_1;
    } else {
        in_V_last_V_read = ap_const_logic_0;
    }
}

void AddBias::thread_in_V_user_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0)))) {
        in_V_user_V_blk_n = in_V_user_V_empty_n.read();
    } else {
        in_V_user_V_blk_n = ap_const_logic_1;
    }
}

void AddBias::thread_in_V_user_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(icmp_ln525_reg_1004.read(), ap_const_lv1_0) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_user_V_read = ap_const_logic_1;
    } else {
        in_V_user_V_read = ap_const_logic_0;
    }
}

void AddBias::thread_io_acc_block_signal_op138() {
    io_acc_block_signal_op138 = (out_V_data_V_full_n.read() & out_V_id_V_full_n.read() & out_V_dest_V_full_n.read() & out_V_user_V_full_n.read() & out_V_last_V_full_n.read());
}

void AddBias::thread_io_acc_block_signal_op16() {
    io_acc_block_signal_op16 = (in_V_data_V_empty_n.read() & in_V_id_V_empty_n.read() & in_V_dest_V_empty_n.read() & in_V_user_V_empty_n.read() & in_V_last_V_empty_n.read());
}

void AddBias::thread_io_acc_block_signal_op20() {
    io_acc_block_signal_op20 = (out_V_data_V_full_n.read() & out_V_id_V_full_n.read() & out_V_dest_V_full_n.read() & out_V_user_V_full_n.read() & out_V_last_V_full_n.read());
}

void AddBias::thread_io_acc_block_signal_op33() {
    io_acc_block_signal_op33 = (in_V_data_V_empty_n.read() & in_V_id_V_empty_n.read() & in_V_dest_V_empty_n.read() & in_V_user_V_empty_n.read() & in_V_last_V_empty_n.read());
}

void AddBias::thread_out_V_data_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read())))) {
        out_V_data_V_blk_n = out_V_data_V_full_n.read();
    } else {
        out_V_data_V_blk_n = ap_const_logic_1;
    }
}

void AddBias::thread_out_V_data_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_data_V_din = tmp_data_V_9_fu_956_p17.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read())))) {
        out_V_data_V_din = out_data_data_V_fu_576_p1.read();
    } else {
        out_V_data_V_din = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void AddBias::thread_out_V_data_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_data_V_write = ap_const_logic_1;
    } else {
        out_V_data_V_write = ap_const_logic_0;
    }
}

void AddBias::thread_out_V_dest_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read())))) {
        out_V_dest_V_blk_n = out_V_dest_V_full_n.read();
    } else {
        out_V_dest_V_blk_n = ap_const_logic_1;
    }
}

void AddBias::thread_out_V_dest_V_din() {
    out_V_dest_V_din = ap_const_lv8_28;
}

void AddBias::thread_out_V_dest_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_dest_V_write = ap_const_logic_1;
    } else {
        out_V_dest_V_write = ap_const_logic_0;
    }
}

void AddBias::thread_out_V_id_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read())))) {
        out_V_id_V_blk_n = out_V_id_V_full_n.read();
    } else {
        out_V_id_V_blk_n = ap_const_logic_1;
    }
}

void AddBias::thread_out_V_id_V_din() {
    out_V_id_V_din = ap_const_lv8_1;
}

void AddBias::thread_out_V_id_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_id_V_write = ap_const_logic_1;
    } else {
        out_V_id_V_write = ap_const_logic_0;
    }
}

void AddBias::thread_out_V_last_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read())))) {
        out_V_last_V_blk_n = out_V_last_V_full_n.read();
    } else {
        out_V_last_V_blk_n = ap_const_logic_1;
    }
}

void AddBias::thread_out_V_last_V_din() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
        out_V_last_V_din = out_data_last_V_fu_993_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read())))) {
        out_V_last_V_din = ap_const_lv1_0;
    } else {
        out_V_last_V_din =  (sc_lv<1>) ("X");
    }
}

void AddBias::thread_out_V_last_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_last_V_write = ap_const_logic_1;
    } else {
        out_V_last_V_write = ap_const_logic_0;
    }
}

void AddBias::thread_out_V_user_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read())))) {
        out_V_user_V_blk_n = out_V_user_V_full_n.read();
    } else {
        out_V_user_V_blk_n = ap_const_logic_1;
    }
}

void AddBias::thread_out_V_user_V_din() {
    out_V_user_V_din = ap_const_lv16_31;
}

void AddBias::thread_out_V_user_V_write() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln525_reg_1004_pp0_iter1_reg.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        out_V_user_V_write = ap_const_logic_1;
    } else {
        out_V_user_V_write = ap_const_logic_0;
    }
}

void AddBias::thread_out_data_data_V_fu_576_p1() {
    out_data_data_V_fu_576_p1 = esl_zext<512,32>(N_fu_572_p1.read());
}

void AddBias::thread_out_data_last_V_fu_993_p2() {
    out_data_last_V_fu_993_p2 = (!select_ln527_reg_1013.read().is_01() || !ap_const_lv6_2F.is_01())? sc_lv<1>(): sc_lv<1>(select_ln527_reg_1013.read() == ap_const_lv6_2F);
}

void AddBias::thread_p_shl94_fu_597_p1() {
    p_shl94_fu_597_p1 = esl_zext<38,36>(tmp_1_fu_589_p3.read());
}

void AddBias::thread_p_shl_fu_581_p3() {
    p_shl_fu_581_p3 = esl_concat<32,6>(N_fu_572_p1.read(), ap_const_lv6_0);
}

void AddBias::thread_select_ln527_fu_624_p3() {
    select_ln527_fu_624_p3 = (!icmp_ln527_fu_618_p2.read()[0].is_01())? sc_lv<6>(): ((icmp_ln527_fu_618_p2.read()[0].to_bool())? ap_const_lv6_0: ap_phi_mux_i_0_phi_fu_560_p4.read());
}

void AddBias::thread_sext_ln215_509_fu_821_p1() {
    sext_ln215_509_fu_821_p1 = esl_sext<32,14>(bias_1_q0.read());
}

void AddBias::thread_sext_ln215_510_fu_830_p1() {
    sext_ln215_510_fu_830_p1 = esl_sext<32,14>(bias_2_q0.read());
}

void AddBias::thread_sext_ln215_511_fu_839_p1() {
    sext_ln215_511_fu_839_p1 = esl_sext<32,14>(bias_3_q0.read());
}

void AddBias::thread_sext_ln215_512_fu_848_p1() {
    sext_ln215_512_fu_848_p1 = esl_sext<32,14>(bias_4_q0.read());
}

void AddBias::thread_sext_ln215_513_fu_857_p1() {
    sext_ln215_513_fu_857_p1 = esl_sext<32,14>(bias_5_q0.read());
}

void AddBias::thread_sext_ln215_514_fu_866_p1() {
    sext_ln215_514_fu_866_p1 = esl_sext<32,14>(bias_6_q0.read());
}

void AddBias::thread_sext_ln215_515_fu_875_p1() {
    sext_ln215_515_fu_875_p1 = esl_sext<32,14>(bias_7_q0.read());
}

void AddBias::thread_sext_ln215_516_fu_884_p1() {
    sext_ln215_516_fu_884_p1 = esl_sext<32,14>(bias_8_q0.read());
}

void AddBias::thread_sext_ln215_517_fu_893_p1() {
    sext_ln215_517_fu_893_p1 = esl_sext<32,14>(bias_9_q0.read());
}

void AddBias::thread_sext_ln215_518_fu_902_p1() {
    sext_ln215_518_fu_902_p1 = esl_sext<32,14>(bias_10_q0.read());
}

void AddBias::thread_sext_ln215_519_fu_911_p1() {
    sext_ln215_519_fu_911_p1 = esl_sext<32,14>(bias_11_q0.read());
}

void AddBias::thread_sext_ln215_520_fu_920_p1() {
    sext_ln215_520_fu_920_p1 = esl_sext<32,14>(bias_12_q0.read());
}

void AddBias::thread_sext_ln215_521_fu_929_p1() {
    sext_ln215_521_fu_929_p1 = esl_sext<32,14>(bias_13_q0.read());
}

void AddBias::thread_sext_ln215_522_fu_938_p1() {
    sext_ln215_522_fu_938_p1 = esl_sext<32,14>(bias_14_q0.read());
}

void AddBias::thread_sext_ln215_523_fu_947_p1() {
    sext_ln215_523_fu_947_p1 = esl_sext<32,14>(bias_15_q0.read());
}

void AddBias::thread_sext_ln215_fu_812_p1() {
    sext_ln215_fu_812_p1 = esl_sext<32,14>(bias_0_q0.read());
}

void AddBias::thread_tmp_1_fu_589_p3() {
    tmp_1_fu_589_p3 = esl_concat<32,4>(N_fu_572_p1.read(), ap_const_lv4_0);
}

void AddBias::thread_tmp_data_V_9_fu_956_p17() {
    tmp_data_V_9_fu_956_p17 = esl_concat<480,32>(esl_concat<448,32>(esl_concat<416,32>(esl_concat<384,32>(esl_concat<352,32>(esl_concat<320,32>(esl_concat<288,32>(esl_concat<256,32>(esl_concat<224,32>(esl_concat<192,32>(esl_concat<160,32>(esl_concat<128,32>(esl_concat<96,32>(esl_concat<64,32>(esl_concat<32,32>(add_ln215_15_fu_951_p2.read(), add_ln215_14_fu_942_p2.read()), add_ln215_13_fu_933_p2.read()), add_ln215_12_fu_924_p2.read()), add_ln215_11_fu_915_p2.read()), add_ln215_10_fu_906_p2.read()), add_ln215_9_fu_897_p2.read()), add_ln215_8_fu_888_p2.read()), add_ln215_7_fu_879_p2.read()), add_ln215_6_fu_870_p2.read()), add_ln215_5_fu_861_p2.read()), add_ln215_4_fu_852_p2.read()), add_ln215_3_fu_843_p2.read()), add_ln215_2_fu_834_p2.read()), add_ln215_1_fu_825_p2.read()), add_ln215_fu_816_p2.read());
}

void AddBias::thread_trunc_ln647_fu_652_p1() {
    trunc_ln647_fu_652_p1 = in_V_data_V_dout.read().range(32-1, 0);
}

void AddBias::thread_zext_ln533_fu_632_p1() {
    zext_ln533_fu_632_p1 = esl_zext<64,6>(select_ln527_fu_624_p3.read());
}

void AddBias::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op16.read()) || esl_seteq<1,1,1>(ap_const_logic_0, io_acc_block_signal_op20.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln525_fu_607_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln525_fu_607_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

}

