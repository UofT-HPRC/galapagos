// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ReadB.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ReadB::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ReadB::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> ReadB::ap_ST_fsm_state1 = "1";
const sc_lv<3> ReadB::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> ReadB::ap_ST_fsm_state4 = "100";
const bool ReadB::ap_const_boolean_1 = true;
const sc_lv<32> ReadB::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> ReadB::ap_const_lv1_0 = "0";
const sc_lv<1> ReadB::ap_const_lv1_1 = "1";
const sc_lv<2> ReadB::ap_const_lv2_0 = "00";
const sc_lv<2> ReadB::ap_const_lv2_2 = "10";
const sc_lv<2> ReadB::ap_const_lv2_3 = "11";
const sc_lv<2> ReadB::ap_const_lv2_1 = "1";
const sc_lv<32> ReadB::ap_const_lv32_1 = "1";
const bool ReadB::ap_const_boolean_0 = false;
const sc_lv<36> ReadB::ap_const_lv36_0 = "000000000000000000000000000000000000";
const sc_lv<4> ReadB::ap_const_lv4_0 = "0000";
const sc_lv<36> ReadB::ap_const_lv36_1 = "1";
const sc_lv<32> ReadB::ap_const_lv32_100 = "100000000";
const sc_lv<32> ReadB::ap_const_lv32_1FF = "111111111";
const sc_lv<32> ReadB::ap_const_lv32_2 = "10";

ReadB::ReadB(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_N_pipes_0_V_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( N_pipes_0_V_V_full_n );

    SC_METHOD(thread_N_pipes_0_V_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( N_pipes_0_V_V_full_n );
    sensitive << ( N_pipes_1_V_V_full_n );
    sensitive << ( N_pipes_2_V_V_full_n );
    sensitive << ( tmp_V_fu_202_p1 );

    SC_METHOD(thread_N_pipes_0_V_V_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( N_pipes_0_V_V_full_n );
    sensitive << ( N_pipes_1_V_V_full_n );
    sensitive << ( N_pipes_2_V_V_full_n );

    SC_METHOD(thread_N_pipes_1_V_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( N_pipes_1_V_V_full_n );

    SC_METHOD(thread_N_pipes_1_V_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( N_pipes_0_V_V_full_n );
    sensitive << ( N_pipes_1_V_V_full_n );
    sensitive << ( N_pipes_2_V_V_full_n );
    sensitive << ( tmp_V_fu_202_p1 );

    SC_METHOD(thread_N_pipes_1_V_V_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( N_pipes_0_V_V_full_n );
    sensitive << ( N_pipes_1_V_V_full_n );
    sensitive << ( N_pipes_2_V_V_full_n );

    SC_METHOD(thread_N_pipes_2_V_V_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( N_pipes_2_V_V_full_n );

    SC_METHOD(thread_N_pipes_2_V_V_din);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( N_pipes_0_V_V_full_n );
    sensitive << ( N_pipes_1_V_V_full_n );
    sensitive << ( N_pipes_2_V_V_full_n );
    sensitive << ( tmp_V_fu_202_p1 );

    SC_METHOD(thread_N_pipes_2_V_V_write);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( N_pipes_0_V_V_full_n );
    sensitive << ( N_pipes_1_V_V_full_n );
    sensitive << ( N_pipes_2_V_V_full_n );

    SC_METHOD(thread_add_ln373_fu_240_p2);
    sensitive << ( indvar_flatten_reg_187 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( b_pipes_1_V_V_full_n );
    sensitive << ( b_pipes_2_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln373_fu_235_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln373_reg_265 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( b_pipes_1_V_V_full_n );
    sensitive << ( b_pipes_2_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln373_fu_235_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln373_reg_265 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( b_pipes_1_V_V_full_n );
    sensitive << ( b_pipes_2_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln373_fu_235_p2 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln373_reg_265 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( N_pipes_0_V_V_full_n );
    sensitive << ( N_pipes_1_V_V_full_n );
    sensitive << ( N_pipes_2_V_V_full_n );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( icmp_ln373_fu_235_p2 );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( b_pipes_1_V_V_full_n );
    sensitive << ( b_pipes_2_V_V_full_n );
    sensitive << ( icmp_ln373_reg_265 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln373_fu_235_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_b_pipes_1_V_V_blk_n);
    sensitive << ( b_pipes_1_V_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln373_reg_265 );

    SC_METHOD(thread_b_pipes_1_V_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln373_reg_265 );
    sensitive << ( tmp_V_4_reg_274 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_b_pipes_1_V_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln373_reg_265 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_b_pipes_2_V_V_blk_n);
    sensitive << ( b_pipes_2_V_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln373_reg_265 );

    SC_METHOD(thread_b_pipes_2_V_V_din);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln373_reg_265 );
    sensitive << ( tmp_V_5_reg_279 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_b_pipes_2_V_V_write);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( icmp_ln373_reg_265 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_bound_fu_229_p2);
    sensitive << ( p_shl_fu_209_p3 );
    sensitive << ( p_shl2_fu_225_p1 );

    SC_METHOD(thread_icmp_ln373_fu_235_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( indvar_flatten_reg_187 );
    sensitive << ( bound_reg_260 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_data_V_0_ack_in);
    sensitive << ( in_V_data_V_0_state );

    SC_METHOD(thread_in_V_data_V_0_ack_out);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( N_pipes_0_V_V_full_n );
    sensitive << ( N_pipes_1_V_V_full_n );
    sensitive << ( N_pipes_2_V_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln373_fu_235_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_data_V_0_data_out);
    sensitive << ( in_V_data_V_0_payload_A );
    sensitive << ( in_V_data_V_0_payload_B );
    sensitive << ( in_V_data_V_0_sel );

    SC_METHOD(thread_in_V_data_V_0_load_A);
    sensitive << ( in_V_data_V_0_sel_wr );
    sensitive << ( in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_data_V_0_load_B);
    sensitive << ( in_V_data_V_0_sel_wr );
    sensitive << ( in_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_V_data_V_0_sel);
    sensitive << ( in_V_data_V_0_sel_rd );

    SC_METHOD(thread_in_V_data_V_0_state_cmp_full);
    sensitive << ( in_V_data_V_0_state );

    SC_METHOD(thread_in_V_data_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_V_data_V_0_vld_out);
    sensitive << ( in_V_data_V_0_state );

    SC_METHOD(thread_in_V_last_V_0_ack_out);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( N_pipes_0_V_V_full_n );
    sensitive << ( N_pipes_1_V_V_full_n );
    sensitive << ( N_pipes_2_V_V_full_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln373_fu_235_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_in_V_last_V_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_r_TDATA_blk_n);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln373_fu_235_p2 );

    SC_METHOD(thread_in_r_TREADY);
    sensitive << ( in_V_last_V_0_state );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_p_shl2_fu_225_p1);
    sensitive << ( tmp_4_fu_217_p3 );

    SC_METHOD(thread_p_shl_fu_209_p3);
    sensitive << ( tmp_V_fu_202_p1 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_4_fu_217_p3);
    sensitive << ( tmp_V_fu_202_p1 );

    SC_METHOD(thread_tmp_V_4_fu_246_p1);
    sensitive << ( in_V_data_V_0_data_out );

    SC_METHOD(thread_tmp_V_fu_202_p1);
    sensitive << ( in_V_data_V_0_data_out );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_V_data_V_0_vld_out );
    sensitive << ( N_pipes_0_V_V_full_n );
    sensitive << ( N_pipes_1_V_V_full_n );
    sensitive << ( N_pipes_2_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( icmp_ln373_fu_235_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    in_V_data_V_0_sel_rd = SC_LOGIC_0;
    in_V_data_V_0_sel_wr = SC_LOGIC_0;
    in_V_data_V_0_state = "00";
    in_V_last_V_0_state = "00";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ReadB_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, in_r_TDATA, "(port)in_r_TDATA");
    sc_trace(mVcdFile, in_r_TVALID, "(port)in_r_TVALID");
    sc_trace(mVcdFile, in_r_TREADY, "(port)in_r_TREADY");
    sc_trace(mVcdFile, in_r_TID, "(port)in_r_TID");
    sc_trace(mVcdFile, in_r_TDEST, "(port)in_r_TDEST");
    sc_trace(mVcdFile, in_r_TUSER, "(port)in_r_TUSER");
    sc_trace(mVcdFile, in_r_TLAST, "(port)in_r_TLAST");
    sc_trace(mVcdFile, b_pipes_1_V_V_din, "(port)b_pipes_1_V_V_din");
    sc_trace(mVcdFile, b_pipes_1_V_V_full_n, "(port)b_pipes_1_V_V_full_n");
    sc_trace(mVcdFile, b_pipes_1_V_V_write, "(port)b_pipes_1_V_V_write");
    sc_trace(mVcdFile, b_pipes_2_V_V_din, "(port)b_pipes_2_V_V_din");
    sc_trace(mVcdFile, b_pipes_2_V_V_full_n, "(port)b_pipes_2_V_V_full_n");
    sc_trace(mVcdFile, b_pipes_2_V_V_write, "(port)b_pipes_2_V_V_write");
    sc_trace(mVcdFile, N_pipes_0_V_V_din, "(port)N_pipes_0_V_V_din");
    sc_trace(mVcdFile, N_pipes_0_V_V_full_n, "(port)N_pipes_0_V_V_full_n");
    sc_trace(mVcdFile, N_pipes_0_V_V_write, "(port)N_pipes_0_V_V_write");
    sc_trace(mVcdFile, N_pipes_1_V_V_din, "(port)N_pipes_1_V_V_din");
    sc_trace(mVcdFile, N_pipes_1_V_V_full_n, "(port)N_pipes_1_V_V_full_n");
    sc_trace(mVcdFile, N_pipes_1_V_V_write, "(port)N_pipes_1_V_V_write");
    sc_trace(mVcdFile, N_pipes_2_V_V_din, "(port)N_pipes_2_V_V_din");
    sc_trace(mVcdFile, N_pipes_2_V_V_full_n, "(port)N_pipes_2_V_V_full_n");
    sc_trace(mVcdFile, N_pipes_2_V_V_write, "(port)N_pipes_2_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, in_V_data_V_0_data_out, "in_V_data_V_0_data_out");
    sc_trace(mVcdFile, in_V_data_V_0_vld_in, "in_V_data_V_0_vld_in");
    sc_trace(mVcdFile, in_V_data_V_0_vld_out, "in_V_data_V_0_vld_out");
    sc_trace(mVcdFile, in_V_data_V_0_ack_in, "in_V_data_V_0_ack_in");
    sc_trace(mVcdFile, in_V_data_V_0_ack_out, "in_V_data_V_0_ack_out");
    sc_trace(mVcdFile, in_V_data_V_0_payload_A, "in_V_data_V_0_payload_A");
    sc_trace(mVcdFile, in_V_data_V_0_payload_B, "in_V_data_V_0_payload_B");
    sc_trace(mVcdFile, in_V_data_V_0_sel_rd, "in_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_V_data_V_0_sel_wr, "in_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_V_data_V_0_sel, "in_V_data_V_0_sel");
    sc_trace(mVcdFile, in_V_data_V_0_load_A, "in_V_data_V_0_load_A");
    sc_trace(mVcdFile, in_V_data_V_0_load_B, "in_V_data_V_0_load_B");
    sc_trace(mVcdFile, in_V_data_V_0_state, "in_V_data_V_0_state");
    sc_trace(mVcdFile, in_V_data_V_0_state_cmp_full, "in_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_V_last_V_0_vld_in, "in_V_last_V_0_vld_in");
    sc_trace(mVcdFile, in_V_last_V_0_ack_out, "in_V_last_V_0_ack_out");
    sc_trace(mVcdFile, in_V_last_V_0_state, "in_V_last_V_0_state");
    sc_trace(mVcdFile, in_r_TDATA_blk_n, "in_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln373_fu_235_p2, "icmp_ln373_fu_235_p2");
    sc_trace(mVcdFile, b_pipes_1_V_V_blk_n, "b_pipes_1_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, icmp_ln373_reg_265, "icmp_ln373_reg_265");
    sc_trace(mVcdFile, b_pipes_2_V_V_blk_n, "b_pipes_2_V_V_blk_n");
    sc_trace(mVcdFile, N_pipes_0_V_V_blk_n, "N_pipes_0_V_V_blk_n");
    sc_trace(mVcdFile, N_pipes_1_V_V_blk_n, "N_pipes_1_V_V_blk_n");
    sc_trace(mVcdFile, N_pipes_2_V_V_blk_n, "N_pipes_2_V_V_blk_n");
    sc_trace(mVcdFile, indvar_flatten_reg_187, "indvar_flatten_reg_187");
    sc_trace(mVcdFile, bound_fu_229_p2, "bound_fu_229_p2");
    sc_trace(mVcdFile, bound_reg_260, "bound_reg_260");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, add_ln373_fu_240_p2, "add_ln373_fu_240_p2");
    sc_trace(mVcdFile, tmp_V_4_fu_246_p1, "tmp_V_4_fu_246_p1");
    sc_trace(mVcdFile, tmp_V_4_reg_274, "tmp_V_4_reg_274");
    sc_trace(mVcdFile, tmp_V_5_reg_279, "tmp_V_5_reg_279");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, tmp_V_fu_202_p1, "tmp_V_fu_202_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_4_fu_217_p3, "tmp_4_fu_217_p3");
    sc_trace(mVcdFile, p_shl_fu_209_p3, "p_shl_fu_209_p3");
    sc_trace(mVcdFile, p_shl2_fu_225_p1, "p_shl2_fu_225_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

ReadB::~ReadB() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void ReadB::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read())))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read())))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_out.read()))) {
            in_V_data_V_0_sel_rd =  (sc_logic) (~in_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_in.read()))) {
            in_V_data_V_0_sel_wr =  (sc_logic) (~in_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_ack_out.read()))))) {
            in_V_data_V_0_state = ap_const_lv2_3;
        } else {
            in_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, in_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, in_V_last_V_0_state.read())))) {
            in_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_last_V_0_state.read())))) {
            in_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, in_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, in_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_V_last_V_0_ack_out.read()))))) {
            in_V_last_V_0_state = ap_const_lv2_3;
        } else {
            in_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_fu_235_p2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_reg_187 = add_ln373_fu_240_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read())))) {
        indvar_flatten_reg_187 = ap_const_lv36_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read())))) {
        bound_reg_260 = bound_fu_229_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln373_reg_265 = icmp_ln373_fu_235_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_load_A.read())) {
        in_V_data_V_0_payload_A = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_load_B.read())) {
        in_V_data_V_0_payload_B = in_r_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_fu_235_p2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_4_reg_274 = tmp_V_4_fu_246_p1.read();
        tmp_V_5_reg_279 = in_V_data_V_0_data_out.read().range(511, 256);
    }
}

void ReadB::thread_N_pipes_0_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        N_pipes_0_V_V_blk_n = N_pipes_0_V_V_full_n.read();
    } else {
        N_pipes_0_V_V_blk_n = ap_const_logic_1;
    }
}

void ReadB::thread_N_pipes_0_V_V_din() {
    N_pipes_0_V_V_din = tmp_V_fu_202_p1.read();
}

void ReadB::thread_N_pipes_0_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read())))) {
        N_pipes_0_V_V_write = ap_const_logic_1;
    } else {
        N_pipes_0_V_V_write = ap_const_logic_0;
    }
}

void ReadB::thread_N_pipes_1_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        N_pipes_1_V_V_blk_n = N_pipes_1_V_V_full_n.read();
    } else {
        N_pipes_1_V_V_blk_n = ap_const_logic_1;
    }
}

void ReadB::thread_N_pipes_1_V_V_din() {
    N_pipes_1_V_V_din = tmp_V_fu_202_p1.read();
}

void ReadB::thread_N_pipes_1_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read())))) {
        N_pipes_1_V_V_write = ap_const_logic_1;
    } else {
        N_pipes_1_V_V_write = ap_const_logic_0;
    }
}

void ReadB::thread_N_pipes_2_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        N_pipes_2_V_V_blk_n = N_pipes_2_V_V_full_n.read();
    } else {
        N_pipes_2_V_V_blk_n = ap_const_logic_1;
    }
}

void ReadB::thread_N_pipes_2_V_V_din() {
    N_pipes_2_V_V_din = tmp_V_fu_202_p1.read();
}

void ReadB::thread_N_pipes_2_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read())))) {
        N_pipes_2_V_V_write = ap_const_logic_1;
    } else {
        N_pipes_2_V_V_write = ap_const_logic_0;
    }
}

void ReadB::thread_add_ln373_fu_240_p2() {
    add_ln373_fu_240_p2 = (!indvar_flatten_reg_187.read().is_01() || !ap_const_lv36_1.is_01())? sc_lv<36>(): (sc_biguint<36>(indvar_flatten_reg_187.read()) + sc_biguint<36>(ap_const_lv36_1));
}

void ReadB::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void ReadB::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ReadB::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void ReadB::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void ReadB::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_fu_235_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, b_pipes_1_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, b_pipes_2_V_V_full_n.read())))));
}

void ReadB::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_fu_235_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, b_pipes_1_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, b_pipes_2_V_V_full_n.read())))));
}

void ReadB::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_fu_235_p2.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, b_pipes_1_V_V_full_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, b_pipes_2_V_V_full_n.read())))));
}

void ReadB::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read()));
}

void ReadB::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_fu_235_p2.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()));
}

void ReadB::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, b_pipes_1_V_V_full_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, b_pipes_2_V_V_full_n.read())));
}

void ReadB::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln373_fu_235_p2.read())) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void ReadB::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void ReadB::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void ReadB::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ReadB::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void ReadB::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void ReadB::thread_b_pipes_1_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()))) {
        b_pipes_1_V_V_blk_n = b_pipes_1_V_V_full_n.read();
    } else {
        b_pipes_1_V_V_blk_n = ap_const_logic_1;
    }
}

void ReadB::thread_b_pipes_1_V_V_din() {
    b_pipes_1_V_V_din = tmp_V_4_reg_274.read();
}

void ReadB::thread_b_pipes_1_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        b_pipes_1_V_V_write = ap_const_logic_1;
    } else {
        b_pipes_1_V_V_write = ap_const_logic_0;
    }
}

void ReadB::thread_b_pipes_2_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()))) {
        b_pipes_2_V_V_blk_n = b_pipes_2_V_V_full_n.read();
    } else {
        b_pipes_2_V_V_blk_n = ap_const_logic_1;
    }
}

void ReadB::thread_b_pipes_2_V_V_din() {
    b_pipes_2_V_V_din = tmp_V_5_reg_279.read();
}

void ReadB::thread_b_pipes_2_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_reg_265.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        b_pipes_2_V_V_write = ap_const_logic_1;
    } else {
        b_pipes_2_V_V_write = ap_const_logic_0;
    }
}

void ReadB::thread_bound_fu_229_p2() {
    bound_fu_229_p2 = (!p_shl_fu_209_p3.read().is_01() || !p_shl2_fu_225_p1.read().is_01())? sc_lv<36>(): (sc_biguint<36>(p_shl_fu_209_p3.read()) - sc_biguint<36>(p_shl2_fu_225_p1.read()));
}

void ReadB::thread_icmp_ln373_fu_235_p2() {
    icmp_ln373_fu_235_p2 = (!indvar_flatten_reg_187.read().is_01() || !bound_reg_260.read().is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_187.read() == bound_reg_260.read());
}

void ReadB::thread_in_V_data_V_0_ack_in() {
    in_V_data_V_0_ack_in = in_V_data_V_0_state.read()[1];
}

void ReadB::thread_in_V_data_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_fu_235_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        in_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void ReadB::thread_in_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_V_data_V_0_sel.read())) {
        in_V_data_V_0_data_out = in_V_data_V_0_payload_B.read();
    } else {
        in_V_data_V_0_data_out = in_V_data_V_0_payload_A.read();
    }
}

void ReadB::thread_in_V_data_V_0_load_A() {
    in_V_data_V_0_load_A = (in_V_data_V_0_state_cmp_full.read() & ~in_V_data_V_0_sel_wr.read());
}

void ReadB::thread_in_V_data_V_0_load_B() {
    in_V_data_V_0_load_B = (in_V_data_V_0_sel_wr.read() & in_V_data_V_0_state_cmp_full.read());
}

void ReadB::thread_in_V_data_V_0_sel() {
    in_V_data_V_0_sel = in_V_data_V_0_sel_rd.read();
}

void ReadB::thread_in_V_data_V_0_state_cmp_full() {
    in_V_data_V_0_state_cmp_full =  (sc_logic) ((!in_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void ReadB::thread_in_V_data_V_0_vld_in() {
    in_V_data_V_0_vld_in = in_r_TVALID.read();
}

void ReadB::thread_in_V_data_V_0_vld_out() {
    in_V_data_V_0_vld_out = in_V_data_V_0_state.read()[0];
}

void ReadB::thread_in_V_last_V_0_ack_out() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read()))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_fu_235_p2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        in_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        in_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void ReadB::thread_in_V_last_V_0_vld_in() {
    in_V_last_V_0_vld_in = in_r_TVALID.read();
}

void ReadB::thread_in_r_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln373_fu_235_p2.read())))) {
        in_r_TDATA_blk_n = in_V_data_V_0_state.read()[0];
    } else {
        in_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void ReadB::thread_in_r_TREADY() {
    in_r_TREADY = in_V_last_V_0_state.read()[1];
}

void ReadB::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void ReadB::thread_p_shl2_fu_225_p1() {
    p_shl2_fu_225_p1 = esl_zext<36,34>(tmp_4_fu_217_p3.read());
}

void ReadB::thread_p_shl_fu_209_p3() {
    p_shl_fu_209_p3 = esl_concat<32,4>(tmp_V_fu_202_p1.read(), ap_const_lv4_0);
}

void ReadB::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void ReadB::thread_start_out() {
    start_out = real_start.read();
}

void ReadB::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void ReadB::thread_tmp_4_fu_217_p3() {
    tmp_4_fu_217_p3 = esl_concat<32,2>(tmp_V_fu_202_p1.read(), ap_const_lv2_0);
}

void ReadB::thread_tmp_V_4_fu_246_p1() {
    tmp_V_4_fu_246_p1 = in_V_data_V_0_data_out.read().range(256-1, 0);
}

void ReadB::thread_tmp_V_fu_202_p1() {
    tmp_V_fu_202_p1 = in_V_data_V_0_data_out.read().range(32-1, 0);
}

void ReadB::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, real_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, in_V_data_V_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_0_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_1_V_V_full_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, N_pipes_2_V_V_full_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln373_fu_235_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln373_fu_235_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

