// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _kernel_1_HH_
#define _kernel_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Linear.h"
#include "QuantAct.h"
#include "fifo_w512_d2_A_x.h"
#include "fifo_w8_d2_A_x.h"
#include "fifo_w16_d2_A_x.h"
#include "fifo_w1_d2_A_x.h"
#include "start_for_QuantAct_U0.h"

namespace ap_rtl {

struct kernel_1 : public sc_module {
    // Port declarations 16
    sc_in< sc_lv<512> > in_r_TDATA;
    sc_in< sc_lv<8> > in_r_TID;
    sc_in< sc_lv<8> > in_r_TDEST;
    sc_in< sc_lv<16> > in_r_TUSER;
    sc_in< sc_lv<1> > in_r_TLAST;
    sc_out< sc_lv<512> > out_r_TDATA;
    sc_out< sc_lv<8> > out_r_TID;
    sc_out< sc_lv<8> > out_r_TDEST;
    sc_out< sc_lv<16> > out_r_TUSER;
    sc_out< sc_lv<1> > out_r_TLAST;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > in_r_TVALID;
    sc_out< sc_logic > in_r_TREADY;
    sc_out< sc_logic > out_r_TVALID;
    sc_in< sc_logic > out_r_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    kernel_1(sc_module_name name);
    SC_HAS_PROCESS(kernel_1);

    ~kernel_1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Linear* Linear_U0;
    QuantAct* QuantAct_U0;
    fifo_w512_d2_A_x* pipe_1_V_data_V_U;
    fifo_w8_d2_A_x* pipe_1_V_id_V_U;
    fifo_w8_d2_A_x* pipe_1_V_dest_V_U;
    fifo_w16_d2_A_x* pipe_1_V_user_V_U;
    fifo_w1_d2_A_x* pipe_1_V_last_V_U;
    start_for_QuantAct_U0* start_for_QuantAct_U0_U;
    sc_signal< sc_logic > Linear_U0_ap_start;
    sc_signal< sc_logic > Linear_U0_start_out;
    sc_signal< sc_logic > Linear_U0_start_write;
    sc_signal< sc_lv<512> > Linear_U0_out_V_data_V_din;
    sc_signal< sc_logic > Linear_U0_out_V_data_V_write;
    sc_signal< sc_lv<8> > Linear_U0_out_V_id_V_din;
    sc_signal< sc_logic > Linear_U0_out_V_id_V_write;
    sc_signal< sc_lv<8> > Linear_U0_out_V_dest_V_din;
    sc_signal< sc_logic > Linear_U0_out_V_dest_V_write;
    sc_signal< sc_lv<16> > Linear_U0_out_V_user_V_din;
    sc_signal< sc_logic > Linear_U0_out_V_user_V_write;
    sc_signal< sc_lv<1> > Linear_U0_out_V_last_V_din;
    sc_signal< sc_logic > Linear_U0_out_V_last_V_write;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > Linear_U0_in_r_TREADY;
    sc_signal< sc_logic > Linear_U0_ap_done;
    sc_signal< sc_logic > Linear_U0_ap_ready;
    sc_signal< sc_logic > Linear_U0_ap_idle;
    sc_signal< sc_logic > Linear_U0_ap_continue;
    sc_signal< sc_logic > QuantAct_U0_ap_start;
    sc_signal< sc_logic > QuantAct_U0_ap_done;
    sc_signal< sc_logic > QuantAct_U0_ap_continue;
    sc_signal< sc_logic > QuantAct_U0_ap_idle;
    sc_signal< sc_logic > QuantAct_U0_ap_ready;
    sc_signal< sc_logic > QuantAct_U0_in_V_data_V_read;
    sc_signal< sc_logic > QuantAct_U0_in_V_id_V_read;
    sc_signal< sc_logic > QuantAct_U0_in_V_dest_V_read;
    sc_signal< sc_logic > QuantAct_U0_in_V_user_V_read;
    sc_signal< sc_logic > QuantAct_U0_in_V_last_V_read;
    sc_signal< sc_lv<512> > QuantAct_U0_out_r_TDATA;
    sc_signal< sc_logic > QuantAct_U0_out_r_TVALID;
    sc_signal< sc_lv<8> > QuantAct_U0_out_r_TID;
    sc_signal< sc_lv<8> > QuantAct_U0_out_r_TDEST;
    sc_signal< sc_lv<16> > QuantAct_U0_out_r_TUSER;
    sc_signal< sc_lv<1> > QuantAct_U0_out_r_TLAST;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > pipe_1_V_data_V_full_n;
    sc_signal< sc_lv<512> > pipe_1_V_data_V_dout;
    sc_signal< sc_logic > pipe_1_V_data_V_empty_n;
    sc_signal< sc_logic > pipe_1_V_id_V_full_n;
    sc_signal< sc_lv<8> > pipe_1_V_id_V_dout;
    sc_signal< sc_logic > pipe_1_V_id_V_empty_n;
    sc_signal< sc_logic > pipe_1_V_dest_V_full_n;
    sc_signal< sc_lv<8> > pipe_1_V_dest_V_dout;
    sc_signal< sc_logic > pipe_1_V_dest_V_empty_n;
    sc_signal< sc_logic > pipe_1_V_user_V_full_n;
    sc_signal< sc_lv<16> > pipe_1_V_user_V_dout;
    sc_signal< sc_logic > pipe_1_V_user_V_empty_n;
    sc_signal< sc_logic > pipe_1_V_last_V_full_n;
    sc_signal< sc_lv<1> > pipe_1_V_last_V_dout;
    sc_signal< sc_logic > pipe_1_V_last_V_empty_n;
    sc_signal< sc_lv<1> > start_for_QuantAct_U0_din;
    sc_signal< sc_logic > start_for_QuantAct_U0_full_n;
    sc_signal< sc_lv<1> > start_for_QuantAct_U0_dout;
    sc_signal< sc_logic > start_for_QuantAct_U0_empty_n;
    sc_signal< sc_logic > QuantAct_U0_start_full_n;
    sc_signal< sc_logic > QuantAct_U0_start_write;
    static const sc_lv<512> ap_const_lv512_lc_2;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_Linear_U0_ap_continue();
    void thread_Linear_U0_ap_start();
    void thread_QuantAct_U0_ap_continue();
    void thread_QuantAct_U0_ap_start();
    void thread_QuantAct_U0_start_full_n();
    void thread_QuantAct_U0_start_write();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_continue();
    void thread_in_r_TREADY();
    void thread_out_r_TDATA();
    void thread_out_r_TDEST();
    void thread_out_r_TID();
    void thread_out_r_TLAST();
    void thread_out_r_TUSER();
    void thread_out_r_TVALID();
    void thread_start_for_QuantAct_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
