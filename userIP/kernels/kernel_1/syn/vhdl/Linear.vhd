-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Linear is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_V_data_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    out_V_data_V_full_n : IN STD_LOGIC;
    out_V_data_V_write : OUT STD_LOGIC;
    out_V_id_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_id_V_full_n : IN STD_LOGIC;
    out_V_id_V_write : OUT STD_LOGIC;
    out_V_dest_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_dest_V_full_n : IN STD_LOGIC;
    out_V_dest_V_write : OUT STD_LOGIC;
    out_V_user_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_user_V_full_n : IN STD_LOGIC;
    out_V_user_V_write : OUT STD_LOGIC;
    out_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_V_last_V_full_n : IN STD_LOGIC;
    out_V_last_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of Linear is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal MatMul_U0_ap_start : STD_LOGIC;
    signal MatMul_U0_start_out : STD_LOGIC;
    signal MatMul_U0_start_write : STD_LOGIC;
    signal MatMul_U0_c_V_data_V_din : STD_LOGIC_VECTOR (511 downto 0);
    signal MatMul_U0_c_V_data_V_write : STD_LOGIC;
    signal MatMul_U0_c_V_id_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal MatMul_U0_c_V_id_V_write : STD_LOGIC;
    signal MatMul_U0_c_V_dest_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal MatMul_U0_c_V_dest_V_write : STD_LOGIC;
    signal MatMul_U0_c_V_user_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal MatMul_U0_c_V_user_V_write : STD_LOGIC;
    signal MatMul_U0_c_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal MatMul_U0_c_V_last_V_write : STD_LOGIC;
    signal MatMul_U0_in_r_TREADY : STD_LOGIC;
    signal MatMul_U0_ap_done : STD_LOGIC;
    signal MatMul_U0_ap_ready : STD_LOGIC;
    signal MatMul_U0_ap_idle : STD_LOGIC;
    signal MatMul_U0_ap_continue : STD_LOGIC;
    signal AddBias_U0_ap_start : STD_LOGIC;
    signal AddBias_U0_ap_done : STD_LOGIC;
    signal AddBias_U0_ap_continue : STD_LOGIC;
    signal AddBias_U0_ap_idle : STD_LOGIC;
    signal AddBias_U0_ap_ready : STD_LOGIC;
    signal AddBias_U0_in_V_data_V_read : STD_LOGIC;
    signal AddBias_U0_in_V_id_V_read : STD_LOGIC;
    signal AddBias_U0_in_V_dest_V_read : STD_LOGIC;
    signal AddBias_U0_in_V_user_V_read : STD_LOGIC;
    signal AddBias_U0_in_V_last_V_read : STD_LOGIC;
    signal AddBias_U0_out_V_data_V_din : STD_LOGIC_VECTOR (511 downto 0);
    signal AddBias_U0_out_V_data_V_write : STD_LOGIC;
    signal AddBias_U0_out_V_id_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AddBias_U0_out_V_id_V_write : STD_LOGIC;
    signal AddBias_U0_out_V_dest_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AddBias_U0_out_V_dest_V_write : STD_LOGIC;
    signal AddBias_U0_out_V_user_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal AddBias_U0_out_V_user_V_write : STD_LOGIC;
    signal AddBias_U0_out_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal AddBias_U0_out_V_last_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal pipe_V_data_V_full_n : STD_LOGIC;
    signal pipe_V_data_V_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal pipe_V_data_V_empty_n : STD_LOGIC;
    signal pipe_V_id_V_full_n : STD_LOGIC;
    signal pipe_V_id_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal pipe_V_id_V_empty_n : STD_LOGIC;
    signal pipe_V_dest_V_full_n : STD_LOGIC;
    signal pipe_V_dest_V_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal pipe_V_dest_V_empty_n : STD_LOGIC;
    signal pipe_V_user_V_full_n : STD_LOGIC;
    signal pipe_V_user_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal pipe_V_user_V_empty_n : STD_LOGIC;
    signal pipe_V_last_V_full_n : STD_LOGIC;
    signal pipe_V_last_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal pipe_V_last_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_AddBias_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AddBias_U0_full_n : STD_LOGIC;
    signal start_for_AddBias_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_AddBias_U0_empty_n : STD_LOGIC;
    signal AddBias_U0_start_full_n : STD_LOGIC;
    signal AddBias_U0_start_write : STD_LOGIC;

    component MatMul IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        in_r_TID : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TDEST : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TUSER : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        c_V_data_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        c_V_data_V_full_n : IN STD_LOGIC;
        c_V_data_V_write : OUT STD_LOGIC;
        c_V_id_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_V_id_V_full_n : IN STD_LOGIC;
        c_V_id_V_write : OUT STD_LOGIC;
        c_V_dest_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        c_V_dest_V_full_n : IN STD_LOGIC;
        c_V_dest_V_write : OUT STD_LOGIC;
        c_V_user_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        c_V_user_V_full_n : IN STD_LOGIC;
        c_V_user_V_write : OUT STD_LOGIC;
        c_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        c_V_last_V_full_n : IN STD_LOGIC;
        c_V_last_V_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component AddBias IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_V_data_V_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        in_V_data_V_empty_n : IN STD_LOGIC;
        in_V_data_V_read : OUT STD_LOGIC;
        in_V_id_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_V_id_V_empty_n : IN STD_LOGIC;
        in_V_id_V_read : OUT STD_LOGIC;
        in_V_dest_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        in_V_dest_V_empty_n : IN STD_LOGIC;
        in_V_dest_V_read : OUT STD_LOGIC;
        in_V_user_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        in_V_user_V_empty_n : IN STD_LOGIC;
        in_V_user_V_read : OUT STD_LOGIC;
        in_V_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        in_V_last_V_empty_n : IN STD_LOGIC;
        in_V_last_V_read : OUT STD_LOGIC;
        out_V_data_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        out_V_data_V_full_n : IN STD_LOGIC;
        out_V_data_V_write : OUT STD_LOGIC;
        out_V_id_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_V_id_V_full_n : IN STD_LOGIC;
        out_V_id_V_write : OUT STD_LOGIC;
        out_V_dest_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_V_dest_V_full_n : IN STD_LOGIC;
        out_V_dest_V_write : OUT STD_LOGIC;
        out_V_user_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_user_V_full_n : IN STD_LOGIC;
        out_V_user_V_write : OUT STD_LOGIC;
        out_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_V_last_V_full_n : IN STD_LOGIC;
        out_V_last_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w512_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_AddBias_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    MatMul_U0 : component MatMul
    port map (
        ap_start => MatMul_U0_ap_start,
        start_full_n => start_for_AddBias_U0_full_n,
        start_out => MatMul_U0_start_out,
        start_write => MatMul_U0_start_write,
        in_r_TDATA => in_r_TDATA,
        in_r_TID => in_r_TID,
        in_r_TDEST => in_r_TDEST,
        in_r_TUSER => in_r_TUSER,
        in_r_TLAST => in_r_TLAST,
        c_V_data_V_din => MatMul_U0_c_V_data_V_din,
        c_V_data_V_full_n => pipe_V_data_V_full_n,
        c_V_data_V_write => MatMul_U0_c_V_data_V_write,
        c_V_id_V_din => MatMul_U0_c_V_id_V_din,
        c_V_id_V_full_n => pipe_V_id_V_full_n,
        c_V_id_V_write => MatMul_U0_c_V_id_V_write,
        c_V_dest_V_din => MatMul_U0_c_V_dest_V_din,
        c_V_dest_V_full_n => pipe_V_dest_V_full_n,
        c_V_dest_V_write => MatMul_U0_c_V_dest_V_write,
        c_V_user_V_din => MatMul_U0_c_V_user_V_din,
        c_V_user_V_full_n => pipe_V_user_V_full_n,
        c_V_user_V_write => MatMul_U0_c_V_user_V_write,
        c_V_last_V_din => MatMul_U0_c_V_last_V_din,
        c_V_last_V_full_n => pipe_V_last_V_full_n,
        c_V_last_V_write => MatMul_U0_c_V_last_V_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        in_r_TVALID => in_r_TVALID,
        in_r_TREADY => MatMul_U0_in_r_TREADY,
        ap_done => MatMul_U0_ap_done,
        ap_ready => MatMul_U0_ap_ready,
        ap_idle => MatMul_U0_ap_idle,
        ap_continue => MatMul_U0_ap_continue);

    AddBias_U0 : component AddBias
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => AddBias_U0_ap_start,
        ap_done => AddBias_U0_ap_done,
        ap_continue => AddBias_U0_ap_continue,
        ap_idle => AddBias_U0_ap_idle,
        ap_ready => AddBias_U0_ap_ready,
        in_V_data_V_dout => pipe_V_data_V_dout,
        in_V_data_V_empty_n => pipe_V_data_V_empty_n,
        in_V_data_V_read => AddBias_U0_in_V_data_V_read,
        in_V_id_V_dout => pipe_V_id_V_dout,
        in_V_id_V_empty_n => pipe_V_id_V_empty_n,
        in_V_id_V_read => AddBias_U0_in_V_id_V_read,
        in_V_dest_V_dout => pipe_V_dest_V_dout,
        in_V_dest_V_empty_n => pipe_V_dest_V_empty_n,
        in_V_dest_V_read => AddBias_U0_in_V_dest_V_read,
        in_V_user_V_dout => pipe_V_user_V_dout,
        in_V_user_V_empty_n => pipe_V_user_V_empty_n,
        in_V_user_V_read => AddBias_U0_in_V_user_V_read,
        in_V_last_V_dout => pipe_V_last_V_dout,
        in_V_last_V_empty_n => pipe_V_last_V_empty_n,
        in_V_last_V_read => AddBias_U0_in_V_last_V_read,
        out_V_data_V_din => AddBias_U0_out_V_data_V_din,
        out_V_data_V_full_n => out_V_data_V_full_n,
        out_V_data_V_write => AddBias_U0_out_V_data_V_write,
        out_V_id_V_din => AddBias_U0_out_V_id_V_din,
        out_V_id_V_full_n => out_V_id_V_full_n,
        out_V_id_V_write => AddBias_U0_out_V_id_V_write,
        out_V_dest_V_din => AddBias_U0_out_V_dest_V_din,
        out_V_dest_V_full_n => out_V_dest_V_full_n,
        out_V_dest_V_write => AddBias_U0_out_V_dest_V_write,
        out_V_user_V_din => AddBias_U0_out_V_user_V_din,
        out_V_user_V_full_n => out_V_user_V_full_n,
        out_V_user_V_write => AddBias_U0_out_V_user_V_write,
        out_V_last_V_din => AddBias_U0_out_V_last_V_din,
        out_V_last_V_full_n => out_V_last_V_full_n,
        out_V_last_V_write => AddBias_U0_out_V_last_V_write);

    pipe_V_data_V_U : component fifo_w512_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MatMul_U0_c_V_data_V_din,
        if_full_n => pipe_V_data_V_full_n,
        if_write => MatMul_U0_c_V_data_V_write,
        if_dout => pipe_V_data_V_dout,
        if_empty_n => pipe_V_data_V_empty_n,
        if_read => AddBias_U0_in_V_data_V_read);

    pipe_V_id_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MatMul_U0_c_V_id_V_din,
        if_full_n => pipe_V_id_V_full_n,
        if_write => MatMul_U0_c_V_id_V_write,
        if_dout => pipe_V_id_V_dout,
        if_empty_n => pipe_V_id_V_empty_n,
        if_read => AddBias_U0_in_V_id_V_read);

    pipe_V_dest_V_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MatMul_U0_c_V_dest_V_din,
        if_full_n => pipe_V_dest_V_full_n,
        if_write => MatMul_U0_c_V_dest_V_write,
        if_dout => pipe_V_dest_V_dout,
        if_empty_n => pipe_V_dest_V_empty_n,
        if_read => AddBias_U0_in_V_dest_V_read);

    pipe_V_user_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MatMul_U0_c_V_user_V_din,
        if_full_n => pipe_V_user_V_full_n,
        if_write => MatMul_U0_c_V_user_V_write,
        if_dout => pipe_V_user_V_dout,
        if_empty_n => pipe_V_user_V_empty_n,
        if_read => AddBias_U0_in_V_user_V_read);

    pipe_V_last_V_U : component fifo_w1_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => MatMul_U0_c_V_last_V_din,
        if_full_n => pipe_V_last_V_full_n,
        if_write => MatMul_U0_c_V_last_V_write,
        if_dout => pipe_V_last_V_dout,
        if_empty_n => pipe_V_last_V_empty_n,
        if_read => AddBias_U0_in_V_last_V_read);

    start_for_AddBias_U0_U : component start_for_AddBias_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_AddBias_U0_din,
        if_full_n => start_for_AddBias_U0_full_n,
        if_write => MatMul_U0_start_write,
        if_dout => start_for_AddBias_U0_dout,
        if_empty_n => start_for_AddBias_U0_empty_n,
        if_read => AddBias_U0_ap_ready);





    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    AddBias_U0_ap_continue <= ap_continue;
    AddBias_U0_ap_start <= start_for_AddBias_U0_empty_n;
    AddBias_U0_start_full_n <= ap_const_logic_1;
    AddBias_U0_start_write <= ap_const_logic_0;
    MatMul_U0_ap_continue <= ap_const_logic_1;
    MatMul_U0_ap_start <= real_start;
    ap_done <= AddBias_U0_ap_done;
    ap_idle <= (MatMul_U0_ap_idle and AddBias_U0_ap_idle);
    ap_ready <= internal_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= AddBias_U0_ap_done;
    ap_sync_ready <= MatMul_U0_ap_ready;
    in_r_TREADY <= MatMul_U0_in_r_TREADY;
    internal_ap_ready <= ap_sync_ready;
    out_V_data_V_din <= AddBias_U0_out_V_data_V_din;
    out_V_data_V_write <= AddBias_U0_out_V_data_V_write;
    out_V_dest_V_din <= AddBias_U0_out_V_dest_V_din;
    out_V_dest_V_write <= AddBias_U0_out_V_dest_V_write;
    out_V_id_V_din <= AddBias_U0_out_V_id_V_din;
    out_V_id_V_write <= AddBias_U0_out_V_id_V_write;
    out_V_last_V_din <= AddBias_U0_out_V_last_V_din;
    out_V_last_V_write <= AddBias_U0_out_V_last_V_write;
    out_V_user_V_din <= AddBias_U0_out_V_user_V_din;
    out_V_user_V_write <= AddBias_U0_out_V_user_V_write;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_for_AddBias_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
