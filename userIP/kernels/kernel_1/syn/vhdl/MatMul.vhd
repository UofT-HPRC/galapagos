-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MatMul is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
    in_r_TID : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TDEST : IN STD_LOGIC_VECTOR (7 downto 0);
    in_r_TUSER : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    c_V_data_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    c_V_data_V_full_n : IN STD_LOGIC;
    c_V_data_V_write : OUT STD_LOGIC;
    c_V_id_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_V_id_V_full_n : IN STD_LOGIC;
    c_V_id_V_write : OUT STD_LOGIC;
    c_V_dest_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    c_V_dest_V_full_n : IN STD_LOGIC;
    c_V_dest_V_write : OUT STD_LOGIC;
    c_V_user_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    c_V_user_V_full_n : IN STD_LOGIC;
    c_V_user_V_write : OUT STD_LOGIC;
    c_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    c_V_last_V_full_n : IN STD_LOGIC;
    c_V_last_V_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of MatMul is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv512_lc_2 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal ReadB_U0_ap_start : STD_LOGIC;
    signal ReadB_U0_start_full_n : STD_LOGIC;
    signal ReadB_U0_ap_done : STD_LOGIC;
    signal ReadB_U0_ap_continue : STD_LOGIC;
    signal ReadB_U0_ap_idle : STD_LOGIC;
    signal ReadB_U0_ap_ready : STD_LOGIC;
    signal ReadB_U0_start_out : STD_LOGIC;
    signal ReadB_U0_start_write : STD_LOGIC;
    signal ReadB_U0_in_r_TREADY : STD_LOGIC;
    signal ReadB_U0_b_pipes_1_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal ReadB_U0_b_pipes_1_V_V_write : STD_LOGIC;
    signal ReadB_U0_b_pipes_2_V_V_din : STD_LOGIC_VECTOR (255 downto 0);
    signal ReadB_U0_b_pipes_2_V_V_write : STD_LOGIC;
    signal ReadB_U0_N_pipes_0_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadB_U0_N_pipes_0_V_V_write : STD_LOGIC;
    signal ReadB_U0_N_pipes_1_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadB_U0_N_pipes_1_V_V_write : STD_LOGIC;
    signal ReadB_U0_N_pipes_2_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal ReadB_U0_N_pipes_2_V_V_write : STD_LOGIC;
    signal TILE125_U0_N_in_V_V2_read : STD_LOGIC;
    signal TILE125_U0_b_in_1_V_V_read : STD_LOGIC;
    signal TILE125_U0_b_in_2_V_V_read : STD_LOGIC;
    signal TILE125_U0_c_out_1_V_V_din : STD_LOGIC_VECTOR (31 downto 0);
    signal TILE125_U0_c_out_1_V_V_write : STD_LOGIC;
    signal TILE125_U0_c_out_2_V_V7_din : STD_LOGIC_VECTOR (31 downto 0);
    signal TILE125_U0_c_out_2_V_V7_write : STD_LOGIC;
    signal TILE125_U0_ap_start : STD_LOGIC;
    signal TILE125_U0_ap_done : STD_LOGIC;
    signal TILE125_U0_ap_ready : STD_LOGIC;
    signal TILE125_U0_ap_idle : STD_LOGIC;
    signal TILE125_U0_ap_continue : STD_LOGIC;
    signal ConvertWidthC_U0_ap_start : STD_LOGIC;
    signal ConvertWidthC_U0_ap_done : STD_LOGIC;
    signal ConvertWidthC_U0_ap_continue : STD_LOGIC;
    signal ConvertWidthC_U0_ap_idle : STD_LOGIC;
    signal ConvertWidthC_U0_ap_ready : STD_LOGIC;
    signal ConvertWidthC_U0_N_pipe_0_V_V_read : STD_LOGIC;
    signal ConvertWidthC_U0_c_pipes_0_V_V_read : STD_LOGIC;
    signal ConvertWidthC_U0_c_pipes_1_V_V_read : STD_LOGIC;
    signal ConvertWidthC_U0_out_V_V_din : STD_LOGIC_VECTOR (63 downto 0);
    signal ConvertWidthC_U0_out_V_V_write : STD_LOGIC;
    signal WriteC126_U0_ap_start : STD_LOGIC;
    signal WriteC126_U0_ap_done : STD_LOGIC;
    signal WriteC126_U0_ap_continue : STD_LOGIC;
    signal WriteC126_U0_ap_idle : STD_LOGIC;
    signal WriteC126_U0_ap_ready : STD_LOGIC;
    signal WriteC126_U0_N_pipe_V_V1_read : STD_LOGIC;
    signal WriteC126_U0_in_V_V_read : STD_LOGIC;
    signal WriteC126_U0_out_V_data_V_din : STD_LOGIC_VECTOR (511 downto 0);
    signal WriteC126_U0_out_V_data_V_write : STD_LOGIC;
    signal WriteC126_U0_out_V_id_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal WriteC126_U0_out_V_id_V_write : STD_LOGIC;
    signal WriteC126_U0_out_V_dest_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal WriteC126_U0_out_V_dest_V_write : STD_LOGIC;
    signal WriteC126_U0_out_V_user_V_din : STD_LOGIC_VECTOR (15 downto 0);
    signal WriteC126_U0_out_V_user_V_write : STD_LOGIC;
    signal WriteC126_U0_out_V_last_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal WriteC126_U0_out_V_last_V_write : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal b_pipes_1_0_V_V_full_n : STD_LOGIC;
    signal b_pipes_1_0_V_V_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal b_pipes_1_0_V_V_empty_n : STD_LOGIC;
    signal b_pipes_2_0_V_V_full_n : STD_LOGIC;
    signal b_pipes_2_0_V_V_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal b_pipes_2_0_V_V_empty_n : STD_LOGIC;
    signal N_pipes_0_V_V_full_n : STD_LOGIC;
    signal N_pipes_0_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal N_pipes_0_V_V_empty_n : STD_LOGIC;
    signal N_pipes_1_V_V_full_n : STD_LOGIC;
    signal N_pipes_1_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal N_pipes_1_V_V_empty_n : STD_LOGIC;
    signal N_pipes_2_V_V_full_n : STD_LOGIC;
    signal N_pipes_2_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal N_pipes_2_V_V_empty_n : STD_LOGIC;
    signal c_pipes_0_0_V_V_full_n : STD_LOGIC;
    signal c_pipes_0_0_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_pipes_0_0_V_V_empty_n : STD_LOGIC;
    signal c_pipes_0_1_V_V_full_n : STD_LOGIC;
    signal c_pipes_0_1_V_V_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal c_pipes_0_1_V_V_empty_n : STD_LOGIC;
    signal conv_pipe_V_V_full_n : STD_LOGIC;
    signal conv_pipe_V_V_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_pipe_V_V_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_TILE125_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_TILE125_U0_full_n : STD_LOGIC;
    signal start_for_TILE125_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_TILE125_U0_empty_n : STD_LOGIC;
    signal start_for_ConvertWidthC_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ConvertWidthC_U0_full_n : STD_LOGIC;
    signal start_for_ConvertWidthC_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ConvertWidthC_U0_empty_n : STD_LOGIC;
    signal start_for_WriteC126_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_WriteC126_U0_full_n : STD_LOGIC;
    signal start_for_WriteC126_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_WriteC126_U0_empty_n : STD_LOGIC;
    signal TILE125_U0_start_full_n : STD_LOGIC;
    signal TILE125_U0_start_write : STD_LOGIC;
    signal ConvertWidthC_U0_start_full_n : STD_LOGIC;
    signal ConvertWidthC_U0_start_write : STD_LOGIC;
    signal WriteC126_U0_start_full_n : STD_LOGIC;
    signal WriteC126_U0_start_write : STD_LOGIC;

    component ReadB IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        in_r_TDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        in_r_TVALID : IN STD_LOGIC;
        in_r_TREADY : OUT STD_LOGIC;
        in_r_TID : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TDEST : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_TUSER : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        b_pipes_1_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        b_pipes_1_V_V_full_n : IN STD_LOGIC;
        b_pipes_1_V_V_write : OUT STD_LOGIC;
        b_pipes_2_V_V_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        b_pipes_2_V_V_full_n : IN STD_LOGIC;
        b_pipes_2_V_V_write : OUT STD_LOGIC;
        N_pipes_0_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        N_pipes_0_V_V_full_n : IN STD_LOGIC;
        N_pipes_0_V_V_write : OUT STD_LOGIC;
        N_pipes_1_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        N_pipes_1_V_V_full_n : IN STD_LOGIC;
        N_pipes_1_V_V_write : OUT STD_LOGIC;
        N_pipes_2_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        N_pipes_2_V_V_full_n : IN STD_LOGIC;
        N_pipes_2_V_V_write : OUT STD_LOGIC );
    end component;


    component TILE125 IS
    port (
        N_in_V_V2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        N_in_V_V2_empty_n : IN STD_LOGIC;
        N_in_V_V2_read : OUT STD_LOGIC;
        b_in_1_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        b_in_1_V_V_empty_n : IN STD_LOGIC;
        b_in_1_V_V_read : OUT STD_LOGIC;
        b_in_2_V_V_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        b_in_2_V_V_empty_n : IN STD_LOGIC;
        b_in_2_V_V_read : OUT STD_LOGIC;
        c_out_1_V_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_out_1_V_V_full_n : IN STD_LOGIC;
        c_out_1_V_V_write : OUT STD_LOGIC;
        c_out_2_V_V7_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        c_out_2_V_V7_full_n : IN STD_LOGIC;
        c_out_2_V_V7_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component ConvertWidthC IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        N_pipe_0_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        N_pipe_0_V_V_empty_n : IN STD_LOGIC;
        N_pipe_0_V_V_read : OUT STD_LOGIC;
        c_pipes_0_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_pipes_0_V_V_empty_n : IN STD_LOGIC;
        c_pipes_0_V_V_read : OUT STD_LOGIC;
        c_pipes_1_V_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        c_pipes_1_V_V_empty_n : IN STD_LOGIC;
        c_pipes_1_V_V_read : OUT STD_LOGIC;
        out_V_V_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        out_V_V_full_n : IN STD_LOGIC;
        out_V_V_write : OUT STD_LOGIC );
    end component;


    component WriteC126 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        N_pipe_V_V1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        N_pipe_V_V1_empty_n : IN STD_LOGIC;
        N_pipe_V_V1_read : OUT STD_LOGIC;
        in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        in_V_V_empty_n : IN STD_LOGIC;
        in_V_V_read : OUT STD_LOGIC;
        out_V_data_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        out_V_data_V_full_n : IN STD_LOGIC;
        out_V_data_V_write : OUT STD_LOGIC;
        out_V_id_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_V_id_V_full_n : IN STD_LOGIC;
        out_V_id_V_write : OUT STD_LOGIC;
        out_V_dest_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        out_V_dest_V_full_n : IN STD_LOGIC;
        out_V_dest_V_write : OUT STD_LOGIC;
        out_V_user_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_V_user_V_full_n : IN STD_LOGIC;
        out_V_user_V_write : OUT STD_LOGIC;
        out_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        out_V_last_V_full_n : IN STD_LOGIC;
        out_V_last_V_write : OUT STD_LOGIC );
    end component;


    component fifo_w256_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w64_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_TILE125_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ConvertWidthC_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_WriteC126_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    ReadB_U0 : component ReadB
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ReadB_U0_ap_start,
        start_full_n => ReadB_U0_start_full_n,
        ap_done => ReadB_U0_ap_done,
        ap_continue => ReadB_U0_ap_continue,
        ap_idle => ReadB_U0_ap_idle,
        ap_ready => ReadB_U0_ap_ready,
        start_out => ReadB_U0_start_out,
        start_write => ReadB_U0_start_write,
        in_r_TDATA => in_r_TDATA,
        in_r_TVALID => in_r_TVALID,
        in_r_TREADY => ReadB_U0_in_r_TREADY,
        in_r_TID => in_r_TID,
        in_r_TDEST => in_r_TDEST,
        in_r_TUSER => in_r_TUSER,
        in_r_TLAST => in_r_TLAST,
        b_pipes_1_V_V_din => ReadB_U0_b_pipes_1_V_V_din,
        b_pipes_1_V_V_full_n => b_pipes_1_0_V_V_full_n,
        b_pipes_1_V_V_write => ReadB_U0_b_pipes_1_V_V_write,
        b_pipes_2_V_V_din => ReadB_U0_b_pipes_2_V_V_din,
        b_pipes_2_V_V_full_n => b_pipes_2_0_V_V_full_n,
        b_pipes_2_V_V_write => ReadB_U0_b_pipes_2_V_V_write,
        N_pipes_0_V_V_din => ReadB_U0_N_pipes_0_V_V_din,
        N_pipes_0_V_V_full_n => N_pipes_0_V_V_full_n,
        N_pipes_0_V_V_write => ReadB_U0_N_pipes_0_V_V_write,
        N_pipes_1_V_V_din => ReadB_U0_N_pipes_1_V_V_din,
        N_pipes_1_V_V_full_n => N_pipes_1_V_V_full_n,
        N_pipes_1_V_V_write => ReadB_U0_N_pipes_1_V_V_write,
        N_pipes_2_V_V_din => ReadB_U0_N_pipes_2_V_V_din,
        N_pipes_2_V_V_full_n => N_pipes_2_V_V_full_n,
        N_pipes_2_V_V_write => ReadB_U0_N_pipes_2_V_V_write);

    TILE125_U0 : component TILE125
    port map (
        N_in_V_V2_dout => N_pipes_2_V_V_dout,
        N_in_V_V2_empty_n => N_pipes_2_V_V_empty_n,
        N_in_V_V2_read => TILE125_U0_N_in_V_V2_read,
        b_in_1_V_V_dout => b_pipes_1_0_V_V_dout,
        b_in_1_V_V_empty_n => b_pipes_1_0_V_V_empty_n,
        b_in_1_V_V_read => TILE125_U0_b_in_1_V_V_read,
        b_in_2_V_V_dout => b_pipes_2_0_V_V_dout,
        b_in_2_V_V_empty_n => b_pipes_2_0_V_V_empty_n,
        b_in_2_V_V_read => TILE125_U0_b_in_2_V_V_read,
        c_out_1_V_V_din => TILE125_U0_c_out_1_V_V_din,
        c_out_1_V_V_full_n => c_pipes_0_0_V_V_full_n,
        c_out_1_V_V_write => TILE125_U0_c_out_1_V_V_write,
        c_out_2_V_V7_din => TILE125_U0_c_out_2_V_V7_din,
        c_out_2_V_V7_full_n => c_pipes_0_1_V_V_full_n,
        c_out_2_V_V7_write => TILE125_U0_c_out_2_V_V7_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => TILE125_U0_ap_start,
        ap_done => TILE125_U0_ap_done,
        ap_ready => TILE125_U0_ap_ready,
        ap_idle => TILE125_U0_ap_idle,
        ap_continue => TILE125_U0_ap_continue);

    ConvertWidthC_U0 : component ConvertWidthC
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ConvertWidthC_U0_ap_start,
        ap_done => ConvertWidthC_U0_ap_done,
        ap_continue => ConvertWidthC_U0_ap_continue,
        ap_idle => ConvertWidthC_U0_ap_idle,
        ap_ready => ConvertWidthC_U0_ap_ready,
        N_pipe_0_V_V_dout => N_pipes_0_V_V_dout,
        N_pipe_0_V_V_empty_n => N_pipes_0_V_V_empty_n,
        N_pipe_0_V_V_read => ConvertWidthC_U0_N_pipe_0_V_V_read,
        c_pipes_0_V_V_dout => c_pipes_0_0_V_V_dout,
        c_pipes_0_V_V_empty_n => c_pipes_0_0_V_V_empty_n,
        c_pipes_0_V_V_read => ConvertWidthC_U0_c_pipes_0_V_V_read,
        c_pipes_1_V_V_dout => c_pipes_0_1_V_V_dout,
        c_pipes_1_V_V_empty_n => c_pipes_0_1_V_V_empty_n,
        c_pipes_1_V_V_read => ConvertWidthC_U0_c_pipes_1_V_V_read,
        out_V_V_din => ConvertWidthC_U0_out_V_V_din,
        out_V_V_full_n => conv_pipe_V_V_full_n,
        out_V_V_write => ConvertWidthC_U0_out_V_V_write);

    WriteC126_U0 : component WriteC126
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => WriteC126_U0_ap_start,
        ap_done => WriteC126_U0_ap_done,
        ap_continue => WriteC126_U0_ap_continue,
        ap_idle => WriteC126_U0_ap_idle,
        ap_ready => WriteC126_U0_ap_ready,
        N_pipe_V_V1_dout => N_pipes_1_V_V_dout,
        N_pipe_V_V1_empty_n => N_pipes_1_V_V_empty_n,
        N_pipe_V_V1_read => WriteC126_U0_N_pipe_V_V1_read,
        in_V_V_dout => conv_pipe_V_V_dout,
        in_V_V_empty_n => conv_pipe_V_V_empty_n,
        in_V_V_read => WriteC126_U0_in_V_V_read,
        out_V_data_V_din => WriteC126_U0_out_V_data_V_din,
        out_V_data_V_full_n => c_V_data_V_full_n,
        out_V_data_V_write => WriteC126_U0_out_V_data_V_write,
        out_V_id_V_din => WriteC126_U0_out_V_id_V_din,
        out_V_id_V_full_n => c_V_id_V_full_n,
        out_V_id_V_write => WriteC126_U0_out_V_id_V_write,
        out_V_dest_V_din => WriteC126_U0_out_V_dest_V_din,
        out_V_dest_V_full_n => c_V_dest_V_full_n,
        out_V_dest_V_write => WriteC126_U0_out_V_dest_V_write,
        out_V_user_V_din => WriteC126_U0_out_V_user_V_din,
        out_V_user_V_full_n => c_V_user_V_full_n,
        out_V_user_V_write => WriteC126_U0_out_V_user_V_write,
        out_V_last_V_din => WriteC126_U0_out_V_last_V_din,
        out_V_last_V_full_n => c_V_last_V_full_n,
        out_V_last_V_write => WriteC126_U0_out_V_last_V_write);

    b_pipes_1_0_V_V_U : component fifo_w256_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadB_U0_b_pipes_1_V_V_din,
        if_full_n => b_pipes_1_0_V_V_full_n,
        if_write => ReadB_U0_b_pipes_1_V_V_write,
        if_dout => b_pipes_1_0_V_V_dout,
        if_empty_n => b_pipes_1_0_V_V_empty_n,
        if_read => TILE125_U0_b_in_1_V_V_read);

    b_pipes_2_0_V_V_U : component fifo_w256_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadB_U0_b_pipes_2_V_V_din,
        if_full_n => b_pipes_2_0_V_V_full_n,
        if_write => ReadB_U0_b_pipes_2_V_V_write,
        if_dout => b_pipes_2_0_V_V_dout,
        if_empty_n => b_pipes_2_0_V_V_empty_n,
        if_read => TILE125_U0_b_in_2_V_V_read);

    N_pipes_0_V_V_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadB_U0_N_pipes_0_V_V_din,
        if_full_n => N_pipes_0_V_V_full_n,
        if_write => ReadB_U0_N_pipes_0_V_V_write,
        if_dout => N_pipes_0_V_V_dout,
        if_empty_n => N_pipes_0_V_V_empty_n,
        if_read => ConvertWidthC_U0_N_pipe_0_V_V_read);

    N_pipes_1_V_V_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadB_U0_N_pipes_1_V_V_din,
        if_full_n => N_pipes_1_V_V_full_n,
        if_write => ReadB_U0_N_pipes_1_V_V_write,
        if_dout => N_pipes_1_V_V_dout,
        if_empty_n => N_pipes_1_V_V_empty_n,
        if_read => WriteC126_U0_N_pipe_V_V1_read);

    N_pipes_2_V_V_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ReadB_U0_N_pipes_2_V_V_din,
        if_full_n => N_pipes_2_V_V_full_n,
        if_write => ReadB_U0_N_pipes_2_V_V_write,
        if_dout => N_pipes_2_V_V_dout,
        if_empty_n => N_pipes_2_V_V_empty_n,
        if_read => TILE125_U0_N_in_V_V2_read);

    c_pipes_0_0_V_V_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => TILE125_U0_c_out_1_V_V_din,
        if_full_n => c_pipes_0_0_V_V_full_n,
        if_write => TILE125_U0_c_out_1_V_V_write,
        if_dout => c_pipes_0_0_V_V_dout,
        if_empty_n => c_pipes_0_0_V_V_empty_n,
        if_read => ConvertWidthC_U0_c_pipes_0_V_V_read);

    c_pipes_0_1_V_V_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => TILE125_U0_c_out_2_V_V7_din,
        if_full_n => c_pipes_0_1_V_V_full_n,
        if_write => TILE125_U0_c_out_2_V_V7_write,
        if_dout => c_pipes_0_1_V_V_dout,
        if_empty_n => c_pipes_0_1_V_V_empty_n,
        if_read => ConvertWidthC_U0_c_pipes_1_V_V_read);

    conv_pipe_V_V_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ConvertWidthC_U0_out_V_V_din,
        if_full_n => conv_pipe_V_V_full_n,
        if_write => ConvertWidthC_U0_out_V_V_write,
        if_dout => conv_pipe_V_V_dout,
        if_empty_n => conv_pipe_V_V_empty_n,
        if_read => WriteC126_U0_in_V_V_read);

    start_for_TILE125_U0_U : component start_for_TILE125_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_TILE125_U0_din,
        if_full_n => start_for_TILE125_U0_full_n,
        if_write => ReadB_U0_start_write,
        if_dout => start_for_TILE125_U0_dout,
        if_empty_n => start_for_TILE125_U0_empty_n,
        if_read => TILE125_U0_ap_ready);

    start_for_ConvertWidthC_U0_U : component start_for_ConvertWidthC_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ConvertWidthC_U0_din,
        if_full_n => start_for_ConvertWidthC_U0_full_n,
        if_write => ReadB_U0_start_write,
        if_dout => start_for_ConvertWidthC_U0_dout,
        if_empty_n => start_for_ConvertWidthC_U0_empty_n,
        if_read => ConvertWidthC_U0_ap_ready);

    start_for_WriteC126_U0_U : component start_for_WriteC126_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_WriteC126_U0_din,
        if_full_n => start_for_WriteC126_U0_full_n,
        if_write => ReadB_U0_start_write,
        if_dout => start_for_WriteC126_U0_dout,
        if_empty_n => start_for_WriteC126_U0_empty_n,
        if_read => WriteC126_U0_ap_ready);





    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    ConvertWidthC_U0_ap_continue <= ap_const_logic_1;
    ConvertWidthC_U0_ap_start <= start_for_ConvertWidthC_U0_empty_n;
    ConvertWidthC_U0_start_full_n <= ap_const_logic_1;
    ConvertWidthC_U0_start_write <= ap_const_logic_0;
    ReadB_U0_ap_continue <= ap_const_logic_1;
    ReadB_U0_ap_start <= real_start;
    ReadB_U0_start_full_n <= (start_for_WriteC126_U0_full_n and start_for_TILE125_U0_full_n and start_for_ConvertWidthC_U0_full_n);
    TILE125_U0_ap_continue <= ap_const_logic_1;
    TILE125_U0_ap_start <= start_for_TILE125_U0_empty_n;
    TILE125_U0_start_full_n <= ap_const_logic_1;
    TILE125_U0_start_write <= ap_const_logic_0;
    WriteC126_U0_ap_continue <= ap_continue;
    WriteC126_U0_ap_start <= start_for_WriteC126_U0_empty_n;
    WriteC126_U0_start_full_n <= ap_const_logic_1;
    WriteC126_U0_start_write <= ap_const_logic_0;
    ap_done <= WriteC126_U0_ap_done;
    ap_idle <= (WriteC126_U0_ap_idle and TILE125_U0_ap_idle and ReadB_U0_ap_idle and ConvertWidthC_U0_ap_idle);
    ap_ready <= internal_ap_ready;
    ap_sync_continue <= ap_continue;
    ap_sync_done <= WriteC126_U0_ap_done;
    ap_sync_ready <= ReadB_U0_ap_ready;
    c_V_data_V_din <= WriteC126_U0_out_V_data_V_din;
    c_V_data_V_write <= WriteC126_U0_out_V_data_V_write;
    c_V_dest_V_din <= WriteC126_U0_out_V_dest_V_din;
    c_V_dest_V_write <= WriteC126_U0_out_V_dest_V_write;
    c_V_id_V_din <= WriteC126_U0_out_V_id_V_din;
    c_V_id_V_write <= WriteC126_U0_out_V_id_V_write;
    c_V_last_V_din <= WriteC126_U0_out_V_last_V_din;
    c_V_last_V_write <= WriteC126_U0_out_V_last_V_write;
    c_V_user_V_din <= WriteC126_U0_out_V_user_V_din;
    c_V_user_V_write <= WriteC126_U0_out_V_user_V_write;
    in_r_TREADY <= ReadB_U0_in_r_TREADY;
    internal_ap_ready <= ap_sync_ready;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_for_ConvertWidthC_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_TILE125_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_WriteC126_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
