// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ReadA123138 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        N_pipe_in_V_V5_dout,
        N_pipe_in_V_V5_empty_n,
        N_pipe_in_V_V5_read,
        a_pipes_1_V_V17_din,
        a_pipes_1_V_V17_full_n,
        a_pipes_1_V_V17_write,
        a_pipes_2_V_V22_din,
        a_pipes_2_V_V22_full_n,
        a_pipes_2_V_V22_write,
        a_pipes_3_V_V27_din,
        a_pipes_3_V_V27_full_n,
        a_pipes_3_V_V27_write,
        a_pipes_4_V_V32_din,
        a_pipes_4_V_V32_full_n,
        a_pipes_4_V_V32_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] N_pipe_in_V_V5_dout;
input   N_pipe_in_V_V5_empty_n;
output   N_pipe_in_V_V5_read;
output  [255:0] a_pipes_1_V_V17_din;
input   a_pipes_1_V_V17_full_n;
output   a_pipes_1_V_V17_write;
output  [255:0] a_pipes_2_V_V22_din;
input   a_pipes_2_V_V22_full_n;
output   a_pipes_2_V_V22_write;
output  [255:0] a_pipes_3_V_V27_din;
input   a_pipes_3_V_V27_full_n;
output   a_pipes_3_V_V27_write;
output  [255:0] a_pipes_4_V_V32_din;
input   a_pipes_4_V_V32_full_n;
output   a_pipes_4_V_V32_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg N_pipe_in_V_V5_read;
reg a_pipes_1_V_V17_write;
reg a_pipes_2_V_V22_write;
reg a_pipes_3_V_V27_write;
reg a_pipes_4_V_V32_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] weights_0_5_0_address0;
reg    weights_0_5_0_ce0;
wire   [31:0] weights_0_5_0_q0;
wire   [9:0] weights_0_5_1_address0;
reg    weights_0_5_1_ce0;
wire   [31:0] weights_0_5_1_q0;
wire   [9:0] weights_0_5_2_address0;
reg    weights_0_5_2_ce0;
wire   [31:0] weights_0_5_2_q0;
wire   [9:0] weights_0_5_3_address0;
reg    weights_0_5_3_ce0;
wire   [31:0] weights_0_5_3_q0;
wire   [9:0] weights_0_5_4_address0;
reg    weights_0_5_4_ce0;
wire   [31:0] weights_0_5_4_q0;
wire   [9:0] weights_0_5_5_address0;
reg    weights_0_5_5_ce0;
wire   [31:0] weights_0_5_5_q0;
wire   [9:0] weights_0_5_6_address0;
reg    weights_0_5_6_ce0;
wire   [31:0] weights_0_5_6_q0;
wire   [9:0] weights_0_5_7_address0;
reg    weights_0_5_7_ce0;
wire   [31:0] weights_0_5_7_q0;
wire   [9:0] weights_0_5_8_address0;
reg    weights_0_5_8_ce0;
wire   [31:0] weights_0_5_8_q0;
wire   [9:0] weights_0_5_9_address0;
reg    weights_0_5_9_ce0;
wire   [31:0] weights_0_5_9_q0;
wire   [9:0] weights_0_5_10_address0;
reg    weights_0_5_10_ce0;
wire   [31:0] weights_0_5_10_q0;
wire   [9:0] weights_0_5_11_address0;
reg    weights_0_5_11_ce0;
wire   [31:0] weights_0_5_11_q0;
wire   [9:0] weights_0_5_12_address0;
reg    weights_0_5_12_ce0;
wire   [31:0] weights_0_5_12_q0;
wire   [9:0] weights_0_5_13_address0;
reg    weights_0_5_13_ce0;
wire   [31:0] weights_0_5_13_q0;
wire   [9:0] weights_0_5_14_address0;
reg    weights_0_5_14_ce0;
wire   [31:0] weights_0_5_14_q0;
wire   [9:0] weights_0_5_15_address0;
reg    weights_0_5_15_ce0;
wire   [31:0] weights_0_5_15_q0;
wire   [9:0] weights_0_5_16_address0;
reg    weights_0_5_16_ce0;
wire   [31:0] weights_0_5_16_q0;
wire   [9:0] weights_0_5_17_address0;
reg    weights_0_5_17_ce0;
wire   [31:0] weights_0_5_17_q0;
wire   [9:0] weights_0_5_18_address0;
reg    weights_0_5_18_ce0;
wire   [31:0] weights_0_5_18_q0;
wire   [9:0] weights_0_5_19_address0;
reg    weights_0_5_19_ce0;
wire   [31:0] weights_0_5_19_q0;
wire   [9:0] weights_0_5_20_address0;
reg    weights_0_5_20_ce0;
wire   [31:0] weights_0_5_20_q0;
wire   [9:0] weights_0_5_21_address0;
reg    weights_0_5_21_ce0;
wire   [31:0] weights_0_5_21_q0;
wire   [9:0] weights_0_5_22_address0;
reg    weights_0_5_22_ce0;
wire   [31:0] weights_0_5_22_q0;
wire   [9:0] weights_0_5_23_address0;
reg    weights_0_5_23_ce0;
wire   [31:0] weights_0_5_23_q0;
wire   [9:0] weights_0_5_24_address0;
reg    weights_0_5_24_ce0;
wire   [31:0] weights_0_5_24_q0;
wire   [9:0] weights_0_5_25_address0;
reg    weights_0_5_25_ce0;
wire   [31:0] weights_0_5_25_q0;
wire   [9:0] weights_0_5_26_address0;
reg    weights_0_5_26_ce0;
wire   [31:0] weights_0_5_26_q0;
wire   [9:0] weights_0_5_27_address0;
reg    weights_0_5_27_ce0;
wire   [31:0] weights_0_5_27_q0;
wire   [9:0] weights_0_5_28_address0;
reg    weights_0_5_28_ce0;
wire   [31:0] weights_0_5_28_q0;
wire   [9:0] weights_0_5_29_address0;
reg    weights_0_5_29_ce0;
wire   [31:0] weights_0_5_29_q0;
wire   [9:0] weights_0_5_30_address0;
reg    weights_0_5_30_ce0;
wire   [31:0] weights_0_5_30_q0;
wire   [9:0] weights_0_5_31_address0;
reg    weights_0_5_31_ce0;
wire   [31:0] weights_0_5_31_q0;
reg    N_pipe_in_V_V5_blk_n;
reg    a_pipes_1_V_V17_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln25_reg_848;
reg    a_pipes_2_V_V22_blk_n;
reg    a_pipes_3_V_V27_blk_n;
reg    a_pipes_4_V_V32_blk_n;
reg   [41:0] indvar_flatten_reg_644;
reg   [9:0] n_0_reg_655;
wire   [41:0] bound_fu_686_p2;
reg   [41:0] bound_reg_843;
reg    ap_block_state1;
wire   [0:0] icmp_ln25_fu_692_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [41:0] add_ln25_fu_697_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [9:0] n_fu_753_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [63:0] zext_ln32_fu_717_p1;
reg    ap_block_pp0_stage0_01001;
wire   [39:0] tmp_fu_674_p3;
wire   [41:0] p_shl_fu_666_p3;
wire   [41:0] p_shl190_fu_682_p1;
wire   [0:0] icmp_ln27_fu_703_p2;
wire   [9:0] select_ln27_fu_709_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

ReadA123138_weights_0_5_0 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_0_address0),
    .ce0(weights_0_5_0_ce0),
    .q0(weights_0_5_0_q0)
);

ReadA123138_weights_0_5_1 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_1_address0),
    .ce0(weights_0_5_1_ce0),
    .q0(weights_0_5_1_q0)
);

ReadA123138_weights_0_5_2 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_2_address0),
    .ce0(weights_0_5_2_ce0),
    .q0(weights_0_5_2_q0)
);

ReadA123138_weights_0_5_3 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_3_address0),
    .ce0(weights_0_5_3_ce0),
    .q0(weights_0_5_3_q0)
);

ReadA123138_weights_0_5_4 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_4_address0),
    .ce0(weights_0_5_4_ce0),
    .q0(weights_0_5_4_q0)
);

ReadA123138_weights_0_5_5 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_5_address0),
    .ce0(weights_0_5_5_ce0),
    .q0(weights_0_5_5_q0)
);

ReadA123138_weights_0_5_6 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_6_address0),
    .ce0(weights_0_5_6_ce0),
    .q0(weights_0_5_6_q0)
);

ReadA123138_weights_0_5_7 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_7_address0),
    .ce0(weights_0_5_7_ce0),
    .q0(weights_0_5_7_q0)
);

ReadA123138_weights_0_5_8 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_8_address0),
    .ce0(weights_0_5_8_ce0),
    .q0(weights_0_5_8_q0)
);

ReadA123138_weights_0_5_9 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_9_address0),
    .ce0(weights_0_5_9_ce0),
    .q0(weights_0_5_9_q0)
);

ReadA123138_weights_0_5_10 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_10_address0),
    .ce0(weights_0_5_10_ce0),
    .q0(weights_0_5_10_q0)
);

ReadA123138_weights_0_5_11 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_11_address0),
    .ce0(weights_0_5_11_ce0),
    .q0(weights_0_5_11_q0)
);

ReadA123138_weights_0_5_12 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_12_address0),
    .ce0(weights_0_5_12_ce0),
    .q0(weights_0_5_12_q0)
);

ReadA123138_weights_0_5_13 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_13_address0),
    .ce0(weights_0_5_13_ce0),
    .q0(weights_0_5_13_q0)
);

ReadA123138_weights_0_5_14 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_14_address0),
    .ce0(weights_0_5_14_ce0),
    .q0(weights_0_5_14_q0)
);

ReadA123138_weights_0_5_15 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_15_address0),
    .ce0(weights_0_5_15_ce0),
    .q0(weights_0_5_15_q0)
);

ReadA123138_weights_0_5_16 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_16_address0),
    .ce0(weights_0_5_16_ce0),
    .q0(weights_0_5_16_q0)
);

ReadA123138_weights_0_5_17 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_17_address0),
    .ce0(weights_0_5_17_ce0),
    .q0(weights_0_5_17_q0)
);

ReadA123138_weights_0_5_18 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_18_address0),
    .ce0(weights_0_5_18_ce0),
    .q0(weights_0_5_18_q0)
);

ReadA123138_weights_0_5_19 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_19_address0),
    .ce0(weights_0_5_19_ce0),
    .q0(weights_0_5_19_q0)
);

ReadA123138_weights_0_5_20 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_20_address0),
    .ce0(weights_0_5_20_ce0),
    .q0(weights_0_5_20_q0)
);

ReadA123138_weights_0_5_21 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_21_address0),
    .ce0(weights_0_5_21_ce0),
    .q0(weights_0_5_21_q0)
);

ReadA123138_weights_0_5_22 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_22_address0),
    .ce0(weights_0_5_22_ce0),
    .q0(weights_0_5_22_q0)
);

ReadA123138_weights_0_5_23 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_23_address0),
    .ce0(weights_0_5_23_ce0),
    .q0(weights_0_5_23_q0)
);

ReadA123138_weights_0_5_24 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_24_address0),
    .ce0(weights_0_5_24_ce0),
    .q0(weights_0_5_24_q0)
);

ReadA123138_weights_0_5_25 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_25_address0),
    .ce0(weights_0_5_25_ce0),
    .q0(weights_0_5_25_q0)
);

ReadA123138_weights_0_5_26 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_26_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_26_address0),
    .ce0(weights_0_5_26_ce0),
    .q0(weights_0_5_26_q0)
);

ReadA123138_weights_0_5_27 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_27_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_27_address0),
    .ce0(weights_0_5_27_ce0),
    .q0(weights_0_5_27_q0)
);

ReadA123138_weights_0_5_28 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_28_address0),
    .ce0(weights_0_5_28_ce0),
    .q0(weights_0_5_28_q0)
);

ReadA123138_weights_0_5_29 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_29_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_29_address0),
    .ce0(weights_0_5_29_ce0),
    .q0(weights_0_5_29_q0)
);

ReadA123138_weights_0_5_30 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_30_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_30_address0),
    .ce0(weights_0_5_30_ce0),
    .q0(weights_0_5_30_q0)
);

ReadA123138_weights_0_5_31 #(
    .DataWidth( 32 ),
    .AddressRange( 768 ),
    .AddressWidth( 10 ))
weights_0_5_31_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_0_5_31_address0),
    .ce0(weights_0_5_31_ce0),
    .q0(weights_0_5_31_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_in_V_V5_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_in_V_V5_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_692_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_644 <= add_ln25_fu_697_p2;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_in_V_V5_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_644 <= 42'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_fu_692_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_0_reg_655 <= n_fu_753_p2;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_in_V_V5_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_0_reg_655 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_in_V_V5_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_843[41 : 8] <= bound_fu_686_p2[41 : 8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln25_reg_848 <= icmp_ln25_fu_692_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_pipe_in_V_V5_blk_n = N_pipe_in_V_V5_empty_n;
    end else begin
        N_pipe_in_V_V5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_in_V_V5_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_pipe_in_V_V5_read = 1'b1;
    end else begin
        N_pipe_in_V_V5_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_848 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_pipes_1_V_V17_blk_n = a_pipes_1_V_V17_full_n;
    end else begin
        a_pipes_1_V_V17_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_848 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_pipes_1_V_V17_write = 1'b1;
    end else begin
        a_pipes_1_V_V17_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_848 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_pipes_2_V_V22_blk_n = a_pipes_2_V_V22_full_n;
    end else begin
        a_pipes_2_V_V22_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_848 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_pipes_2_V_V22_write = 1'b1;
    end else begin
        a_pipes_2_V_V22_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_848 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_pipes_3_V_V27_blk_n = a_pipes_3_V_V27_full_n;
    end else begin
        a_pipes_3_V_V27_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_848 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_pipes_3_V_V27_write = 1'b1;
    end else begin
        a_pipes_3_V_V27_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln25_reg_848 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_pipes_4_V_V32_blk_n = a_pipes_4_V_V32_full_n;
    end else begin
        a_pipes_4_V_V32_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln25_reg_848 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_pipes_4_V_V32_write = 1'b1;
    end else begin
        a_pipes_4_V_V32_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln25_fu_692_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_0_ce0 = 1'b1;
    end else begin
        weights_0_5_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_10_ce0 = 1'b1;
    end else begin
        weights_0_5_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_11_ce0 = 1'b1;
    end else begin
        weights_0_5_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_12_ce0 = 1'b1;
    end else begin
        weights_0_5_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_13_ce0 = 1'b1;
    end else begin
        weights_0_5_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_14_ce0 = 1'b1;
    end else begin
        weights_0_5_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_15_ce0 = 1'b1;
    end else begin
        weights_0_5_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_16_ce0 = 1'b1;
    end else begin
        weights_0_5_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_17_ce0 = 1'b1;
    end else begin
        weights_0_5_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_18_ce0 = 1'b1;
    end else begin
        weights_0_5_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_19_ce0 = 1'b1;
    end else begin
        weights_0_5_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_1_ce0 = 1'b1;
    end else begin
        weights_0_5_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_20_ce0 = 1'b1;
    end else begin
        weights_0_5_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_21_ce0 = 1'b1;
    end else begin
        weights_0_5_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_22_ce0 = 1'b1;
    end else begin
        weights_0_5_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_23_ce0 = 1'b1;
    end else begin
        weights_0_5_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_24_ce0 = 1'b1;
    end else begin
        weights_0_5_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_25_ce0 = 1'b1;
    end else begin
        weights_0_5_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_26_ce0 = 1'b1;
    end else begin
        weights_0_5_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_27_ce0 = 1'b1;
    end else begin
        weights_0_5_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_28_ce0 = 1'b1;
    end else begin
        weights_0_5_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_29_ce0 = 1'b1;
    end else begin
        weights_0_5_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_2_ce0 = 1'b1;
    end else begin
        weights_0_5_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_30_ce0 = 1'b1;
    end else begin
        weights_0_5_30_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_31_ce0 = 1'b1;
    end else begin
        weights_0_5_31_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_3_ce0 = 1'b1;
    end else begin
        weights_0_5_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_4_ce0 = 1'b1;
    end else begin
        weights_0_5_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_5_ce0 = 1'b1;
    end else begin
        weights_0_5_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_6_ce0 = 1'b1;
    end else begin
        weights_0_5_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_7_ce0 = 1'b1;
    end else begin
        weights_0_5_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_8_ce0 = 1'b1;
    end else begin
        weights_0_5_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        weights_0_5_9_ce0 = 1'b1;
    end else begin
        weights_0_5_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_in_V_V5_empty_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_692_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln25_fu_692_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_pipes_1_V_V17_din = {{{{{{{{weights_0_5_7_q0}, {weights_0_5_6_q0}}, {weights_0_5_5_q0}}, {weights_0_5_4_q0}}, {weights_0_5_3_q0}}, {weights_0_5_2_q0}}, {weights_0_5_1_q0}}, {weights_0_5_0_q0}};

assign a_pipes_2_V_V22_din = {{{{{{{{weights_0_5_15_q0}, {weights_0_5_14_q0}}, {weights_0_5_13_q0}}, {weights_0_5_12_q0}}, {weights_0_5_11_q0}}, {weights_0_5_10_q0}}, {weights_0_5_9_q0}}, {weights_0_5_8_q0}};

assign a_pipes_3_V_V27_din = {{{{{{{{weights_0_5_23_q0}, {weights_0_5_22_q0}}, {weights_0_5_21_q0}}, {weights_0_5_20_q0}}, {weights_0_5_19_q0}}, {weights_0_5_18_q0}}, {weights_0_5_17_q0}}, {weights_0_5_16_q0}};

assign a_pipes_4_V_V32_din = {{{{{{{{weights_0_5_31_q0}, {weights_0_5_30_q0}}, {weights_0_5_29_q0}}, {weights_0_5_28_q0}}, {weights_0_5_27_q0}}, {weights_0_5_26_q0}}, {weights_0_5_25_q0}}, {weights_0_5_24_q0}};

assign add_ln25_fu_697_p2 = (indvar_flatten_reg_644 + 42'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == a_pipes_4_V_V32_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_3_V_V27_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_2_V_V22_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_1_V_V17_full_n) & (icmp_ln25_reg_848 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == a_pipes_4_V_V32_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_3_V_V27_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_2_V_V22_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_1_V_V17_full_n) & (icmp_ln25_reg_848 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((1'b0 == a_pipes_4_V_V32_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_3_V_V27_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_2_V_V22_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_1_V_V17_full_n) & (icmp_ln25_reg_848 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == N_pipe_in_V_V5_empty_n) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((1'b0 == a_pipes_4_V_V32_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_3_V_V27_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_2_V_V22_full_n) & (icmp_ln25_reg_848 == 1'd0)) | ((1'b0 == a_pipes_1_V_V17_full_n) & (icmp_ln25_reg_848 == 1'd0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound_fu_686_p2 = (p_shl_fu_666_p3 - p_shl190_fu_682_p1);

assign icmp_ln25_fu_692_p2 = ((indvar_flatten_reg_644 == bound_reg_843) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_703_p2 = ((n_0_reg_655 == 10'd768) ? 1'b1 : 1'b0);

assign n_fu_753_p2 = (select_ln27_fu_709_p3 + 10'd1);

assign p_shl190_fu_682_p1 = tmp_fu_674_p3;

assign p_shl_fu_666_p3 = {{N_pipe_in_V_V5_dout}, {10'd0}};

assign select_ln27_fu_709_p3 = ((icmp_ln27_fu_703_p2[0:0] === 1'b1) ? 10'd0 : n_0_reg_655);

assign tmp_fu_674_p3 = {{N_pipe_in_V_V5_dout}, {8'd0}};

assign weights_0_5_0_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_10_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_11_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_12_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_13_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_14_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_15_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_16_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_17_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_18_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_19_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_1_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_20_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_21_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_22_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_23_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_24_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_25_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_26_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_27_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_28_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_29_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_2_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_30_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_31_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_3_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_4_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_5_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_6_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_7_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_8_address0 = zext_ln32_fu_717_p1;

assign weights_0_5_9_address0 = zext_ln32_fu_717_p1;

assign zext_ln32_fu_717_p1 = select_ln27_fu_709_p3;

always @ (posedge ap_clk) begin
    bound_reg_843[7:0] <= 8'b00000000;
end

endmodule //ReadA123138
