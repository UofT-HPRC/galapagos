// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module QuantAct (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_V_data_V_dout,
        in_V_data_V_empty_n,
        in_V_data_V_read,
        in_V_id_V_dout,
        in_V_id_V_empty_n,
        in_V_id_V_read,
        in_V_dest_V_dout,
        in_V_dest_V_empty_n,
        in_V_dest_V_read,
        in_V_user_V_dout,
        in_V_user_V_empty_n,
        in_V_user_V_read,
        in_V_last_V_dout,
        in_V_last_V_empty_n,
        in_V_last_V_read,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        out_r_TID,
        out_r_TDEST,
        out_r_TUSER,
        out_r_TLAST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state9 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] in_V_data_V_dout;
input   in_V_data_V_empty_n;
output   in_V_data_V_read;
input  [7:0] in_V_id_V_dout;
input   in_V_id_V_empty_n;
output   in_V_id_V_read;
input  [7:0] in_V_dest_V_dout;
input   in_V_dest_V_empty_n;
output   in_V_dest_V_read;
input  [15:0] in_V_user_V_dout;
input   in_V_user_V_empty_n;
output   in_V_user_V_read;
input  [0:0] in_V_last_V_dout;
input   in_V_last_V_empty_n;
output   in_V_last_V_read;
output  [511:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
output  [7:0] out_r_TID;
output  [7:0] out_r_TDEST;
output  [15:0] out_r_TUSER;
output  [0:0] out_r_TLAST;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_data_V_read;
reg in_V_id_V_read;
reg in_V_dest_V_read;
reg in_V_user_V_read;
reg in_V_last_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [511:0] out_V_data_V_1_data_in;
reg   [511:0] out_V_data_V_1_data_out;
reg    out_V_data_V_1_vld_in;
wire    out_V_data_V_1_vld_out;
wire    out_V_data_V_1_ack_in;
wire    out_V_data_V_1_ack_out;
reg   [511:0] out_V_data_V_1_payload_A;
reg   [511:0] out_V_data_V_1_payload_B;
reg    out_V_data_V_1_sel_rd;
reg    out_V_data_V_1_sel_wr;
wire    out_V_data_V_1_sel;
wire    out_V_data_V_1_load_A;
wire    out_V_data_V_1_load_B;
reg   [1:0] out_V_data_V_1_state;
wire    out_V_data_V_1_state_cmp_full;
wire   [7:0] out_V_id_V_1_data_out;
reg    out_V_id_V_1_vld_in;
wire    out_V_id_V_1_vld_out;
wire    out_V_id_V_1_ack_out;
reg    out_V_id_V_1_sel_rd;
wire    out_V_id_V_1_sel;
reg   [1:0] out_V_id_V_1_state;
wire   [7:0] out_V_dest_V_1_data_out;
reg    out_V_dest_V_1_vld_in;
wire    out_V_dest_V_1_vld_out;
wire    out_V_dest_V_1_ack_out;
reg    out_V_dest_V_1_sel_rd;
wire    out_V_dest_V_1_sel;
reg   [1:0] out_V_dest_V_1_state;
reg   [15:0] out_V_user_V_1_data_in;
reg   [15:0] out_V_user_V_1_data_out;
reg    out_V_user_V_1_vld_in;
wire    out_V_user_V_1_vld_out;
wire    out_V_user_V_1_ack_in;
wire    out_V_user_V_1_ack_out;
reg   [15:0] out_V_user_V_1_payload_A;
reg   [15:0] out_V_user_V_1_payload_B;
reg    out_V_user_V_1_sel_rd;
reg    out_V_user_V_1_sel_wr;
wire    out_V_user_V_1_sel;
wire    out_V_user_V_1_load_A;
wire    out_V_user_V_1_load_B;
reg   [1:0] out_V_user_V_1_state;
wire    out_V_user_V_1_state_cmp_full;
reg   [0:0] out_V_last_V_1_data_in;
reg   [0:0] out_V_last_V_1_data_out;
reg    out_V_last_V_1_vld_in;
wire    out_V_last_V_1_vld_out;
wire    out_V_last_V_1_ack_in;
wire    out_V_last_V_1_ack_out;
reg   [0:0] out_V_last_V_1_payload_A;
reg   [0:0] out_V_last_V_1_payload_B;
reg    out_V_last_V_1_sel_rd;
reg    out_V_last_V_1_sel_wr;
wire    out_V_last_V_1_sel;
wire    out_V_last_V_1_load_A;
wire    out_V_last_V_1_load_B;
reg   [1:0] out_V_last_V_1_state;
wire    out_V_last_V_1_state_cmp_full;
wire   [5:0] m_0_address0;
reg    m_0_ce0;
wire   [30:0] m_0_q0;
wire   [5:0] m_1_address0;
reg    m_1_ce0;
wire   [30:0] m_1_q0;
wire   [5:0] m_2_address0;
reg    m_2_ce0;
wire   [30:0] m_2_q0;
wire   [5:0] m_3_address0;
reg    m_3_ce0;
wire   [30:0] m_3_q0;
wire   [5:0] m_4_address0;
reg    m_4_ce0;
wire   [30:0] m_4_q0;
wire   [5:0] m_5_address0;
reg    m_5_ce0;
wire   [30:0] m_5_q0;
wire   [5:0] m_6_address0;
reg    m_6_ce0;
wire   [30:0] m_6_q0;
wire   [5:0] m_7_address0;
reg    m_7_ce0;
wire   [30:0] m_7_q0;
wire   [5:0] m_8_address0;
reg    m_8_ce0;
wire   [30:0] m_8_q0;
wire   [5:0] m_9_address0;
reg    m_9_ce0;
wire   [30:0] m_9_q0;
wire   [5:0] m_10_address0;
reg    m_10_ce0;
wire   [30:0] m_10_q0;
wire   [5:0] m_11_address0;
reg    m_11_ce0;
wire   [30:0] m_11_q0;
wire   [5:0] m_12_address0;
reg    m_12_ce0;
wire   [30:0] m_12_q0;
wire   [5:0] m_13_address0;
reg    m_13_ce0;
wire   [30:0] m_13_q0;
wire   [5:0] m_14_address0;
reg    m_14_ce0;
wire   [30:0] m_14_q0;
wire   [5:0] m_15_address0;
reg    m_15_ce0;
wire   [30:0] m_15_q0;
wire   [5:0] e_0_address0;
reg    e_0_ce0;
wire   [5:0] e_0_q0;
wire   [5:0] e_1_address0;
reg    e_1_ce0;
wire   [5:0] e_1_q0;
wire   [5:0] e_2_address0;
reg    e_2_ce0;
wire   [5:0] e_2_q0;
wire   [5:0] e_3_address0;
reg    e_3_ce0;
wire   [5:0] e_3_q0;
wire   [5:0] e_4_address0;
reg    e_4_ce0;
wire   [5:0] e_4_q0;
wire   [5:0] e_5_address0;
reg    e_5_ce0;
wire   [5:0] e_5_q0;
wire   [5:0] e_6_address0;
reg    e_6_ce0;
wire   [5:0] e_6_q0;
wire   [5:0] e_7_address0;
reg    e_7_ce0;
wire   [5:0] e_7_q0;
wire   [5:0] e_8_address0;
reg    e_8_ce0;
wire   [5:0] e_8_q0;
wire   [5:0] e_9_address0;
reg    e_9_ce0;
wire   [5:0] e_9_q0;
wire   [5:0] e_10_address0;
reg    e_10_ce0;
wire   [5:0] e_10_q0;
wire   [5:0] e_11_address0;
reg    e_11_ce0;
wire   [5:0] e_11_q0;
wire   [5:0] e_12_address0;
reg    e_12_ce0;
wire   [5:0] e_12_q0;
wire   [5:0] e_13_address0;
reg    e_13_ce0;
wire   [5:0] e_13_q0;
wire   [5:0] e_14_address0;
reg    e_14_ce0;
wire   [5:0] e_14_q0;
wire   [5:0] e_15_address0;
reg    e_15_ce0;
wire   [5:0] e_15_q0;
reg    in_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln2111_reg_2407;
reg    in_V_id_V_blk_n;
reg    in_V_dest_V_blk_n;
reg    in_V_user_V_blk_n;
reg    in_V_last_V_blk_n;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state2;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln2146_reg_2531;
reg   [0:0] icmp_ln2146_reg_2531_pp0_iter3_reg;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] icmp_ln2146_reg_2531_pp0_iter4_reg;
reg   [37:0] indvar_flatten_reg_759;
reg   [31:0] i_0_reg_770;
reg   [511:0] p_Val2_1_reg_781;
reg   [5:0] j_0_reg_791;
wire   [31:0] N_fu_806_p1;
reg   [31:0] N_reg_2390;
wire    io_acc_block_signal_op10;
reg    ap_block_state1;
wire   [511:0] out_data_data_V_fu_810_p1;
reg   [511:0] out_data_data_V_reg_2396;
wire   [37:0] bound_fu_833_p2;
reg   [37:0] bound_reg_2402;
wire   [0:0] icmp_ln2111_fu_853_p2;
wire    ap_block_state3_pp0_stage0_iter0;
wire    io_acc_block_signal_op86;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
reg    ap_block_state7_io;
wire    ap_block_state8_pp0_stage0_iter5;
reg    ap_block_state8_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln2111_reg_2407_pp0_iter1_reg;
reg   [0:0] icmp_ln2111_reg_2407_pp0_iter2_reg;
reg   [0:0] icmp_ln2111_reg_2407_pp0_iter3_reg;
reg   [0:0] icmp_ln2111_reg_2407_pp0_iter4_reg;
wire   [37:0] add_ln2111_fu_858_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] tmp_user_V_2_fu_898_p3;
reg   [2:0] tmp_user_V_2_reg_2416;
reg   [2:0] tmp_user_V_2_reg_2416_pp0_iter1_reg;
reg   [2:0] tmp_user_V_2_reg_2416_pp0_iter2_reg;
reg   [2:0] tmp_user_V_2_reg_2416_pp0_iter3_reg;
wire   [31:0] select_ln2111_fu_906_p3;
wire   [1:0] ii_fu_914_p1;
reg   [1:0] ii_reg_2426;
reg   [1:0] ii_reg_2426_pp0_iter1_reg;
reg   [1:0] ii_reg_2426_pp0_iter2_reg;
reg   [1:0] ii_reg_2426_pp0_iter3_reg;
wire   [63:0] zext_ln2124_fu_918_p1;
reg   [63:0] zext_ln2124_reg_2431;
reg   [63:0] zext_ln2124_reg_2431_pp0_iter1_reg;
wire   [0:0] icmp_ln2146_fu_938_p2;
reg   [0:0] icmp_ln2146_reg_2531_pp0_iter1_reg;
reg   [0:0] icmp_ln2146_reg_2531_pp0_iter2_reg;
wire   [0:0] out_data_last_V_fu_962_p2;
reg   [0:0] out_data_last_V_reg_2535;
reg   [0:0] out_data_last_V_reg_2535_pp0_iter1_reg;
reg   [0:0] out_data_last_V_reg_2535_pp0_iter2_reg;
reg   [0:0] out_data_last_V_reg_2535_pp0_iter3_reg;
wire   [5:0] j_fu_968_p2;
wire   [31:0] trunc_ln647_fu_974_p1;
reg   [31:0] trunc_ln647_reg_2545;
reg   [31:0] p_Result_17_1_reg_2550;
reg   [31:0] p_Result_17_2_reg_2555;
reg   [31:0] p_Result_17_3_reg_2560;
reg   [31:0] p_Result_17_4_reg_2565;
reg   [31:0] p_Result_17_5_reg_2570;
reg   [31:0] p_Result_17_6_reg_2575;
reg   [31:0] p_Result_17_7_reg_2580;
reg   [31:0] p_Result_17_8_reg_2585;
reg   [31:0] p_Result_17_9_reg_2590;
reg   [31:0] p_Result_17_s_reg_2595;
reg   [31:0] p_Result_17_10_reg_2600;
reg   [31:0] p_Result_17_11_reg_2605;
reg   [31:0] p_Result_17_12_reg_2610;
reg   [31:0] p_Result_17_13_reg_2615;
reg   [31:0] p_Result_17_14_reg_2620;
reg   [30:0] m_0_load_reg_2625;
reg   [30:0] m_1_load_reg_2630;
reg   [30:0] m_2_load_reg_2635;
reg   [30:0] m_3_load_reg_2640;
reg   [30:0] m_4_load_reg_2645;
reg   [30:0] m_5_load_reg_2650;
reg   [30:0] m_6_load_reg_2655;
reg   [30:0] m_7_load_reg_2660;
reg   [30:0] m_8_load_reg_2665;
reg   [30:0] m_9_load_reg_2670;
reg   [30:0] m_10_load_reg_2675;
reg   [30:0] m_11_load_reg_2680;
reg   [30:0] m_12_load_reg_2685;
reg   [30:0] m_13_load_reg_2690;
reg   [30:0] m_14_load_reg_2695;
reg   [30:0] m_15_load_reg_2700;
wire   [62:0] mul_ln1352_fu_1134_p2;
reg   [62:0] mul_ln1352_reg_2705;
wire   [62:0] mul_ln1352_1_fu_1146_p2;
reg   [62:0] mul_ln1352_1_reg_2711;
wire   [62:0] mul_ln1352_2_fu_1158_p2;
reg   [62:0] mul_ln1352_2_reg_2717;
wire   [62:0] mul_ln1352_3_fu_1170_p2;
reg   [62:0] mul_ln1352_3_reg_2723;
wire   [62:0] mul_ln1352_4_fu_1182_p2;
reg   [62:0] mul_ln1352_4_reg_2729;
wire   [62:0] mul_ln1352_5_fu_1194_p2;
reg   [62:0] mul_ln1352_5_reg_2735;
wire   [62:0] mul_ln1352_6_fu_1206_p2;
reg   [62:0] mul_ln1352_6_reg_2741;
wire   [62:0] mul_ln1352_7_fu_1218_p2;
reg   [62:0] mul_ln1352_7_reg_2747;
wire   [62:0] mul_ln1352_8_fu_1230_p2;
reg   [62:0] mul_ln1352_8_reg_2753;
wire   [62:0] mul_ln1352_9_fu_1242_p2;
reg   [62:0] mul_ln1352_9_reg_2759;
wire   [62:0] mul_ln1352_10_fu_1254_p2;
reg   [62:0] mul_ln1352_10_reg_2765;
wire   [62:0] mul_ln1352_11_fu_1266_p2;
reg   [62:0] mul_ln1352_11_reg_2771;
wire   [62:0] mul_ln1352_12_fu_1278_p2;
reg   [62:0] mul_ln1352_12_reg_2777;
wire   [62:0] mul_ln1352_13_fu_1290_p2;
reg   [62:0] mul_ln1352_13_reg_2783;
wire   [62:0] mul_ln1352_14_fu_1302_p2;
reg   [62:0] mul_ln1352_14_reg_2789;
wire   [62:0] mul_ln1352_15_fu_1314_p2;
reg   [62:0] mul_ln1352_15_reg_2795;
wire   [0:0] icmp_ln791_fu_1390_p2;
reg   [0:0] icmp_ln791_reg_2881;
wire   [7:0] trunc_ln802_fu_1405_p1;
reg   [7:0] trunc_ln802_reg_2886;
wire   [0:0] icmp_ln791_1_fu_1431_p2;
reg   [0:0] icmp_ln791_1_reg_2892;
wire   [7:0] trunc_ln802_1_fu_1446_p1;
reg   [7:0] trunc_ln802_1_reg_2897;
wire   [0:0] icmp_ln791_2_fu_1472_p2;
reg   [0:0] icmp_ln791_2_reg_2903;
wire   [7:0] trunc_ln802_2_fu_1487_p1;
reg   [7:0] trunc_ln802_2_reg_2908;
wire   [0:0] icmp_ln791_3_fu_1513_p2;
reg   [0:0] icmp_ln791_3_reg_2914;
wire   [7:0] trunc_ln802_3_fu_1528_p1;
reg   [7:0] trunc_ln802_3_reg_2919;
wire   [0:0] icmp_ln791_4_fu_1554_p2;
reg   [0:0] icmp_ln791_4_reg_2925;
wire   [7:0] trunc_ln802_4_fu_1569_p1;
reg   [7:0] trunc_ln802_4_reg_2930;
wire   [0:0] icmp_ln791_5_fu_1595_p2;
reg   [0:0] icmp_ln791_5_reg_2936;
wire   [7:0] trunc_ln802_5_fu_1610_p1;
reg   [7:0] trunc_ln802_5_reg_2941;
wire   [0:0] icmp_ln791_6_fu_1636_p2;
reg   [0:0] icmp_ln791_6_reg_2947;
wire   [7:0] trunc_ln802_6_fu_1651_p1;
reg   [7:0] trunc_ln802_6_reg_2952;
wire   [0:0] icmp_ln791_7_fu_1677_p2;
reg   [0:0] icmp_ln791_7_reg_2958;
wire   [7:0] trunc_ln802_7_fu_1692_p1;
reg   [7:0] trunc_ln802_7_reg_2963;
wire   [0:0] icmp_ln791_8_fu_1718_p2;
reg   [0:0] icmp_ln791_8_reg_2969;
wire   [7:0] trunc_ln802_8_fu_1733_p1;
reg   [7:0] trunc_ln802_8_reg_2974;
wire   [0:0] icmp_ln791_9_fu_1759_p2;
reg   [0:0] icmp_ln791_9_reg_2980;
wire   [7:0] trunc_ln802_9_fu_1774_p1;
reg   [7:0] trunc_ln802_9_reg_2985;
wire   [0:0] icmp_ln791_10_fu_1800_p2;
reg   [0:0] icmp_ln791_10_reg_2991;
wire   [7:0] trunc_ln802_10_fu_1815_p1;
reg   [7:0] trunc_ln802_10_reg_2996;
wire   [0:0] icmp_ln791_11_fu_1841_p2;
reg   [0:0] icmp_ln791_11_reg_3002;
wire   [7:0] trunc_ln802_11_fu_1856_p1;
reg   [7:0] trunc_ln802_11_reg_3007;
wire   [0:0] icmp_ln791_12_fu_1882_p2;
reg   [0:0] icmp_ln791_12_reg_3013;
wire   [7:0] trunc_ln802_12_fu_1897_p1;
reg   [7:0] trunc_ln802_12_reg_3018;
wire   [0:0] icmp_ln791_13_fu_1923_p2;
reg   [0:0] icmp_ln791_13_reg_3024;
wire   [7:0] trunc_ln802_13_fu_1938_p1;
reg   [7:0] trunc_ln802_13_reg_3029;
wire   [0:0] icmp_ln791_14_fu_1964_p2;
reg   [0:0] icmp_ln791_14_reg_3035;
wire   [7:0] trunc_ln802_14_fu_1979_p1;
reg   [7:0] trunc_ln802_14_reg_3040;
wire   [0:0] icmp_ln791_15_fu_2005_p2;
reg   [0:0] icmp_ln791_15_reg_3046;
wire   [7:0] trunc_ln802_15_fu_2020_p1;
reg   [7:0] trunc_ln802_15_reg_3051;
wire   [15:0] zext_ln2149_fu_2027_p1;
wire   [511:0] tmp_data_V_5_fu_2383_p2;
reg   [511:0] tmp_data_V_5_reg_3062;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [511:0] ap_phi_mux_p_Val2_1_phi_fu_784_p4;
reg    ap_block_pp0_stage0_01001;
wire   [35:0] tmp_6_fu_822_p3;
wire   [37:0] p_shl_fu_815_p3;
wire   [37:0] p_shl190_fu_829_p1;
wire   [0:0] icmp_ln2149_fu_839_p2;
wire   [0:0] icmp_ln2113_fu_864_p2;
wire   [31:0] add_ln2111_1_fu_878_p2;
wire   [0:0] icmp_ln2149_1_fu_884_p2;
wire   [2:0] select_ln302_2_fu_890_p3;
wire   [2:0] tmp_user_V_fu_845_p3;
wire   [5:0] select_ln2149_fu_870_p3;
wire   [3:0] tmp_8_fu_944_p4;
wire   [5:0] and_ln_fu_954_p3;
wire  signed [31:0] mul_ln1352_fu_1134_p0;
wire   [30:0] mul_ln1352_fu_1134_p1;
wire  signed [31:0] mul_ln1352_1_fu_1146_p0;
wire   [30:0] mul_ln1352_1_fu_1146_p1;
wire  signed [31:0] mul_ln1352_2_fu_1158_p0;
wire   [30:0] mul_ln1352_2_fu_1158_p1;
wire  signed [31:0] mul_ln1352_3_fu_1170_p0;
wire   [30:0] mul_ln1352_3_fu_1170_p1;
wire  signed [31:0] mul_ln1352_4_fu_1182_p0;
wire   [30:0] mul_ln1352_4_fu_1182_p1;
wire  signed [31:0] mul_ln1352_5_fu_1194_p0;
wire   [30:0] mul_ln1352_5_fu_1194_p1;
wire  signed [31:0] mul_ln1352_6_fu_1206_p0;
wire   [30:0] mul_ln1352_6_fu_1206_p1;
wire  signed [31:0] mul_ln1352_7_fu_1218_p0;
wire   [30:0] mul_ln1352_7_fu_1218_p1;
wire  signed [31:0] mul_ln1352_8_fu_1230_p0;
wire   [30:0] mul_ln1352_8_fu_1230_p1;
wire  signed [31:0] mul_ln1352_9_fu_1242_p0;
wire   [30:0] mul_ln1352_9_fu_1242_p1;
wire  signed [31:0] mul_ln1352_10_fu_1254_p0;
wire   [30:0] mul_ln1352_10_fu_1254_p1;
wire  signed [31:0] mul_ln1352_11_fu_1266_p0;
wire   [30:0] mul_ln1352_11_fu_1266_p1;
wire  signed [31:0] mul_ln1352_12_fu_1278_p0;
wire   [30:0] mul_ln1352_12_fu_1278_p1;
wire  signed [31:0] mul_ln1352_13_fu_1290_p0;
wire   [30:0] mul_ln1352_13_fu_1290_p1;
wire  signed [31:0] mul_ln1352_14_fu_1302_p0;
wire   [30:0] mul_ln1352_14_fu_1302_p1;
wire  signed [31:0] mul_ln1352_15_fu_1314_p0;
wire   [30:0] mul_ln1352_15_fu_1314_p1;
wire   [5:0] add_ln555_fu_1368_p2;
wire   [40:0] zext_ln791_fu_1374_p1;
wire   [40:0] shl_ln791_fu_1378_p2;
wire   [40:0] trunc_ln1352_fu_1320_p1;
wire   [40:0] and_ln791_fu_1384_p2;
wire   [62:0] zext_ln808_fu_1396_p1;
wire   [62:0] ashr_ln808_fu_1400_p2;
wire   [5:0] add_ln555_1_fu_1409_p2;
wire   [40:0] zext_ln791_1_fu_1415_p1;
wire   [40:0] shl_ln791_1_fu_1419_p2;
wire   [40:0] trunc_ln1352_1_fu_1323_p1;
wire   [40:0] and_ln791_1_fu_1425_p2;
wire   [62:0] zext_ln808_1_fu_1437_p1;
wire   [62:0] ashr_ln808_1_fu_1441_p2;
wire   [5:0] add_ln555_2_fu_1450_p2;
wire   [40:0] zext_ln791_2_fu_1456_p1;
wire   [40:0] shl_ln791_2_fu_1460_p2;
wire   [40:0] trunc_ln1352_2_fu_1326_p1;
wire   [40:0] and_ln791_2_fu_1466_p2;
wire   [62:0] zext_ln808_2_fu_1478_p1;
wire   [62:0] ashr_ln808_2_fu_1482_p2;
wire   [5:0] add_ln555_3_fu_1491_p2;
wire   [40:0] zext_ln791_3_fu_1497_p1;
wire   [40:0] shl_ln791_3_fu_1501_p2;
wire   [40:0] trunc_ln1352_3_fu_1329_p1;
wire   [40:0] and_ln791_3_fu_1507_p2;
wire   [62:0] zext_ln808_3_fu_1519_p1;
wire   [62:0] ashr_ln808_3_fu_1523_p2;
wire   [5:0] add_ln555_4_fu_1532_p2;
wire   [40:0] zext_ln791_4_fu_1538_p1;
wire   [40:0] shl_ln791_4_fu_1542_p2;
wire   [40:0] trunc_ln1352_4_fu_1332_p1;
wire   [40:0] and_ln791_4_fu_1548_p2;
wire   [62:0] zext_ln808_4_fu_1560_p1;
wire   [62:0] ashr_ln808_4_fu_1564_p2;
wire   [5:0] add_ln555_5_fu_1573_p2;
wire   [40:0] zext_ln791_5_fu_1579_p1;
wire   [40:0] shl_ln791_5_fu_1583_p2;
wire   [40:0] trunc_ln1352_5_fu_1335_p1;
wire   [40:0] and_ln791_5_fu_1589_p2;
wire   [62:0] zext_ln808_5_fu_1601_p1;
wire   [62:0] ashr_ln808_5_fu_1605_p2;
wire   [5:0] add_ln555_6_fu_1614_p2;
wire   [40:0] zext_ln791_6_fu_1620_p1;
wire   [40:0] shl_ln791_6_fu_1624_p2;
wire   [40:0] trunc_ln1352_6_fu_1338_p1;
wire   [40:0] and_ln791_6_fu_1630_p2;
wire   [62:0] zext_ln808_6_fu_1642_p1;
wire   [62:0] ashr_ln808_6_fu_1646_p2;
wire   [5:0] add_ln555_7_fu_1655_p2;
wire   [40:0] zext_ln791_7_fu_1661_p1;
wire   [40:0] shl_ln791_7_fu_1665_p2;
wire   [40:0] trunc_ln1352_7_fu_1341_p1;
wire   [40:0] and_ln791_7_fu_1671_p2;
wire   [62:0] zext_ln808_7_fu_1683_p1;
wire   [62:0] ashr_ln808_7_fu_1687_p2;
wire   [5:0] add_ln555_8_fu_1696_p2;
wire   [40:0] zext_ln791_8_fu_1702_p1;
wire   [40:0] shl_ln791_8_fu_1706_p2;
wire   [40:0] trunc_ln1352_8_fu_1344_p1;
wire   [40:0] and_ln791_8_fu_1712_p2;
wire   [62:0] zext_ln808_8_fu_1724_p1;
wire   [62:0] ashr_ln808_8_fu_1728_p2;
wire   [5:0] add_ln555_9_fu_1737_p2;
wire   [40:0] zext_ln791_9_fu_1743_p1;
wire   [40:0] shl_ln791_9_fu_1747_p2;
wire   [40:0] trunc_ln1352_9_fu_1347_p1;
wire   [40:0] and_ln791_9_fu_1753_p2;
wire   [62:0] zext_ln808_9_fu_1765_p1;
wire   [62:0] ashr_ln808_9_fu_1769_p2;
wire   [5:0] add_ln555_10_fu_1778_p2;
wire   [40:0] zext_ln791_10_fu_1784_p1;
wire   [40:0] shl_ln791_10_fu_1788_p2;
wire   [40:0] trunc_ln1352_10_fu_1350_p1;
wire   [40:0] and_ln791_10_fu_1794_p2;
wire   [62:0] zext_ln808_10_fu_1806_p1;
wire   [62:0] ashr_ln808_10_fu_1810_p2;
wire   [5:0] add_ln555_11_fu_1819_p2;
wire   [40:0] zext_ln791_11_fu_1825_p1;
wire   [40:0] shl_ln791_11_fu_1829_p2;
wire   [40:0] trunc_ln1352_11_fu_1353_p1;
wire   [40:0] and_ln791_11_fu_1835_p2;
wire   [62:0] zext_ln808_11_fu_1847_p1;
wire   [62:0] ashr_ln808_11_fu_1851_p2;
wire   [5:0] add_ln555_12_fu_1860_p2;
wire   [40:0] zext_ln791_12_fu_1866_p1;
wire   [40:0] shl_ln791_12_fu_1870_p2;
wire   [40:0] trunc_ln1352_12_fu_1356_p1;
wire   [40:0] and_ln791_12_fu_1876_p2;
wire   [62:0] zext_ln808_12_fu_1888_p1;
wire   [62:0] ashr_ln808_12_fu_1892_p2;
wire   [5:0] add_ln555_13_fu_1901_p2;
wire   [40:0] zext_ln791_13_fu_1907_p1;
wire   [40:0] shl_ln791_13_fu_1911_p2;
wire   [40:0] trunc_ln1352_13_fu_1359_p1;
wire   [40:0] and_ln791_13_fu_1917_p2;
wire   [62:0] zext_ln808_13_fu_1929_p1;
wire   [62:0] ashr_ln808_13_fu_1933_p2;
wire   [5:0] add_ln555_14_fu_1942_p2;
wire   [40:0] zext_ln791_14_fu_1948_p1;
wire   [40:0] shl_ln791_14_fu_1952_p2;
wire   [40:0] trunc_ln1352_14_fu_1362_p1;
wire   [40:0] and_ln791_14_fu_1958_p2;
wire   [62:0] zext_ln808_14_fu_1970_p1;
wire   [62:0] ashr_ln808_14_fu_1974_p2;
wire   [5:0] add_ln555_15_fu_1983_p2;
wire   [40:0] zext_ln791_15_fu_1989_p1;
wire   [40:0] shl_ln791_15_fu_1993_p2;
wire   [40:0] trunc_ln1352_15_fu_1365_p1;
wire   [40:0] and_ln791_15_fu_1999_p2;
wire   [62:0] zext_ln808_15_fu_2011_p1;
wire   [62:0] ashr_ln808_15_fu_2015_p2;
wire  signed [3:0] sext_ln2149_fu_2024_p1;
wire   [7:0] add_ln802_fu_2032_p2;
wire   [7:0] add_ln802_1_fu_2043_p2;
wire   [7:0] add_ln802_2_fu_2054_p2;
wire   [7:0] add_ln802_3_fu_2065_p2;
wire   [7:0] add_ln802_4_fu_2076_p2;
wire   [7:0] add_ln802_5_fu_2087_p2;
wire   [7:0] add_ln802_6_fu_2098_p2;
wire   [7:0] add_ln802_7_fu_2109_p2;
wire   [7:0] add_ln802_8_fu_2120_p2;
wire   [7:0] add_ln802_9_fu_2131_p2;
wire   [7:0] add_ln802_10_fu_2142_p2;
wire   [7:0] add_ln802_11_fu_2153_p2;
wire   [7:0] add_ln802_12_fu_2164_p2;
wire   [7:0] add_ln802_13_fu_2175_p2;
wire   [7:0] add_ln802_14_fu_2186_p2;
wire   [7:0] add_ln802_15_fu_2197_p2;
wire   [7:0] in_data2_15_V_fu_2202_p3;
wire   [7:0] in_data2_14_V_fu_2191_p3;
wire   [7:0] in_data2_13_V_fu_2180_p3;
wire   [7:0] in_data2_12_V_fu_2169_p3;
wire   [7:0] in_data2_11_V_fu_2158_p3;
wire   [7:0] in_data2_10_V_fu_2147_p3;
wire   [7:0] in_data2_9_V_fu_2136_p3;
wire   [7:0] in_data2_8_V_fu_2125_p3;
wire   [7:0] in_data2_7_V_fu_2114_p3;
wire   [7:0] in_data2_6_V_fu_2103_p3;
wire   [7:0] in_data2_5_V_fu_2092_p3;
wire   [7:0] in_data2_4_V_fu_2081_p3;
wire   [7:0] in_data2_3_V_fu_2070_p3;
wire   [7:0] in_data2_2_V_fu_2059_p3;
wire   [7:0] in_data2_1_V_fu_2048_p3;
wire   [7:0] in_data2_0_V_fu_2037_p3;
wire   [8:0] Lo_assign_fu_2244_p3;
wire   [127:0] p_Result_20_s_fu_2208_p17;
wire   [8:0] or_ln2144_fu_2251_p2;
wire   [9:0] zext_ln414_fu_2267_p1;
wire   [0:0] icmp_ln414_fu_2261_p2;
wire   [9:0] zext_ln414_5_fu_2271_p1;
wire   [9:0] xor_ln414_fu_2275_p2;
wire   [9:0] select_ln414_fu_2281_p3;
wire   [9:0] select_ln414_5_fu_2297_p3;
wire   [9:0] select_ln414_4_fu_2289_p3;
wire   [9:0] xor_ln414_3_fu_2305_p2;
wire   [511:0] tmp_V_fu_2257_p1;
wire   [511:0] zext_ln414_6_fu_2311_p1;
wire   [511:0] shl_ln414_fu_2323_p2;
reg   [511:0] tmp_fu_2329_p4;
wire   [511:0] zext_ln414_7_fu_2315_p1;
wire   [511:0] zext_ln414_8_fu_2319_p1;
wire   [511:0] shl_ln414_2_fu_2347_p2;
wire   [511:0] lshr_ln414_fu_2353_p2;
wire   [511:0] and_ln414_fu_2359_p2;
wire   [511:0] xor_ln414_4_fu_2365_p2;
wire   [511:0] select_ln414_6_fu_2339_p3;
wire   [511:0] and_ln414_3_fu_2371_p2;
wire   [511:0] and_ln414_4_fu_2377_p2;
wire    ap_CS_fsm_state9;
reg    ap_block_state9;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [62:0] mul_ln1352_10_fu_1254_p10;
wire   [62:0] mul_ln1352_11_fu_1266_p10;
wire   [62:0] mul_ln1352_12_fu_1278_p10;
wire   [62:0] mul_ln1352_13_fu_1290_p10;
wire   [62:0] mul_ln1352_14_fu_1302_p10;
wire   [62:0] mul_ln1352_15_fu_1314_p10;
wire   [62:0] mul_ln1352_1_fu_1146_p10;
wire   [62:0] mul_ln1352_2_fu_1158_p10;
wire   [62:0] mul_ln1352_3_fu_1170_p10;
wire   [62:0] mul_ln1352_4_fu_1182_p10;
wire   [62:0] mul_ln1352_5_fu_1194_p10;
wire   [62:0] mul_ln1352_6_fu_1206_p10;
wire   [62:0] mul_ln1352_7_fu_1218_p10;
wire   [62:0] mul_ln1352_8_fu_1230_p10;
wire   [62:0] mul_ln1352_9_fu_1242_p10;
wire   [62:0] mul_ln1352_fu_1134_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 out_V_data_V_1_sel_rd = 1'b0;
#0 out_V_data_V_1_sel_wr = 1'b0;
#0 out_V_data_V_1_state = 2'd0;
#0 out_V_id_V_1_sel_rd = 1'b0;
#0 out_V_id_V_1_state = 2'd0;
#0 out_V_dest_V_1_sel_rd = 1'b0;
#0 out_V_dest_V_1_state = 2'd0;
#0 out_V_user_V_1_sel_rd = 1'b0;
#0 out_V_user_V_1_sel_wr = 1'b0;
#0 out_V_user_V_1_state = 2'd0;
#0 out_V_last_V_1_sel_rd = 1'b0;
#0 out_V_last_V_1_sel_wr = 1'b0;
#0 out_V_last_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

QuantAct_m_0 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_0_address0),
    .ce0(m_0_ce0),
    .q0(m_0_q0)
);

QuantAct_m_1 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_1_address0),
    .ce0(m_1_ce0),
    .q0(m_1_q0)
);

QuantAct_m_2 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_2_address0),
    .ce0(m_2_ce0),
    .q0(m_2_q0)
);

QuantAct_m_3 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_3_address0),
    .ce0(m_3_ce0),
    .q0(m_3_q0)
);

QuantAct_m_4 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_4_address0),
    .ce0(m_4_ce0),
    .q0(m_4_q0)
);

QuantAct_m_5 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_5_address0),
    .ce0(m_5_ce0),
    .q0(m_5_q0)
);

QuantAct_m_6 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_6_address0),
    .ce0(m_6_ce0),
    .q0(m_6_q0)
);

QuantAct_m_7 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_7_address0),
    .ce0(m_7_ce0),
    .q0(m_7_q0)
);

QuantAct_m_8 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_8_address0),
    .ce0(m_8_ce0),
    .q0(m_8_q0)
);

QuantAct_m_9 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_9_address0),
    .ce0(m_9_ce0),
    .q0(m_9_q0)
);

QuantAct_m_10 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_10_address0),
    .ce0(m_10_ce0),
    .q0(m_10_q0)
);

QuantAct_m_11 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_11_address0),
    .ce0(m_11_ce0),
    .q0(m_11_q0)
);

QuantAct_m_12 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_12_address0),
    .ce0(m_12_ce0),
    .q0(m_12_q0)
);

QuantAct_m_13 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_13_address0),
    .ce0(m_13_ce0),
    .q0(m_13_q0)
);

QuantAct_m_14 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_14_address0),
    .ce0(m_14_ce0),
    .q0(m_14_q0)
);

QuantAct_m_15 #(
    .DataWidth( 31 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
m_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(m_15_address0),
    .ce0(m_15_ce0),
    .q0(m_15_q0)
);

QuantAct_e_0 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_0_address0),
    .ce0(e_0_ce0),
    .q0(e_0_q0)
);

QuantAct_e_1 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_1_address0),
    .ce0(e_1_ce0),
    .q0(e_1_q0)
);

QuantAct_e_2 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_2_address0),
    .ce0(e_2_ce0),
    .q0(e_2_q0)
);

QuantAct_e_3 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_3_address0),
    .ce0(e_3_ce0),
    .q0(e_3_q0)
);

QuantAct_e_4 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_4_address0),
    .ce0(e_4_ce0),
    .q0(e_4_q0)
);

QuantAct_e_5 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_5_address0),
    .ce0(e_5_ce0),
    .q0(e_5_q0)
);

QuantAct_e_6 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_6_address0),
    .ce0(e_6_ce0),
    .q0(e_6_q0)
);

QuantAct_e_7 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_7_address0),
    .ce0(e_7_ce0),
    .q0(e_7_q0)
);

QuantAct_e_8 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_8_address0),
    .ce0(e_8_ce0),
    .q0(e_8_q0)
);

QuantAct_e_9 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_9_address0),
    .ce0(e_9_ce0),
    .q0(e_9_q0)
);

QuantAct_e_10 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_10_address0),
    .ce0(e_10_ce0),
    .q0(e_10_q0)
);

QuantAct_e_11 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_11_address0),
    .ce0(e_11_ce0),
    .q0(e_11_q0)
);

QuantAct_e_12 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_12_address0),
    .ce0(e_12_ce0),
    .q0(e_12_q0)
);

QuantAct_e_13 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_13_address0),
    .ce0(e_13_ce0),
    .q0(e_13_q0)
);

QuantAct_e_14 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_14_address0),
    .ce0(e_14_ce0),
    .q0(e_14_q0)
);

QuantAct_e_15 #(
    .DataWidth( 6 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
e_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(e_15_address0),
    .ce0(e_15_ce0),
    .q0(e_15_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((out_V_last_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_out == 1'b1) & (out_V_data_V_1_vld_out == 1'b1))) begin
            out_V_data_V_1_sel_rd <= ~out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_data_V_1_ack_in == 1'b1) & (out_V_data_V_1_vld_in == 1'b1))) begin
            out_V_data_V_1_sel_wr <= ~out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd2;
        end else if ((((out_V_data_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd1;
        end else if (((~((out_V_data_V_1_vld_in == 1'b0) & (out_V_data_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_data_V_1_vld_in == 1'b1)) & (out_V_data_V_1_state == 2'd3)) | ((out_V_data_V_1_state == 2'd1) & (out_V_data_V_1_ack_out == 1'b1)) | ((out_V_data_V_1_state == 2'd2) & (out_V_data_V_1_vld_in == 1'b1)))) begin
            out_V_data_V_1_state <= 2'd3;
        end else begin
            out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_dest_V_1_ack_out == 1'b1) & (out_V_dest_V_1_vld_out == 1'b1))) begin
            out_V_dest_V_1_sel_rd <= ~out_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd2;
        end else if ((((out_V_dest_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd1;
        end else if (((~((out_V_dest_V_1_vld_in == 1'b0) & (out_V_dest_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_dest_V_1_vld_in == 1'b1)) & (out_V_dest_V_1_state == 2'd3)) | ((out_V_dest_V_1_state == 2'd1) & (out_V_dest_V_1_ack_out == 1'b1)) | ((out_V_dest_V_1_state == 2'd2) & (out_V_dest_V_1_vld_in == 1'b1)))) begin
            out_V_dest_V_1_state <= 2'd3;
        end else begin
            out_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_id_V_1_ack_out == 1'b1) & (out_V_id_V_1_vld_out == 1'b1))) begin
            out_V_id_V_1_sel_rd <= ~out_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd2;
        end else if ((((out_V_id_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd1;
        end else if (((~((out_V_id_V_1_vld_in == 1'b0) & (out_V_id_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_id_V_1_vld_in == 1'b1)) & (out_V_id_V_1_state == 2'd3)) | ((out_V_id_V_1_state == 2'd1) & (out_V_id_V_1_ack_out == 1'b1)) | ((out_V_id_V_1_state == 2'd2) & (out_V_id_V_1_vld_in == 1'b1)))) begin
            out_V_id_V_1_state <= 2'd3;
        end else begin
            out_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_out == 1'b1) & (out_V_last_V_1_vld_out == 1'b1))) begin
            out_V_last_V_1_sel_rd <= ~out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_last_V_1_ack_in == 1'b1) & (out_V_last_V_1_vld_in == 1'b1))) begin
            out_V_last_V_1_sel_wr <= ~out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd2;
        end else if ((((out_V_last_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd1;
        end else if (((~((out_V_last_V_1_vld_in == 1'b0) & (out_V_last_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_last_V_1_vld_in == 1'b1)) & (out_V_last_V_1_state == 2'd3)) | ((out_V_last_V_1_state == 2'd1) & (out_V_last_V_1_ack_out == 1'b1)) | ((out_V_last_V_1_state == 2'd2) & (out_V_last_V_1_vld_in == 1'b1)))) begin
            out_V_last_V_1_state <= 2'd3;
        end else begin
            out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_out == 1'b1) & (out_V_user_V_1_vld_out == 1'b1))) begin
            out_V_user_V_1_sel_rd <= ~out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((out_V_user_V_1_ack_in == 1'b1) & (out_V_user_V_1_vld_in == 1'b1))) begin
            out_V_user_V_1_sel_wr <= ~out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd2;
        end else if ((((out_V_user_V_1_state == 2'd1) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd1;
        end else if (((~((out_V_user_V_1_vld_in == 1'b0) & (out_V_user_V_1_ack_out == 1'b1)) & ~((out_r_TREADY == 1'b0) & (out_V_user_V_1_vld_in == 1'b1)) & (out_V_user_V_1_state == 2'd3)) | ((out_V_user_V_1_state == 2'd1) & (out_V_user_V_1_ack_out == 1'b1)) | ((out_V_user_V_1_state == 2'd2) & (out_V_user_V_1_vld_in == 1'b1)))) begin
            out_V_user_V_1_state <= 2'd3;
        end else begin
            out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2111_fu_853_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_770 <= select_ln2111_fu_906_p3;
    end else if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_770 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2111_fu_853_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_759 <= add_ln2111_fu_858_p2;
    end else if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_759 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2111_fu_853_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_0_reg_791 <= j_fu_968_p2;
    end else if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_791 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2111_reg_2407_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        p_Val2_1_reg_781 <= tmp_data_V_5_reg_3062;
    end else if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_1_reg_781 <= out_data_data_V_reg_2396;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_reg_2390 <= N_fu_806_p1;
        out_data_data_V_reg_2396[31 : 0] <= out_data_data_V_fu_810_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        bound_reg_2402[37 : 4] <= bound_fu_833_p2[37 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln2111_reg_2407 <= icmp_ln2111_fu_853_p2;
        icmp_ln2111_reg_2407_pp0_iter1_reg <= icmp_ln2111_reg_2407;
        icmp_ln2146_reg_2531_pp0_iter1_reg <= icmp_ln2146_reg_2531;
        ii_reg_2426_pp0_iter1_reg <= ii_reg_2426;
        out_data_last_V_reg_2535_pp0_iter1_reg <= out_data_last_V_reg_2535;
        tmp_user_V_2_reg_2416_pp0_iter1_reg[0] <= tmp_user_V_2_reg_2416[0];
        zext_ln2124_reg_2431_pp0_iter1_reg[5 : 0] <= zext_ln2124_reg_2431[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln2111_reg_2407_pp0_iter2_reg <= icmp_ln2111_reg_2407_pp0_iter1_reg;
        icmp_ln2111_reg_2407_pp0_iter3_reg <= icmp_ln2111_reg_2407_pp0_iter2_reg;
        icmp_ln2111_reg_2407_pp0_iter4_reg <= icmp_ln2111_reg_2407_pp0_iter3_reg;
        icmp_ln2146_reg_2531_pp0_iter2_reg <= icmp_ln2146_reg_2531_pp0_iter1_reg;
        icmp_ln2146_reg_2531_pp0_iter3_reg <= icmp_ln2146_reg_2531_pp0_iter2_reg;
        icmp_ln2146_reg_2531_pp0_iter4_reg <= icmp_ln2146_reg_2531_pp0_iter3_reg;
        ii_reg_2426_pp0_iter2_reg <= ii_reg_2426_pp0_iter1_reg;
        ii_reg_2426_pp0_iter3_reg <= ii_reg_2426_pp0_iter2_reg;
        out_data_last_V_reg_2535_pp0_iter2_reg <= out_data_last_V_reg_2535_pp0_iter1_reg;
        out_data_last_V_reg_2535_pp0_iter3_reg <= out_data_last_V_reg_2535_pp0_iter2_reg;
        tmp_user_V_2_reg_2416_pp0_iter2_reg[0] <= tmp_user_V_2_reg_2416_pp0_iter1_reg[0];
        tmp_user_V_2_reg_2416_pp0_iter3_reg[0] <= tmp_user_V_2_reg_2416_pp0_iter2_reg[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2111_fu_853_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln2146_reg_2531 <= icmp_ln2146_fu_938_p2;
        ii_reg_2426 <= ii_fu_914_p1;
        tmp_user_V_2_reg_2416[0] <= tmp_user_V_2_fu_898_p3[0];
        zext_ln2124_reg_2431[5 : 0] <= zext_ln2124_fu_918_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2111_reg_2407_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln791_10_reg_2991 <= icmp_ln791_10_fu_1800_p2;
        icmp_ln791_11_reg_3002 <= icmp_ln791_11_fu_1841_p2;
        icmp_ln791_12_reg_3013 <= icmp_ln791_12_fu_1882_p2;
        icmp_ln791_13_reg_3024 <= icmp_ln791_13_fu_1923_p2;
        icmp_ln791_14_reg_3035 <= icmp_ln791_14_fu_1964_p2;
        icmp_ln791_15_reg_3046 <= icmp_ln791_15_fu_2005_p2;
        icmp_ln791_1_reg_2892 <= icmp_ln791_1_fu_1431_p2;
        icmp_ln791_2_reg_2903 <= icmp_ln791_2_fu_1472_p2;
        icmp_ln791_3_reg_2914 <= icmp_ln791_3_fu_1513_p2;
        icmp_ln791_4_reg_2925 <= icmp_ln791_4_fu_1554_p2;
        icmp_ln791_5_reg_2936 <= icmp_ln791_5_fu_1595_p2;
        icmp_ln791_6_reg_2947 <= icmp_ln791_6_fu_1636_p2;
        icmp_ln791_7_reg_2958 <= icmp_ln791_7_fu_1677_p2;
        icmp_ln791_8_reg_2969 <= icmp_ln791_8_fu_1718_p2;
        icmp_ln791_9_reg_2980 <= icmp_ln791_9_fu_1759_p2;
        icmp_ln791_reg_2881 <= icmp_ln791_fu_1390_p2;
        trunc_ln802_10_reg_2996 <= trunc_ln802_10_fu_1815_p1;
        trunc_ln802_11_reg_3007 <= trunc_ln802_11_fu_1856_p1;
        trunc_ln802_12_reg_3018 <= trunc_ln802_12_fu_1897_p1;
        trunc_ln802_13_reg_3029 <= trunc_ln802_13_fu_1938_p1;
        trunc_ln802_14_reg_3040 <= trunc_ln802_14_fu_1979_p1;
        trunc_ln802_15_reg_3051 <= trunc_ln802_15_fu_2020_p1;
        trunc_ln802_1_reg_2897 <= trunc_ln802_1_fu_1446_p1;
        trunc_ln802_2_reg_2908 <= trunc_ln802_2_fu_1487_p1;
        trunc_ln802_3_reg_2919 <= trunc_ln802_3_fu_1528_p1;
        trunc_ln802_4_reg_2930 <= trunc_ln802_4_fu_1569_p1;
        trunc_ln802_5_reg_2941 <= trunc_ln802_5_fu_1610_p1;
        trunc_ln802_6_reg_2952 <= trunc_ln802_6_fu_1651_p1;
        trunc_ln802_7_reg_2963 <= trunc_ln802_7_fu_1692_p1;
        trunc_ln802_8_reg_2974 <= trunc_ln802_8_fu_1733_p1;
        trunc_ln802_9_reg_2985 <= trunc_ln802_9_fu_1774_p1;
        trunc_ln802_reg_2886 <= trunc_ln802_fu_1405_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_0_load_reg_2625 <= m_0_q0;
        m_10_load_reg_2675 <= m_10_q0;
        m_11_load_reg_2680 <= m_11_q0;
        m_12_load_reg_2685 <= m_12_q0;
        m_13_load_reg_2690 <= m_13_q0;
        m_14_load_reg_2695 <= m_14_q0;
        m_15_load_reg_2700 <= m_15_q0;
        m_1_load_reg_2630 <= m_1_q0;
        m_2_load_reg_2635 <= m_2_q0;
        m_3_load_reg_2640 <= m_3_q0;
        m_4_load_reg_2645 <= m_4_q0;
        m_5_load_reg_2650 <= m_5_q0;
        m_6_load_reg_2655 <= m_6_q0;
        m_7_load_reg_2660 <= m_7_q0;
        m_8_load_reg_2665 <= m_8_q0;
        m_9_load_reg_2670 <= m_9_q0;
        p_Result_17_10_reg_2600 <= {{in_V_data_V_dout[383:352]}};
        p_Result_17_11_reg_2605 <= {{in_V_data_V_dout[415:384]}};
        p_Result_17_12_reg_2610 <= {{in_V_data_V_dout[447:416]}};
        p_Result_17_13_reg_2615 <= {{in_V_data_V_dout[479:448]}};
        p_Result_17_14_reg_2620 <= {{in_V_data_V_dout[511:480]}};
        p_Result_17_1_reg_2550 <= {{in_V_data_V_dout[63:32]}};
        p_Result_17_2_reg_2555 <= {{in_V_data_V_dout[95:64]}};
        p_Result_17_3_reg_2560 <= {{in_V_data_V_dout[127:96]}};
        p_Result_17_4_reg_2565 <= {{in_V_data_V_dout[159:128]}};
        p_Result_17_5_reg_2570 <= {{in_V_data_V_dout[191:160]}};
        p_Result_17_6_reg_2575 <= {{in_V_data_V_dout[223:192]}};
        p_Result_17_7_reg_2580 <= {{in_V_data_V_dout[255:224]}};
        p_Result_17_8_reg_2585 <= {{in_V_data_V_dout[287:256]}};
        p_Result_17_9_reg_2590 <= {{in_V_data_V_dout[319:288]}};
        p_Result_17_s_reg_2595 <= {{in_V_data_V_dout[351:320]}};
        trunc_ln647_reg_2545 <= trunc_ln647_fu_974_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2111_reg_2407_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln1352_10_reg_2765 <= mul_ln1352_10_fu_1254_p2;
        mul_ln1352_11_reg_2771 <= mul_ln1352_11_fu_1266_p2;
        mul_ln1352_12_reg_2777 <= mul_ln1352_12_fu_1278_p2;
        mul_ln1352_13_reg_2783 <= mul_ln1352_13_fu_1290_p2;
        mul_ln1352_14_reg_2789 <= mul_ln1352_14_fu_1302_p2;
        mul_ln1352_15_reg_2795 <= mul_ln1352_15_fu_1314_p2;
        mul_ln1352_1_reg_2711 <= mul_ln1352_1_fu_1146_p2;
        mul_ln1352_2_reg_2717 <= mul_ln1352_2_fu_1158_p2;
        mul_ln1352_3_reg_2723 <= mul_ln1352_3_fu_1170_p2;
        mul_ln1352_4_reg_2729 <= mul_ln1352_4_fu_1182_p2;
        mul_ln1352_5_reg_2735 <= mul_ln1352_5_fu_1194_p2;
        mul_ln1352_6_reg_2741 <= mul_ln1352_6_fu_1206_p2;
        mul_ln1352_7_reg_2747 <= mul_ln1352_7_fu_1218_p2;
        mul_ln1352_8_reg_2753 <= mul_ln1352_8_fu_1230_p2;
        mul_ln1352_9_reg_2759 <= mul_ln1352_9_fu_1242_p2;
        mul_ln1352_reg_2705 <= mul_ln1352_fu_1134_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_A == 1'b1)) begin
        out_V_data_V_1_payload_A <= out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_data_V_1_load_B == 1'b1)) begin
        out_V_data_V_1_payload_B <= out_V_data_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_A == 1'b1)) begin
        out_V_last_V_1_payload_A <= out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_last_V_1_load_B == 1'b1)) begin
        out_V_last_V_1_payload_B <= out_V_last_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_user_V_1_load_A == 1'b1)) begin
        out_V_user_V_1_payload_A <= out_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((out_V_user_V_1_load_B == 1'b1)) begin
        out_V_user_V_1_payload_B <= out_V_user_V_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2146_fu_938_p2 == 1'd1) & (icmp_ln2111_fu_853_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_data_last_V_reg_2535 <= out_data_last_V_fu_962_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln2111_reg_2407_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        tmp_data_V_5_reg_3062 <= tmp_data_V_5_fu_2383_p2;
    end
end

always @ (*) begin
    if ((icmp_ln2111_fu_853_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_V_last_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln2111_reg_2407_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_phi_mux_p_Val2_1_phi_fu_784_p4 = tmp_data_V_5_reg_3062;
    end else begin
        ap_phi_mux_p_Val2_1_phi_fu_784_p4 = p_Val2_1_reg_781;
    end
end

always @ (*) begin
    if ((~((out_V_last_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_0_ce0 = 1'b1;
    end else begin
        e_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_10_ce0 = 1'b1;
    end else begin
        e_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_11_ce0 = 1'b1;
    end else begin
        e_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_12_ce0 = 1'b1;
    end else begin
        e_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_13_ce0 = 1'b1;
    end else begin
        e_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_14_ce0 = 1'b1;
    end else begin
        e_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_15_ce0 = 1'b1;
    end else begin
        e_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_1_ce0 = 1'b1;
    end else begin
        e_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_2_ce0 = 1'b1;
    end else begin
        e_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_3_ce0 = 1'b1;
    end else begin
        e_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_4_ce0 = 1'b1;
    end else begin
        e_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_5_ce0 = 1'b1;
    end else begin
        e_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_6_ce0 = 1'b1;
    end else begin
        e_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_7_ce0 = 1'b1;
    end else begin
        e_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_8_ce0 = 1'b1;
    end else begin
        e_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        e_9_ce0 = 1'b1;
    end else begin
        e_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_data_V_blk_n = in_V_data_V_empty_n;
    end else begin
        in_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_data_V_read = 1'b1;
    end else begin
        in_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_dest_V_blk_n = in_V_dest_V_empty_n;
    end else begin
        in_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_dest_V_read = 1'b1;
    end else begin
        in_V_dest_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_id_V_blk_n = in_V_id_V_empty_n;
    end else begin
        in_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_id_V_read = 1'b1;
    end else begin
        in_V_id_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_last_V_blk_n = in_V_last_V_empty_n;
    end else begin
        in_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_last_V_read = 1'b1;
    end else begin
        in_V_last_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_user_V_blk_n = in_V_user_V_empty_n;
    end else begin
        in_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln2111_reg_2407 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_user_V_read = 1'b1;
    end else begin
        in_V_user_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_0_ce0 = 1'b1;
    end else begin
        m_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_10_ce0 = 1'b1;
    end else begin
        m_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_11_ce0 = 1'b1;
    end else begin
        m_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_12_ce0 = 1'b1;
    end else begin
        m_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_13_ce0 = 1'b1;
    end else begin
        m_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_14_ce0 = 1'b1;
    end else begin
        m_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_15_ce0 = 1'b1;
    end else begin
        m_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_1_ce0 = 1'b1;
    end else begin
        m_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_2_ce0 = 1'b1;
    end else begin
        m_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_3_ce0 = 1'b1;
    end else begin
        m_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_4_ce0 = 1'b1;
    end else begin
        m_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_5_ce0 = 1'b1;
    end else begin
        m_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_6_ce0 = 1'b1;
    end else begin
        m_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_7_ce0 = 1'b1;
    end else begin
        m_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_8_ce0 = 1'b1;
    end else begin
        m_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_9_ce0 = 1'b1;
    end else begin
        m_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (icmp_ln2146_reg_2531_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_data_V_1_data_in = tmp_data_V_5_fu_2383_p2;
    end else if ((~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_data_V_1_data_in = out_data_data_V_fu_810_p1;
    end else begin
        out_V_data_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_V_data_V_1_sel == 1'b1)) begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_B;
    end else begin
        out_V_data_V_1_data_out = out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((icmp_ln2146_reg_2531_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_data_V_1_vld_in = 1'b1;
    end else begin
        out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln2146_reg_2531_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_dest_V_1_vld_in = 1'b1;
    end else begin
        out_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln2146_reg_2531_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_id_V_1_vld_in = 1'b1;
    end else begin
        out_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (icmp_ln2146_reg_2531_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_last_V_1_data_in = out_data_last_V_reg_2535_pp0_iter3_reg;
    end else if ((~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_last_V_1_data_in = 1'd0;
    end else begin
        out_V_last_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_V_last_V_1_sel == 1'b1)) begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_B;
    end else begin
        out_V_last_V_1_data_out = out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((icmp_ln2146_reg_2531_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_last_V_1_vld_in = 1'b1;
    end else begin
        out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (icmp_ln2146_reg_2531_pp0_iter3_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        out_V_user_V_1_data_in = zext_ln2149_fu_2027_p1;
    end else if ((~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_user_V_1_data_in = 16'd13;
    end else begin
        out_V_user_V_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((out_V_user_V_1_sel == 1'b1)) begin
        out_V_user_V_1_data_out = out_V_user_V_1_payload_B;
    end else begin
        out_V_user_V_1_data_out = out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if ((((icmp_ln2146_reg_2531_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_user_V_1_vld_in = 1'b1;
    end else begin
        out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln2146_reg_2531_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((icmp_ln2146_reg_2531_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_r_TDATA_blk_n = out_V_data_V_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (out_V_data_V_1_ack_in == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln2111_fu_853_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln2111_fu_853_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            if ((~((out_V_last_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_2244_p3 = {{ii_reg_2426_pp0_iter3_reg}, {7'd0}};

assign N_fu_806_p1 = in_V_data_V_dout[31:0];

assign add_ln2111_1_fu_878_p2 = (32'd1 + i_0_reg_770);

assign add_ln2111_fu_858_p2 = (indvar_flatten_reg_759 + 38'd1);

assign add_ln555_10_fu_1778_p2 = ($signed(6'd63) + $signed(e_10_q0));

assign add_ln555_11_fu_1819_p2 = ($signed(6'd63) + $signed(e_11_q0));

assign add_ln555_12_fu_1860_p2 = ($signed(6'd63) + $signed(e_12_q0));

assign add_ln555_13_fu_1901_p2 = ($signed(6'd63) + $signed(e_13_q0));

assign add_ln555_14_fu_1942_p2 = ($signed(6'd63) + $signed(e_14_q0));

assign add_ln555_15_fu_1983_p2 = ($signed(6'd63) + $signed(e_15_q0));

assign add_ln555_1_fu_1409_p2 = ($signed(6'd63) + $signed(e_1_q0));

assign add_ln555_2_fu_1450_p2 = ($signed(6'd63) + $signed(e_2_q0));

assign add_ln555_3_fu_1491_p2 = ($signed(6'd63) + $signed(e_3_q0));

assign add_ln555_4_fu_1532_p2 = ($signed(6'd63) + $signed(e_4_q0));

assign add_ln555_5_fu_1573_p2 = ($signed(6'd63) + $signed(e_5_q0));

assign add_ln555_6_fu_1614_p2 = ($signed(6'd63) + $signed(e_6_q0));

assign add_ln555_7_fu_1655_p2 = ($signed(6'd63) + $signed(e_7_q0));

assign add_ln555_8_fu_1696_p2 = ($signed(6'd63) + $signed(e_8_q0));

assign add_ln555_9_fu_1737_p2 = ($signed(6'd63) + $signed(e_9_q0));

assign add_ln555_fu_1368_p2 = ($signed(6'd63) + $signed(e_0_q0));

assign add_ln802_10_fu_2142_p2 = (8'd1 + trunc_ln802_10_reg_2996);

assign add_ln802_11_fu_2153_p2 = (8'd1 + trunc_ln802_11_reg_3007);

assign add_ln802_12_fu_2164_p2 = (8'd1 + trunc_ln802_12_reg_3018);

assign add_ln802_13_fu_2175_p2 = (8'd1 + trunc_ln802_13_reg_3029);

assign add_ln802_14_fu_2186_p2 = (8'd1 + trunc_ln802_14_reg_3040);

assign add_ln802_15_fu_2197_p2 = (8'd1 + trunc_ln802_15_reg_3051);

assign add_ln802_1_fu_2043_p2 = (8'd1 + trunc_ln802_1_reg_2897);

assign add_ln802_2_fu_2054_p2 = (8'd1 + trunc_ln802_2_reg_2908);

assign add_ln802_3_fu_2065_p2 = (8'd1 + trunc_ln802_3_reg_2919);

assign add_ln802_4_fu_2076_p2 = (8'd1 + trunc_ln802_4_reg_2930);

assign add_ln802_5_fu_2087_p2 = (8'd1 + trunc_ln802_5_reg_2941);

assign add_ln802_6_fu_2098_p2 = (8'd1 + trunc_ln802_6_reg_2952);

assign add_ln802_7_fu_2109_p2 = (8'd1 + trunc_ln802_7_reg_2963);

assign add_ln802_8_fu_2120_p2 = (8'd1 + trunc_ln802_8_reg_2974);

assign add_ln802_9_fu_2131_p2 = (8'd1 + trunc_ln802_9_reg_2985);

assign add_ln802_fu_2032_p2 = (8'd1 + trunc_ln802_reg_2886);

assign and_ln414_3_fu_2371_p2 = (xor_ln414_4_fu_2365_p2 & ap_phi_mux_p_Val2_1_phi_fu_784_p4);

assign and_ln414_4_fu_2377_p2 = (select_ln414_6_fu_2339_p3 & and_ln414_fu_2359_p2);

assign and_ln414_fu_2359_p2 = (shl_ln414_2_fu_2347_p2 & lshr_ln414_fu_2353_p2);

assign and_ln791_10_fu_1794_p2 = (trunc_ln1352_10_fu_1350_p1 & shl_ln791_10_fu_1788_p2);

assign and_ln791_11_fu_1835_p2 = (trunc_ln1352_11_fu_1353_p1 & shl_ln791_11_fu_1829_p2);

assign and_ln791_12_fu_1876_p2 = (trunc_ln1352_12_fu_1356_p1 & shl_ln791_12_fu_1870_p2);

assign and_ln791_13_fu_1917_p2 = (trunc_ln1352_13_fu_1359_p1 & shl_ln791_13_fu_1911_p2);

assign and_ln791_14_fu_1958_p2 = (trunc_ln1352_14_fu_1362_p1 & shl_ln791_14_fu_1952_p2);

assign and_ln791_15_fu_1999_p2 = (trunc_ln1352_15_fu_1365_p1 & shl_ln791_15_fu_1993_p2);

assign and_ln791_1_fu_1425_p2 = (trunc_ln1352_1_fu_1323_p1 & shl_ln791_1_fu_1419_p2);

assign and_ln791_2_fu_1466_p2 = (trunc_ln1352_2_fu_1326_p1 & shl_ln791_2_fu_1460_p2);

assign and_ln791_3_fu_1507_p2 = (trunc_ln1352_3_fu_1329_p1 & shl_ln791_3_fu_1501_p2);

assign and_ln791_4_fu_1548_p2 = (trunc_ln1352_4_fu_1332_p1 & shl_ln791_4_fu_1542_p2);

assign and_ln791_5_fu_1589_p2 = (trunc_ln1352_5_fu_1335_p1 & shl_ln791_5_fu_1583_p2);

assign and_ln791_6_fu_1630_p2 = (trunc_ln1352_6_fu_1338_p1 & shl_ln791_6_fu_1624_p2);

assign and_ln791_7_fu_1671_p2 = (trunc_ln1352_7_fu_1341_p1 & shl_ln791_7_fu_1665_p2);

assign and_ln791_8_fu_1712_p2 = (trunc_ln1352_8_fu_1344_p1 & shl_ln791_8_fu_1706_p2);

assign and_ln791_9_fu_1753_p2 = (trunc_ln1352_9_fu_1347_p1 & shl_ln791_9_fu_1747_p2);

assign and_ln791_fu_1384_p2 = (trunc_ln1352_fu_1320_p1 & shl_ln791_fu_1378_p2);

assign and_ln_fu_954_p3 = {{tmp_8_fu_944_p4}, {2'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((icmp_ln2111_reg_2407 == 1'd0) & (io_acc_block_signal_op86 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln2111_reg_2407 == 1'd0) & (io_acc_block_signal_op86 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((icmp_ln2111_reg_2407 == 1'd0) & (io_acc_block_signal_op86 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (io_acc_block_signal_op10 == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((icmp_ln2111_reg_2407 == 1'd0) & (io_acc_block_signal_op86 == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((icmp_ln2146_reg_2531_pp0_iter3_reg == 1'd1) & (out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((icmp_ln2146_reg_2531_pp0_iter4_reg == 1'd1) & (out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9 = ((out_V_last_V_1_state == 2'd1) | (out_V_user_V_1_state == 2'd1) | (out_V_dest_V_1_state == 2'd1) | (out_V_id_V_1_state == 2'd1) | (out_V_data_V_1_state == 2'd1) | ((out_V_data_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_last_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_user_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_dest_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)) | ((out_V_id_V_1_state == 2'd3) & (out_r_TREADY == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ashr_ln808_10_fu_1810_p2 = $signed(mul_ln1352_10_reg_2765) >>> zext_ln808_10_fu_1806_p1;

assign ashr_ln808_11_fu_1851_p2 = $signed(mul_ln1352_11_reg_2771) >>> zext_ln808_11_fu_1847_p1;

assign ashr_ln808_12_fu_1892_p2 = $signed(mul_ln1352_12_reg_2777) >>> zext_ln808_12_fu_1888_p1;

assign ashr_ln808_13_fu_1933_p2 = $signed(mul_ln1352_13_reg_2783) >>> zext_ln808_13_fu_1929_p1;

assign ashr_ln808_14_fu_1974_p2 = $signed(mul_ln1352_14_reg_2789) >>> zext_ln808_14_fu_1970_p1;

assign ashr_ln808_15_fu_2015_p2 = $signed(mul_ln1352_15_reg_2795) >>> zext_ln808_15_fu_2011_p1;

assign ashr_ln808_1_fu_1441_p2 = $signed(mul_ln1352_1_reg_2711) >>> zext_ln808_1_fu_1437_p1;

assign ashr_ln808_2_fu_1482_p2 = $signed(mul_ln1352_2_reg_2717) >>> zext_ln808_2_fu_1478_p1;

assign ashr_ln808_3_fu_1523_p2 = $signed(mul_ln1352_3_reg_2723) >>> zext_ln808_3_fu_1519_p1;

assign ashr_ln808_4_fu_1564_p2 = $signed(mul_ln1352_4_reg_2729) >>> zext_ln808_4_fu_1560_p1;

assign ashr_ln808_5_fu_1605_p2 = $signed(mul_ln1352_5_reg_2735) >>> zext_ln808_5_fu_1601_p1;

assign ashr_ln808_6_fu_1646_p2 = $signed(mul_ln1352_6_reg_2741) >>> zext_ln808_6_fu_1642_p1;

assign ashr_ln808_7_fu_1687_p2 = $signed(mul_ln1352_7_reg_2747) >>> zext_ln808_7_fu_1683_p1;

assign ashr_ln808_8_fu_1728_p2 = $signed(mul_ln1352_8_reg_2753) >>> zext_ln808_8_fu_1724_p1;

assign ashr_ln808_9_fu_1769_p2 = $signed(mul_ln1352_9_reg_2759) >>> zext_ln808_9_fu_1765_p1;

assign ashr_ln808_fu_1400_p2 = $signed(mul_ln1352_reg_2705) >>> zext_ln808_fu_1396_p1;

assign bound_fu_833_p2 = (p_shl_fu_815_p3 - p_shl190_fu_829_p1);

assign e_0_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_10_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_11_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_12_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_13_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_14_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_15_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_1_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_2_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_3_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_4_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_5_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_6_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_7_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_8_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign e_9_address0 = zext_ln2124_reg_2431_pp0_iter1_reg;

assign icmp_ln2111_fu_853_p2 = ((indvar_flatten_reg_759 == bound_reg_2402) ? 1'b1 : 1'b0);

assign icmp_ln2113_fu_864_p2 = ((j_0_reg_791 == 6'd48) ? 1'b1 : 1'b0);

assign icmp_ln2146_fu_938_p2 = ((ii_fu_914_p1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln2149_1_fu_884_p2 = ((add_ln2111_1_fu_878_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln2149_fu_839_p2 = ((i_0_reg_770 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln414_fu_2261_p2 = ((Lo_assign_fu_2244_p3 > or_ln2144_fu_2251_p2) ? 1'b1 : 1'b0);

assign icmp_ln791_10_fu_1800_p2 = ((and_ln791_10_fu_1794_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_11_fu_1841_p2 = ((and_ln791_11_fu_1835_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_12_fu_1882_p2 = ((and_ln791_12_fu_1876_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_13_fu_1923_p2 = ((and_ln791_13_fu_1917_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_14_fu_1964_p2 = ((and_ln791_14_fu_1958_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_15_fu_2005_p2 = ((and_ln791_15_fu_1999_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_1_fu_1431_p2 = ((and_ln791_1_fu_1425_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_2_fu_1472_p2 = ((and_ln791_2_fu_1466_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_3_fu_1513_p2 = ((and_ln791_3_fu_1507_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_4_fu_1554_p2 = ((and_ln791_4_fu_1548_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_5_fu_1595_p2 = ((and_ln791_5_fu_1589_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_6_fu_1636_p2 = ((and_ln791_6_fu_1630_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_7_fu_1677_p2 = ((and_ln791_7_fu_1671_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_8_fu_1718_p2 = ((and_ln791_8_fu_1712_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_9_fu_1759_p2 = ((and_ln791_9_fu_1753_p2 == 41'd0) ? 1'b1 : 1'b0);

assign icmp_ln791_fu_1390_p2 = ((and_ln791_fu_1384_p2 == 41'd0) ? 1'b1 : 1'b0);

assign ii_fu_914_p1 = select_ln2149_fu_870_p3[1:0];

assign in_data2_0_V_fu_2037_p3 = ((icmp_ln791_reg_2881[0:0] === 1'b1) ? trunc_ln802_reg_2886 : add_ln802_fu_2032_p2);

assign in_data2_10_V_fu_2147_p3 = ((icmp_ln791_10_reg_2991[0:0] === 1'b1) ? trunc_ln802_10_reg_2996 : add_ln802_10_fu_2142_p2);

assign in_data2_11_V_fu_2158_p3 = ((icmp_ln791_11_reg_3002[0:0] === 1'b1) ? trunc_ln802_11_reg_3007 : add_ln802_11_fu_2153_p2);

assign in_data2_12_V_fu_2169_p3 = ((icmp_ln791_12_reg_3013[0:0] === 1'b1) ? trunc_ln802_12_reg_3018 : add_ln802_12_fu_2164_p2);

assign in_data2_13_V_fu_2180_p3 = ((icmp_ln791_13_reg_3024[0:0] === 1'b1) ? trunc_ln802_13_reg_3029 : add_ln802_13_fu_2175_p2);

assign in_data2_14_V_fu_2191_p3 = ((icmp_ln791_14_reg_3035[0:0] === 1'b1) ? trunc_ln802_14_reg_3040 : add_ln802_14_fu_2186_p2);

assign in_data2_15_V_fu_2202_p3 = ((icmp_ln791_15_reg_3046[0:0] === 1'b1) ? trunc_ln802_15_reg_3051 : add_ln802_15_fu_2197_p2);

assign in_data2_1_V_fu_2048_p3 = ((icmp_ln791_1_reg_2892[0:0] === 1'b1) ? trunc_ln802_1_reg_2897 : add_ln802_1_fu_2043_p2);

assign in_data2_2_V_fu_2059_p3 = ((icmp_ln791_2_reg_2903[0:0] === 1'b1) ? trunc_ln802_2_reg_2908 : add_ln802_2_fu_2054_p2);

assign in_data2_3_V_fu_2070_p3 = ((icmp_ln791_3_reg_2914[0:0] === 1'b1) ? trunc_ln802_3_reg_2919 : add_ln802_3_fu_2065_p2);

assign in_data2_4_V_fu_2081_p3 = ((icmp_ln791_4_reg_2925[0:0] === 1'b1) ? trunc_ln802_4_reg_2930 : add_ln802_4_fu_2076_p2);

assign in_data2_5_V_fu_2092_p3 = ((icmp_ln791_5_reg_2936[0:0] === 1'b1) ? trunc_ln802_5_reg_2941 : add_ln802_5_fu_2087_p2);

assign in_data2_6_V_fu_2103_p3 = ((icmp_ln791_6_reg_2947[0:0] === 1'b1) ? trunc_ln802_6_reg_2952 : add_ln802_6_fu_2098_p2);

assign in_data2_7_V_fu_2114_p3 = ((icmp_ln791_7_reg_2958[0:0] === 1'b1) ? trunc_ln802_7_reg_2963 : add_ln802_7_fu_2109_p2);

assign in_data2_8_V_fu_2125_p3 = ((icmp_ln791_8_reg_2969[0:0] === 1'b1) ? trunc_ln802_8_reg_2974 : add_ln802_8_fu_2120_p2);

assign in_data2_9_V_fu_2136_p3 = ((icmp_ln791_9_reg_2980[0:0] === 1'b1) ? trunc_ln802_9_reg_2985 : add_ln802_9_fu_2131_p2);

assign io_acc_block_signal_op10 = (in_V_user_V_empty_n & in_V_last_V_empty_n & in_V_id_V_empty_n & in_V_dest_V_empty_n & in_V_data_V_empty_n);

assign io_acc_block_signal_op86 = (in_V_user_V_empty_n & in_V_last_V_empty_n & in_V_id_V_empty_n & in_V_dest_V_empty_n & in_V_data_V_empty_n);

assign j_fu_968_p2 = (select_ln2149_fu_870_p3 + 6'd1);

assign lshr_ln414_fu_2353_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln414_8_fu_2319_p1;

assign m_0_address0 = zext_ln2124_fu_918_p1;

assign m_10_address0 = zext_ln2124_fu_918_p1;

assign m_11_address0 = zext_ln2124_fu_918_p1;

assign m_12_address0 = zext_ln2124_fu_918_p1;

assign m_13_address0 = zext_ln2124_fu_918_p1;

assign m_14_address0 = zext_ln2124_fu_918_p1;

assign m_15_address0 = zext_ln2124_fu_918_p1;

assign m_1_address0 = zext_ln2124_fu_918_p1;

assign m_2_address0 = zext_ln2124_fu_918_p1;

assign m_3_address0 = zext_ln2124_fu_918_p1;

assign m_4_address0 = zext_ln2124_fu_918_p1;

assign m_5_address0 = zext_ln2124_fu_918_p1;

assign m_6_address0 = zext_ln2124_fu_918_p1;

assign m_7_address0 = zext_ln2124_fu_918_p1;

assign m_8_address0 = zext_ln2124_fu_918_p1;

assign m_9_address0 = zext_ln2124_fu_918_p1;

assign mul_ln1352_10_fu_1254_p0 = p_Result_17_s_reg_2595;

assign mul_ln1352_10_fu_1254_p1 = mul_ln1352_10_fu_1254_p10;

assign mul_ln1352_10_fu_1254_p10 = m_10_load_reg_2675;

assign mul_ln1352_10_fu_1254_p2 = ($signed(mul_ln1352_10_fu_1254_p0) * $signed({{1'b0}, {mul_ln1352_10_fu_1254_p1}}));

assign mul_ln1352_11_fu_1266_p0 = p_Result_17_10_reg_2600;

assign mul_ln1352_11_fu_1266_p1 = mul_ln1352_11_fu_1266_p10;

assign mul_ln1352_11_fu_1266_p10 = m_11_load_reg_2680;

assign mul_ln1352_11_fu_1266_p2 = ($signed(mul_ln1352_11_fu_1266_p0) * $signed({{1'b0}, {mul_ln1352_11_fu_1266_p1}}));

assign mul_ln1352_12_fu_1278_p0 = p_Result_17_11_reg_2605;

assign mul_ln1352_12_fu_1278_p1 = mul_ln1352_12_fu_1278_p10;

assign mul_ln1352_12_fu_1278_p10 = m_12_load_reg_2685;

assign mul_ln1352_12_fu_1278_p2 = ($signed(mul_ln1352_12_fu_1278_p0) * $signed({{1'b0}, {mul_ln1352_12_fu_1278_p1}}));

assign mul_ln1352_13_fu_1290_p0 = p_Result_17_12_reg_2610;

assign mul_ln1352_13_fu_1290_p1 = mul_ln1352_13_fu_1290_p10;

assign mul_ln1352_13_fu_1290_p10 = m_13_load_reg_2690;

assign mul_ln1352_13_fu_1290_p2 = ($signed(mul_ln1352_13_fu_1290_p0) * $signed({{1'b0}, {mul_ln1352_13_fu_1290_p1}}));

assign mul_ln1352_14_fu_1302_p0 = p_Result_17_13_reg_2615;

assign mul_ln1352_14_fu_1302_p1 = mul_ln1352_14_fu_1302_p10;

assign mul_ln1352_14_fu_1302_p10 = m_14_load_reg_2695;

assign mul_ln1352_14_fu_1302_p2 = ($signed(mul_ln1352_14_fu_1302_p0) * $signed({{1'b0}, {mul_ln1352_14_fu_1302_p1}}));

assign mul_ln1352_15_fu_1314_p0 = p_Result_17_14_reg_2620;

assign mul_ln1352_15_fu_1314_p1 = mul_ln1352_15_fu_1314_p10;

assign mul_ln1352_15_fu_1314_p10 = m_15_load_reg_2700;

assign mul_ln1352_15_fu_1314_p2 = ($signed(mul_ln1352_15_fu_1314_p0) * $signed({{1'b0}, {mul_ln1352_15_fu_1314_p1}}));

assign mul_ln1352_1_fu_1146_p0 = p_Result_17_1_reg_2550;

assign mul_ln1352_1_fu_1146_p1 = mul_ln1352_1_fu_1146_p10;

assign mul_ln1352_1_fu_1146_p10 = m_1_load_reg_2630;

assign mul_ln1352_1_fu_1146_p2 = ($signed(mul_ln1352_1_fu_1146_p0) * $signed({{1'b0}, {mul_ln1352_1_fu_1146_p1}}));

assign mul_ln1352_2_fu_1158_p0 = p_Result_17_2_reg_2555;

assign mul_ln1352_2_fu_1158_p1 = mul_ln1352_2_fu_1158_p10;

assign mul_ln1352_2_fu_1158_p10 = m_2_load_reg_2635;

assign mul_ln1352_2_fu_1158_p2 = ($signed(mul_ln1352_2_fu_1158_p0) * $signed({{1'b0}, {mul_ln1352_2_fu_1158_p1}}));

assign mul_ln1352_3_fu_1170_p0 = p_Result_17_3_reg_2560;

assign mul_ln1352_3_fu_1170_p1 = mul_ln1352_3_fu_1170_p10;

assign mul_ln1352_3_fu_1170_p10 = m_3_load_reg_2640;

assign mul_ln1352_3_fu_1170_p2 = ($signed(mul_ln1352_3_fu_1170_p0) * $signed({{1'b0}, {mul_ln1352_3_fu_1170_p1}}));

assign mul_ln1352_4_fu_1182_p0 = p_Result_17_4_reg_2565;

assign mul_ln1352_4_fu_1182_p1 = mul_ln1352_4_fu_1182_p10;

assign mul_ln1352_4_fu_1182_p10 = m_4_load_reg_2645;

assign mul_ln1352_4_fu_1182_p2 = ($signed(mul_ln1352_4_fu_1182_p0) * $signed({{1'b0}, {mul_ln1352_4_fu_1182_p1}}));

assign mul_ln1352_5_fu_1194_p0 = p_Result_17_5_reg_2570;

assign mul_ln1352_5_fu_1194_p1 = mul_ln1352_5_fu_1194_p10;

assign mul_ln1352_5_fu_1194_p10 = m_5_load_reg_2650;

assign mul_ln1352_5_fu_1194_p2 = ($signed(mul_ln1352_5_fu_1194_p0) * $signed({{1'b0}, {mul_ln1352_5_fu_1194_p1}}));

assign mul_ln1352_6_fu_1206_p0 = p_Result_17_6_reg_2575;

assign mul_ln1352_6_fu_1206_p1 = mul_ln1352_6_fu_1206_p10;

assign mul_ln1352_6_fu_1206_p10 = m_6_load_reg_2655;

assign mul_ln1352_6_fu_1206_p2 = ($signed(mul_ln1352_6_fu_1206_p0) * $signed({{1'b0}, {mul_ln1352_6_fu_1206_p1}}));

assign mul_ln1352_7_fu_1218_p0 = p_Result_17_7_reg_2580;

assign mul_ln1352_7_fu_1218_p1 = mul_ln1352_7_fu_1218_p10;

assign mul_ln1352_7_fu_1218_p10 = m_7_load_reg_2660;

assign mul_ln1352_7_fu_1218_p2 = ($signed(mul_ln1352_7_fu_1218_p0) * $signed({{1'b0}, {mul_ln1352_7_fu_1218_p1}}));

assign mul_ln1352_8_fu_1230_p0 = p_Result_17_8_reg_2585;

assign mul_ln1352_8_fu_1230_p1 = mul_ln1352_8_fu_1230_p10;

assign mul_ln1352_8_fu_1230_p10 = m_8_load_reg_2665;

assign mul_ln1352_8_fu_1230_p2 = ($signed(mul_ln1352_8_fu_1230_p0) * $signed({{1'b0}, {mul_ln1352_8_fu_1230_p1}}));

assign mul_ln1352_9_fu_1242_p0 = p_Result_17_9_reg_2590;

assign mul_ln1352_9_fu_1242_p1 = mul_ln1352_9_fu_1242_p10;

assign mul_ln1352_9_fu_1242_p10 = m_9_load_reg_2670;

assign mul_ln1352_9_fu_1242_p2 = ($signed(mul_ln1352_9_fu_1242_p0) * $signed({{1'b0}, {mul_ln1352_9_fu_1242_p1}}));

assign mul_ln1352_fu_1134_p0 = trunc_ln647_reg_2545;

assign mul_ln1352_fu_1134_p1 = mul_ln1352_fu_1134_p10;

assign mul_ln1352_fu_1134_p10 = m_0_load_reg_2625;

assign mul_ln1352_fu_1134_p2 = ($signed(mul_ln1352_fu_1134_p0) * $signed({{1'b0}, {mul_ln1352_fu_1134_p1}}));

assign or_ln2144_fu_2251_p2 = (9'd127 | Lo_assign_fu_2244_p3);

assign out_V_data_V_1_ack_in = out_V_data_V_1_state[1'd1];

assign out_V_data_V_1_ack_out = out_r_TREADY;

assign out_V_data_V_1_load_A = (out_V_data_V_1_state_cmp_full & ~out_V_data_V_1_sel_wr);

assign out_V_data_V_1_load_B = (out_V_data_V_1_state_cmp_full & out_V_data_V_1_sel_wr);

assign out_V_data_V_1_sel = out_V_data_V_1_sel_rd;

assign out_V_data_V_1_state_cmp_full = ((out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_data_V_1_vld_out = out_V_data_V_1_state[1'd0];

assign out_V_dest_V_1_ack_out = out_r_TREADY;

assign out_V_dest_V_1_data_out = 8'd40;

assign out_V_dest_V_1_sel = out_V_dest_V_1_sel_rd;

assign out_V_dest_V_1_vld_out = out_V_dest_V_1_state[1'd0];

assign out_V_id_V_1_ack_out = out_r_TREADY;

assign out_V_id_V_1_data_out = 8'd1;

assign out_V_id_V_1_sel = out_V_id_V_1_sel_rd;

assign out_V_id_V_1_vld_out = out_V_id_V_1_state[1'd0];

assign out_V_last_V_1_ack_in = out_V_last_V_1_state[1'd1];

assign out_V_last_V_1_ack_out = out_r_TREADY;

assign out_V_last_V_1_load_A = (out_V_last_V_1_state_cmp_full & ~out_V_last_V_1_sel_wr);

assign out_V_last_V_1_load_B = (out_V_last_V_1_state_cmp_full & out_V_last_V_1_sel_wr);

assign out_V_last_V_1_sel = out_V_last_V_1_sel_rd;

assign out_V_last_V_1_state_cmp_full = ((out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_last_V_1_vld_out = out_V_last_V_1_state[1'd0];

assign out_V_user_V_1_ack_in = out_V_user_V_1_state[1'd1];

assign out_V_user_V_1_ack_out = out_r_TREADY;

assign out_V_user_V_1_load_A = (out_V_user_V_1_state_cmp_full & ~out_V_user_V_1_sel_wr);

assign out_V_user_V_1_load_B = (out_V_user_V_1_state_cmp_full & out_V_user_V_1_sel_wr);

assign out_V_user_V_1_sel = out_V_user_V_1_sel_rd;

assign out_V_user_V_1_state_cmp_full = ((out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_user_V_1_vld_out = out_V_user_V_1_state[1'd0];

assign out_data_data_V_fu_810_p1 = N_fu_806_p1;

assign out_data_last_V_fu_962_p2 = ((and_ln_fu_954_p3 == 6'd44) ? 1'b1 : 1'b0);

assign out_r_TDATA = out_V_data_V_1_data_out;

assign out_r_TDEST = out_V_dest_V_1_data_out;

assign out_r_TID = out_V_id_V_1_data_out;

assign out_r_TLAST = out_V_last_V_1_data_out;

assign out_r_TUSER = out_V_user_V_1_data_out;

assign out_r_TVALID = out_V_last_V_1_state[1'd0];

assign p_Result_20_s_fu_2208_p17 = {{{{{{{{{{{{{{{{in_data2_15_V_fu_2202_p3}, {in_data2_14_V_fu_2191_p3}}, {in_data2_13_V_fu_2180_p3}}, {in_data2_12_V_fu_2169_p3}}, {in_data2_11_V_fu_2158_p3}}, {in_data2_10_V_fu_2147_p3}}, {in_data2_9_V_fu_2136_p3}}, {in_data2_8_V_fu_2125_p3}}, {in_data2_7_V_fu_2114_p3}}, {in_data2_6_V_fu_2103_p3}}, {in_data2_5_V_fu_2092_p3}}, {in_data2_4_V_fu_2081_p3}}, {in_data2_3_V_fu_2070_p3}}, {in_data2_2_V_fu_2059_p3}}, {in_data2_1_V_fu_2048_p3}}, {in_data2_0_V_fu_2037_p3}};

assign p_shl190_fu_829_p1 = tmp_6_fu_822_p3;

assign p_shl_fu_815_p3 = {{N_reg_2390}, {6'd0}};

assign select_ln2111_fu_906_p3 = ((icmp_ln2113_fu_864_p2[0:0] === 1'b1) ? add_ln2111_1_fu_878_p2 : i_0_reg_770);

assign select_ln2149_fu_870_p3 = ((icmp_ln2113_fu_864_p2[0:0] === 1'b1) ? 6'd0 : j_0_reg_791);

assign select_ln302_2_fu_890_p3 = ((icmp_ln2149_1_fu_884_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign select_ln414_4_fu_2289_p3 = ((icmp_ln414_fu_2261_p2[0:0] === 1'b1) ? zext_ln414_5_fu_2271_p1 : zext_ln414_fu_2267_p1);

assign select_ln414_5_fu_2297_p3 = ((icmp_ln414_fu_2261_p2[0:0] === 1'b1) ? xor_ln414_fu_2275_p2 : zext_ln414_fu_2267_p1);

assign select_ln414_6_fu_2339_p3 = ((icmp_ln414_fu_2261_p2[0:0] === 1'b1) ? tmp_fu_2329_p4 : shl_ln414_fu_2323_p2);

assign select_ln414_fu_2281_p3 = ((icmp_ln414_fu_2261_p2[0:0] === 1'b1) ? zext_ln414_fu_2267_p1 : zext_ln414_5_fu_2271_p1);

assign sext_ln2149_fu_2024_p1 = $signed(tmp_user_V_2_reg_2416_pp0_iter3_reg);

assign shl_ln414_2_fu_2347_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 << zext_ln414_7_fu_2315_p1;

assign shl_ln414_fu_2323_p2 = tmp_V_fu_2257_p1 << zext_ln414_6_fu_2311_p1;

assign shl_ln791_10_fu_1788_p2 = 41'd1 << zext_ln791_10_fu_1784_p1;

assign shl_ln791_11_fu_1829_p2 = 41'd1 << zext_ln791_11_fu_1825_p1;

assign shl_ln791_12_fu_1870_p2 = 41'd1 << zext_ln791_12_fu_1866_p1;

assign shl_ln791_13_fu_1911_p2 = 41'd1 << zext_ln791_13_fu_1907_p1;

assign shl_ln791_14_fu_1952_p2 = 41'd1 << zext_ln791_14_fu_1948_p1;

assign shl_ln791_15_fu_1993_p2 = 41'd1 << zext_ln791_15_fu_1989_p1;

assign shl_ln791_1_fu_1419_p2 = 41'd1 << zext_ln791_1_fu_1415_p1;

assign shl_ln791_2_fu_1460_p2 = 41'd1 << zext_ln791_2_fu_1456_p1;

assign shl_ln791_3_fu_1501_p2 = 41'd1 << zext_ln791_3_fu_1497_p1;

assign shl_ln791_4_fu_1542_p2 = 41'd1 << zext_ln791_4_fu_1538_p1;

assign shl_ln791_5_fu_1583_p2 = 41'd1 << zext_ln791_5_fu_1579_p1;

assign shl_ln791_6_fu_1624_p2 = 41'd1 << zext_ln791_6_fu_1620_p1;

assign shl_ln791_7_fu_1665_p2 = 41'd1 << zext_ln791_7_fu_1661_p1;

assign shl_ln791_8_fu_1706_p2 = 41'd1 << zext_ln791_8_fu_1702_p1;

assign shl_ln791_9_fu_1747_p2 = 41'd1 << zext_ln791_9_fu_1743_p1;

assign shl_ln791_fu_1378_p2 = 41'd1 << zext_ln791_fu_1374_p1;

assign tmp_6_fu_822_p3 = {{N_reg_2390}, {4'd0}};

assign tmp_8_fu_944_p4 = {{select_ln2149_fu_870_p3[5:2]}};

assign tmp_V_fu_2257_p1 = p_Result_20_s_fu_2208_p17;

assign tmp_data_V_5_fu_2383_p2 = (and_ln414_4_fu_2377_p2 | and_ln414_3_fu_2371_p2);

integer ap_tvar_int_0;

always @ (shl_ln414_fu_2323_p2) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_fu_2329_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_fu_2329_p4[ap_tvar_int_0] = shl_ln414_fu_2323_p2[511 - ap_tvar_int_0];
        end
    end
end

assign tmp_user_V_2_fu_898_p3 = ((icmp_ln2113_fu_864_p2[0:0] === 1'b1) ? select_ln302_2_fu_890_p3 : tmp_user_V_fu_845_p3);

assign tmp_user_V_fu_845_p3 = ((icmp_ln2149_fu_839_p2[0:0] === 1'b1) ? 3'd5 : 3'd4);

assign trunc_ln1352_10_fu_1350_p1 = mul_ln1352_10_reg_2765[40:0];

assign trunc_ln1352_11_fu_1353_p1 = mul_ln1352_11_reg_2771[40:0];

assign trunc_ln1352_12_fu_1356_p1 = mul_ln1352_12_reg_2777[40:0];

assign trunc_ln1352_13_fu_1359_p1 = mul_ln1352_13_reg_2783[40:0];

assign trunc_ln1352_14_fu_1362_p1 = mul_ln1352_14_reg_2789[40:0];

assign trunc_ln1352_15_fu_1365_p1 = mul_ln1352_15_reg_2795[40:0];

assign trunc_ln1352_1_fu_1323_p1 = mul_ln1352_1_reg_2711[40:0];

assign trunc_ln1352_2_fu_1326_p1 = mul_ln1352_2_reg_2717[40:0];

assign trunc_ln1352_3_fu_1329_p1 = mul_ln1352_3_reg_2723[40:0];

assign trunc_ln1352_4_fu_1332_p1 = mul_ln1352_4_reg_2729[40:0];

assign trunc_ln1352_5_fu_1335_p1 = mul_ln1352_5_reg_2735[40:0];

assign trunc_ln1352_6_fu_1338_p1 = mul_ln1352_6_reg_2741[40:0];

assign trunc_ln1352_7_fu_1341_p1 = mul_ln1352_7_reg_2747[40:0];

assign trunc_ln1352_8_fu_1344_p1 = mul_ln1352_8_reg_2753[40:0];

assign trunc_ln1352_9_fu_1347_p1 = mul_ln1352_9_reg_2759[40:0];

assign trunc_ln1352_fu_1320_p1 = mul_ln1352_reg_2705[40:0];

assign trunc_ln647_fu_974_p1 = in_V_data_V_dout[31:0];

assign trunc_ln802_10_fu_1815_p1 = ashr_ln808_10_fu_1810_p2[7:0];

assign trunc_ln802_11_fu_1856_p1 = ashr_ln808_11_fu_1851_p2[7:0];

assign trunc_ln802_12_fu_1897_p1 = ashr_ln808_12_fu_1892_p2[7:0];

assign trunc_ln802_13_fu_1938_p1 = ashr_ln808_13_fu_1933_p2[7:0];

assign trunc_ln802_14_fu_1979_p1 = ashr_ln808_14_fu_1974_p2[7:0];

assign trunc_ln802_15_fu_2020_p1 = ashr_ln808_15_fu_2015_p2[7:0];

assign trunc_ln802_1_fu_1446_p1 = ashr_ln808_1_fu_1441_p2[7:0];

assign trunc_ln802_2_fu_1487_p1 = ashr_ln808_2_fu_1482_p2[7:0];

assign trunc_ln802_3_fu_1528_p1 = ashr_ln808_3_fu_1523_p2[7:0];

assign trunc_ln802_4_fu_1569_p1 = ashr_ln808_4_fu_1564_p2[7:0];

assign trunc_ln802_5_fu_1610_p1 = ashr_ln808_5_fu_1605_p2[7:0];

assign trunc_ln802_6_fu_1651_p1 = ashr_ln808_6_fu_1646_p2[7:0];

assign trunc_ln802_7_fu_1692_p1 = ashr_ln808_7_fu_1687_p2[7:0];

assign trunc_ln802_8_fu_1733_p1 = ashr_ln808_8_fu_1728_p2[7:0];

assign trunc_ln802_9_fu_1774_p1 = ashr_ln808_9_fu_1769_p2[7:0];

assign trunc_ln802_fu_1405_p1 = ashr_ln808_fu_1400_p2[7:0];

assign xor_ln414_3_fu_2305_p2 = (select_ln414_fu_2281_p3 ^ 10'd511);

assign xor_ln414_4_fu_2365_p2 = (512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 ^ and_ln414_fu_2359_p2);

assign xor_ln414_fu_2275_p2 = (zext_ln414_fu_2267_p1 ^ 10'd511);

assign zext_ln2124_fu_918_p1 = select_ln2149_fu_870_p3;

assign zext_ln2149_fu_2027_p1 = $unsigned(sext_ln2149_fu_2024_p1);

assign zext_ln414_5_fu_2271_p1 = or_ln2144_fu_2251_p2;

assign zext_ln414_6_fu_2311_p1 = select_ln414_5_fu_2297_p3;

assign zext_ln414_7_fu_2315_p1 = select_ln414_4_fu_2289_p3;

assign zext_ln414_8_fu_2319_p1 = xor_ln414_3_fu_2305_p2;

assign zext_ln414_fu_2267_p1 = Lo_assign_fu_2244_p3;

assign zext_ln791_10_fu_1784_p1 = add_ln555_10_fu_1778_p2;

assign zext_ln791_11_fu_1825_p1 = add_ln555_11_fu_1819_p2;

assign zext_ln791_12_fu_1866_p1 = add_ln555_12_fu_1860_p2;

assign zext_ln791_13_fu_1907_p1 = add_ln555_13_fu_1901_p2;

assign zext_ln791_14_fu_1948_p1 = add_ln555_14_fu_1942_p2;

assign zext_ln791_15_fu_1989_p1 = add_ln555_15_fu_1983_p2;

assign zext_ln791_1_fu_1415_p1 = add_ln555_1_fu_1409_p2;

assign zext_ln791_2_fu_1456_p1 = add_ln555_2_fu_1450_p2;

assign zext_ln791_3_fu_1497_p1 = add_ln555_3_fu_1491_p2;

assign zext_ln791_4_fu_1538_p1 = add_ln555_4_fu_1532_p2;

assign zext_ln791_5_fu_1579_p1 = add_ln555_5_fu_1573_p2;

assign zext_ln791_6_fu_1620_p1 = add_ln555_6_fu_1614_p2;

assign zext_ln791_7_fu_1661_p1 = add_ln555_7_fu_1655_p2;

assign zext_ln791_8_fu_1702_p1 = add_ln555_8_fu_1696_p2;

assign zext_ln791_9_fu_1743_p1 = add_ln555_9_fu_1737_p2;

assign zext_ln791_fu_1374_p1 = add_ln555_fu_1368_p2;

assign zext_ln808_10_fu_1806_p1 = e_10_q0;

assign zext_ln808_11_fu_1847_p1 = e_11_q0;

assign zext_ln808_12_fu_1888_p1 = e_12_q0;

assign zext_ln808_13_fu_1929_p1 = e_13_q0;

assign zext_ln808_14_fu_1970_p1 = e_14_q0;

assign zext_ln808_15_fu_2011_p1 = e_15_q0;

assign zext_ln808_1_fu_1437_p1 = e_1_q0;

assign zext_ln808_2_fu_1478_p1 = e_2_q0;

assign zext_ln808_3_fu_1519_p1 = e_3_q0;

assign zext_ln808_4_fu_1560_p1 = e_4_q0;

assign zext_ln808_5_fu_1601_p1 = e_5_q0;

assign zext_ln808_6_fu_1642_p1 = e_6_q0;

assign zext_ln808_7_fu_1683_p1 = e_7_q0;

assign zext_ln808_8_fu_1724_p1 = e_8_q0;

assign zext_ln808_9_fu_1765_p1 = e_9_q0;

assign zext_ln808_fu_1396_p1 = e_0_q0;

always @ (posedge ap_clk) begin
    out_data_data_V_reg_2396[511:32] <= 480'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    bound_reg_2402[3:0] <= 4'b0000;
    tmp_user_V_2_reg_2416[2:1] <= 2'b10;
    tmp_user_V_2_reg_2416_pp0_iter1_reg[2:1] <= 2'b10;
    tmp_user_V_2_reg_2416_pp0_iter2_reg[2:1] <= 2'b10;
    tmp_user_V_2_reg_2416_pp0_iter3_reg[2:1] <= 2'b10;
    zext_ln2124_reg_2431[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln2124_reg_2431_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //QuantAct
