// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddBias (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in_V_data_V_dout,
        in_V_data_V_empty_n,
        in_V_data_V_read,
        in_V_id_V_dout,
        in_V_id_V_empty_n,
        in_V_id_V_read,
        in_V_dest_V_dout,
        in_V_dest_V_empty_n,
        in_V_dest_V_read,
        in_V_user_V_dout,
        in_V_user_V_empty_n,
        in_V_user_V_read,
        in_V_last_V_dout,
        in_V_last_V_empty_n,
        in_V_last_V_read,
        out_V_data_V_din,
        out_V_data_V_full_n,
        out_V_data_V_write,
        out_V_id_V_din,
        out_V_id_V_full_n,
        out_V_id_V_write,
        out_V_dest_V_din,
        out_V_dest_V_full_n,
        out_V_dest_V_write,
        out_V_user_V_din,
        out_V_user_V_full_n,
        out_V_user_V_write,
        out_V_last_V_din,
        out_V_last_V_full_n,
        out_V_last_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [511:0] in_V_data_V_dout;
input   in_V_data_V_empty_n;
output   in_V_data_V_read;
input  [7:0] in_V_id_V_dout;
input   in_V_id_V_empty_n;
output   in_V_id_V_read;
input  [7:0] in_V_dest_V_dout;
input   in_V_dest_V_empty_n;
output   in_V_dest_V_read;
input  [15:0] in_V_user_V_dout;
input   in_V_user_V_empty_n;
output   in_V_user_V_read;
input  [0:0] in_V_last_V_dout;
input   in_V_last_V_empty_n;
output   in_V_last_V_read;
output  [511:0] out_V_data_V_din;
input   out_V_data_V_full_n;
output   out_V_data_V_write;
output  [7:0] out_V_id_V_din;
input   out_V_id_V_full_n;
output   out_V_id_V_write;
output  [7:0] out_V_dest_V_din;
input   out_V_dest_V_full_n;
output   out_V_dest_V_write;
output  [15:0] out_V_user_V_din;
input   out_V_user_V_full_n;
output   out_V_user_V_write;
output  [0:0] out_V_last_V_din;
input   out_V_last_V_full_n;
output   out_V_last_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_data_V_read;
reg in_V_id_V_read;
reg in_V_dest_V_read;
reg in_V_user_V_read;
reg in_V_last_V_read;
reg[511:0] out_V_data_V_din;
reg out_V_data_V_write;
reg out_V_id_V_write;
reg out_V_dest_V_write;
reg out_V_user_V_write;
reg[0:0] out_V_last_V_din;
reg out_V_last_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] bias_0_address0;
reg    bias_0_ce0;
wire   [13:0] bias_0_q0;
wire   [5:0] bias_1_address0;
reg    bias_1_ce0;
wire   [13:0] bias_1_q0;
wire   [5:0] bias_2_address0;
reg    bias_2_ce0;
wire   [13:0] bias_2_q0;
wire   [5:0] bias_3_address0;
reg    bias_3_ce0;
wire   [13:0] bias_3_q0;
wire   [5:0] bias_4_address0;
reg    bias_4_ce0;
wire   [13:0] bias_4_q0;
wire   [5:0] bias_5_address0;
reg    bias_5_ce0;
wire   [13:0] bias_5_q0;
wire   [5:0] bias_6_address0;
reg    bias_6_ce0;
wire   [13:0] bias_6_q0;
wire   [5:0] bias_7_address0;
reg    bias_7_ce0;
wire   [13:0] bias_7_q0;
wire   [5:0] bias_8_address0;
reg    bias_8_ce0;
wire   [13:0] bias_8_q0;
wire   [5:0] bias_9_address0;
reg    bias_9_ce0;
wire   [13:0] bias_9_q0;
wire   [5:0] bias_10_address0;
reg    bias_10_ce0;
wire   [13:0] bias_10_q0;
wire   [5:0] bias_11_address0;
reg    bias_11_ce0;
wire   [13:0] bias_11_q0;
wire   [5:0] bias_12_address0;
reg    bias_12_ce0;
wire   [13:0] bias_12_q0;
wire   [5:0] bias_13_address0;
reg    bias_13_ce0;
wire   [13:0] bias_13_q0;
wire   [5:0] bias_14_address0;
reg    bias_14_ce0;
wire   [13:0] bias_14_q0;
wire   [5:0] bias_15_address0;
reg    bias_15_ce0;
wire   [13:0] bias_15_q0;
reg    in_V_data_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln525_reg_1004;
reg    in_V_id_V_blk_n;
reg    in_V_dest_V_blk_n;
reg    in_V_user_V_blk_n;
reg    in_V_last_V_blk_n;
reg    out_V_data_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln525_reg_1004_pp0_iter1_reg;
reg    out_V_id_V_blk_n;
reg    out_V_dest_V_blk_n;
reg    out_V_user_V_blk_n;
reg    out_V_last_V_blk_n;
reg   [37:0] indvar_flatten_reg_545;
reg   [5:0] i_0_reg_556;
wire   [37:0] bound_fu_601_p2;
reg   [37:0] bound_reg_999;
wire    io_acc_block_signal_op16;
wire    io_acc_block_signal_op20;
reg    ap_block_state1;
wire   [0:0] icmp_ln525_fu_607_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    io_acc_block_signal_op33;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op138;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [37:0] add_ln525_fu_612_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] select_ln527_fu_624_p3;
reg   [5:0] select_ln527_reg_1013;
wire   [31:0] trunc_ln647_fu_652_p1;
reg   [31:0] trunc_ln647_reg_1018;
reg   [31:0] p_Result_1_reg_1028;
reg   [31:0] p_Result_2_reg_1038;
reg   [31:0] p_Result_3_reg_1048;
reg   [31:0] p_Result_4_reg_1058;
reg   [31:0] p_Result_5_reg_1068;
reg   [31:0] p_Result_6_reg_1078;
reg   [31:0] p_Result_7_reg_1088;
reg   [31:0] p_Result_8_reg_1098;
reg   [31:0] p_Result_9_reg_1108;
reg   [31:0] p_Result_s_reg_1118;
reg   [31:0] p_Result_10_reg_1128;
reg   [31:0] p_Result_11_reg_1138;
reg   [31:0] p_Result_12_reg_1148;
reg   [31:0] p_Result_13_reg_1158;
reg   [31:0] p_Result_14_reg_1168;
wire   [5:0] i_fu_806_p2;
reg   [5:0] i_reg_1178;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [5:0] ap_phi_mux_i_0_phi_fu_560_p4;
wire   [63:0] zext_ln533_fu_632_p1;
wire   [511:0] out_data_data_V_fu_576_p1;
wire   [511:0] tmp_data_V_9_fu_956_p17;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] out_data_last_V_fu_993_p2;
wire   [31:0] N_fu_572_p1;
wire   [35:0] tmp_1_fu_589_p3;
wire   [37:0] p_shl_fu_581_p3;
wire   [37:0] p_shl94_fu_597_p1;
wire   [0:0] icmp_ln527_fu_618_p2;
wire  signed [31:0] sext_ln215_fu_812_p1;
wire  signed [31:0] sext_ln215_509_fu_821_p1;
wire  signed [31:0] sext_ln215_510_fu_830_p1;
wire  signed [31:0] sext_ln215_511_fu_839_p1;
wire  signed [31:0] sext_ln215_512_fu_848_p1;
wire  signed [31:0] sext_ln215_513_fu_857_p1;
wire  signed [31:0] sext_ln215_514_fu_866_p1;
wire  signed [31:0] sext_ln215_515_fu_875_p1;
wire  signed [31:0] sext_ln215_516_fu_884_p1;
wire  signed [31:0] sext_ln215_517_fu_893_p1;
wire  signed [31:0] sext_ln215_518_fu_902_p1;
wire  signed [31:0] sext_ln215_519_fu_911_p1;
wire  signed [31:0] sext_ln215_520_fu_920_p1;
wire  signed [31:0] sext_ln215_521_fu_929_p1;
wire  signed [31:0] sext_ln215_522_fu_938_p1;
wire  signed [31:0] sext_ln215_523_fu_947_p1;
wire   [31:0] add_ln215_15_fu_951_p2;
wire   [31:0] add_ln215_14_fu_942_p2;
wire   [31:0] add_ln215_13_fu_933_p2;
wire   [31:0] add_ln215_12_fu_924_p2;
wire   [31:0] add_ln215_11_fu_915_p2;
wire   [31:0] add_ln215_10_fu_906_p2;
wire   [31:0] add_ln215_9_fu_897_p2;
wire   [31:0] add_ln215_8_fu_888_p2;
wire   [31:0] add_ln215_7_fu_879_p2;
wire   [31:0] add_ln215_6_fu_870_p2;
wire   [31:0] add_ln215_5_fu_861_p2;
wire   [31:0] add_ln215_4_fu_852_p2;
wire   [31:0] add_ln215_3_fu_843_p2;
wire   [31:0] add_ln215_2_fu_834_p2;
wire   [31:0] add_ln215_1_fu_825_p2;
wire   [31:0] add_ln215_fu_816_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

AddBias_bias_0 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_0_address0),
    .ce0(bias_0_ce0),
    .q0(bias_0_q0)
);

AddBias_bias_1 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_1_address0),
    .ce0(bias_1_ce0),
    .q0(bias_1_q0)
);

AddBias_bias_2 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_2_address0),
    .ce0(bias_2_ce0),
    .q0(bias_2_q0)
);

AddBias_bias_3 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_3_address0),
    .ce0(bias_3_ce0),
    .q0(bias_3_q0)
);

AddBias_bias_4 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_4_address0),
    .ce0(bias_4_ce0),
    .q0(bias_4_q0)
);

AddBias_bias_5 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_5_address0),
    .ce0(bias_5_ce0),
    .q0(bias_5_q0)
);

AddBias_bias_6 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_6_address0),
    .ce0(bias_6_ce0),
    .q0(bias_6_q0)
);

AddBias_bias_7 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_7_address0),
    .ce0(bias_7_ce0),
    .q0(bias_7_q0)
);

AddBias_bias_8 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_8_address0),
    .ce0(bias_8_ce0),
    .q0(bias_8_q0)
);

AddBias_bias_9 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_9_address0),
    .ce0(bias_9_ce0),
    .q0(bias_9_q0)
);

AddBias_bias_10 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_10_address0),
    .ce0(bias_10_ce0),
    .q0(bias_10_q0)
);

AddBias_bias_11 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_11_address0),
    .ce0(bias_11_ce0),
    .q0(bias_11_q0)
);

AddBias_bias_12 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_12_address0),
    .ce0(bias_12_ce0),
    .q0(bias_12_q0)
);

AddBias_bias_13 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_13_address0),
    .ce0(bias_13_ce0),
    .q0(bias_13_q0)
);

AddBias_bias_14 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_14_address0),
    .ce0(bias_14_ce0),
    .q0(bias_14_q0)
);

AddBias_bias_15 #(
    .DataWidth( 14 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
bias_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(bias_15_address0),
    .ce0(bias_15_ce0),
    .q0(bias_15_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0))) begin
        i_0_reg_556 <= i_reg_1178;
    end else if ((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_556 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_fu_607_p2 == 1'd0))) begin
        indvar_flatten_reg_545 <= add_ln525_fu_612_p2;
    end else if ((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_545 <= 38'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_999[37 : 4] <= bound_fu_601_p2[37 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0))) begin
        i_reg_1178 <= i_fu_806_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln525_reg_1004 <= icmp_ln525_fu_607_p2;
        icmp_ln525_reg_1004_pp0_iter1_reg <= icmp_ln525_reg_1004;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0))) begin
        p_Result_10_reg_1128 <= {{in_V_data_V_dout[383:352]}};
        p_Result_11_reg_1138 <= {{in_V_data_V_dout[415:384]}};
        p_Result_12_reg_1148 <= {{in_V_data_V_dout[447:416]}};
        p_Result_13_reg_1158 <= {{in_V_data_V_dout[479:448]}};
        p_Result_14_reg_1168 <= {{in_V_data_V_dout[511:480]}};
        p_Result_1_reg_1028 <= {{in_V_data_V_dout[63:32]}};
        p_Result_2_reg_1038 <= {{in_V_data_V_dout[95:64]}};
        p_Result_3_reg_1048 <= {{in_V_data_V_dout[127:96]}};
        p_Result_4_reg_1058 <= {{in_V_data_V_dout[159:128]}};
        p_Result_5_reg_1068 <= {{in_V_data_V_dout[191:160]}};
        p_Result_6_reg_1078 <= {{in_V_data_V_dout[223:192]}};
        p_Result_7_reg_1088 <= {{in_V_data_V_dout[255:224]}};
        p_Result_8_reg_1098 <= {{in_V_data_V_dout[287:256]}};
        p_Result_9_reg_1108 <= {{in_V_data_V_dout[319:288]}};
        p_Result_s_reg_1118 <= {{in_V_data_V_dout[351:320]}};
        select_ln527_reg_1013 <= select_ln527_fu_624_p3;
        trunc_ln647_reg_1018 <= trunc_ln647_fu_652_p1;
    end
end

always @ (*) begin
    if ((icmp_ln525_fu_607_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_0_phi_fu_560_p4 = i_reg_1178;
    end else begin
        ap_phi_mux_i_0_phi_fu_560_p4 = i_0_reg_556;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_0_ce0 = 1'b1;
    end else begin
        bias_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_10_ce0 = 1'b1;
    end else begin
        bias_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_11_ce0 = 1'b1;
    end else begin
        bias_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_12_ce0 = 1'b1;
    end else begin
        bias_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_13_ce0 = 1'b1;
    end else begin
        bias_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_14_ce0 = 1'b1;
    end else begin
        bias_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_15_ce0 = 1'b1;
    end else begin
        bias_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_1_ce0 = 1'b1;
    end else begin
        bias_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_2_ce0 = 1'b1;
    end else begin
        bias_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_3_ce0 = 1'b1;
    end else begin
        bias_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_4_ce0 = 1'b1;
    end else begin
        bias_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_5_ce0 = 1'b1;
    end else begin
        bias_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_6_ce0 = 1'b1;
    end else begin
        bias_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_7_ce0 = 1'b1;
    end else begin
        bias_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_8_ce0 = 1'b1;
    end else begin
        bias_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bias_9_ce0 = 1'b1;
    end else begin
        bias_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        in_V_data_V_blk_n = in_V_data_V_empty_n;
    end else begin
        in_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0)))) begin
        in_V_data_V_read = 1'b1;
    end else begin
        in_V_data_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        in_V_dest_V_blk_n = in_V_dest_V_empty_n;
    end else begin
        in_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0)))) begin
        in_V_dest_V_read = 1'b1;
    end else begin
        in_V_dest_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        in_V_id_V_blk_n = in_V_id_V_empty_n;
    end else begin
        in_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0)))) begin
        in_V_id_V_read = 1'b1;
    end else begin
        in_V_id_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        in_V_last_V_blk_n = in_V_last_V_empty_n;
    end else begin
        in_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0)))) begin
        in_V_last_V_read = 1'b1;
    end else begin
        in_V_last_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        in_V_user_V_blk_n = in_V_user_V_empty_n;
    end else begin
        in_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln525_reg_1004 == 1'd0)))) begin
        in_V_user_V_read = 1'b1;
    end else begin
        in_V_user_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_data_V_blk_n = out_V_data_V_full_n;
    end else begin
        out_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0))) begin
        out_V_data_V_din = tmp_data_V_9_fu_956_p17;
    end else if ((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_data_V_din = out_data_data_V_fu_576_p1;
    end else begin
        out_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_data_V_write = 1'b1;
    end else begin
        out_V_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_dest_V_blk_n = out_V_dest_V_full_n;
    end else begin
        out_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_dest_V_write = 1'b1;
    end else begin
        out_V_dest_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_id_V_blk_n = out_V_id_V_full_n;
    end else begin
        out_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_id_V_write = 1'b1;
    end else begin
        out_V_id_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_last_V_blk_n = out_V_last_V_full_n;
    end else begin
        out_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0))) begin
        out_V_last_V_din = out_data_last_V_fu_993_p2;
    end else if ((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_last_V_din = 1'd0;
    end else begin
        out_V_last_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_last_V_write = 1'b1;
    end else begin
        out_V_last_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_V_user_V_blk_n = out_V_user_V_full_n;
    end else begin
        out_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0)) | (~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_user_V_write = 1'b1;
    end else begin
        out_V_user_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln525_fu_607_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln525_fu_607_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign N_fu_572_p1 = in_V_data_V_dout[31:0];

assign add_ln215_10_fu_906_p2 = ($signed(sext_ln215_518_fu_902_p1) + $signed(p_Result_s_reg_1118));

assign add_ln215_11_fu_915_p2 = ($signed(sext_ln215_519_fu_911_p1) + $signed(p_Result_10_reg_1128));

assign add_ln215_12_fu_924_p2 = ($signed(sext_ln215_520_fu_920_p1) + $signed(p_Result_11_reg_1138));

assign add_ln215_13_fu_933_p2 = ($signed(sext_ln215_521_fu_929_p1) + $signed(p_Result_12_reg_1148));

assign add_ln215_14_fu_942_p2 = ($signed(sext_ln215_522_fu_938_p1) + $signed(p_Result_13_reg_1158));

assign add_ln215_15_fu_951_p2 = ($signed(sext_ln215_523_fu_947_p1) + $signed(p_Result_14_reg_1168));

assign add_ln215_1_fu_825_p2 = ($signed(sext_ln215_509_fu_821_p1) + $signed(p_Result_1_reg_1028));

assign add_ln215_2_fu_834_p2 = ($signed(sext_ln215_510_fu_830_p1) + $signed(p_Result_2_reg_1038));

assign add_ln215_3_fu_843_p2 = ($signed(sext_ln215_511_fu_839_p1) + $signed(p_Result_3_reg_1048));

assign add_ln215_4_fu_852_p2 = ($signed(sext_ln215_512_fu_848_p1) + $signed(p_Result_4_reg_1058));

assign add_ln215_5_fu_861_p2 = ($signed(sext_ln215_513_fu_857_p1) + $signed(p_Result_5_reg_1068));

assign add_ln215_6_fu_870_p2 = ($signed(sext_ln215_514_fu_866_p1) + $signed(p_Result_6_reg_1078));

assign add_ln215_7_fu_879_p2 = ($signed(sext_ln215_515_fu_875_p1) + $signed(p_Result_7_reg_1088));

assign add_ln215_8_fu_888_p2 = ($signed(sext_ln215_516_fu_884_p1) + $signed(p_Result_8_reg_1098));

assign add_ln215_9_fu_897_p2 = ($signed(sext_ln215_517_fu_893_p1) + $signed(p_Result_9_reg_1108));

assign add_ln215_fu_816_p2 = ($signed(sext_ln215_fu_812_p1) + $signed(trunc_ln647_reg_1018));

assign add_ln525_fu_612_p2 = (indvar_flatten_reg_545 + 38'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((io_acc_block_signal_op138 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op33 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln525_reg_1004 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((io_acc_block_signal_op138 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op33 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln525_reg_1004 == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((io_acc_block_signal_op138 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0)) | ((io_acc_block_signal_op33 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln525_reg_1004 == 1'd0)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (io_acc_block_signal_op20 == 1'b0) | (io_acc_block_signal_op16 == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((io_acc_block_signal_op33 == 1'b0) & (icmp_ln525_reg_1004 == 1'd0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((io_acc_block_signal_op138 == 1'b0) & (icmp_ln525_reg_1004_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bias_0_address0 = zext_ln533_fu_632_p1;

assign bias_10_address0 = zext_ln533_fu_632_p1;

assign bias_11_address0 = zext_ln533_fu_632_p1;

assign bias_12_address0 = zext_ln533_fu_632_p1;

assign bias_13_address0 = zext_ln533_fu_632_p1;

assign bias_14_address0 = zext_ln533_fu_632_p1;

assign bias_15_address0 = zext_ln533_fu_632_p1;

assign bias_1_address0 = zext_ln533_fu_632_p1;

assign bias_2_address0 = zext_ln533_fu_632_p1;

assign bias_3_address0 = zext_ln533_fu_632_p1;

assign bias_4_address0 = zext_ln533_fu_632_p1;

assign bias_5_address0 = zext_ln533_fu_632_p1;

assign bias_6_address0 = zext_ln533_fu_632_p1;

assign bias_7_address0 = zext_ln533_fu_632_p1;

assign bias_8_address0 = zext_ln533_fu_632_p1;

assign bias_9_address0 = zext_ln533_fu_632_p1;

assign bound_fu_601_p2 = (p_shl_fu_581_p3 - p_shl94_fu_597_p1);

assign i_fu_806_p2 = (6'd1 + select_ln527_fu_624_p3);

assign icmp_ln525_fu_607_p2 = ((indvar_flatten_reg_545 == bound_reg_999) ? 1'b1 : 1'b0);

assign icmp_ln527_fu_618_p2 = ((ap_phi_mux_i_0_phi_fu_560_p4 == 6'd48) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op138 = (out_V_user_V_full_n & out_V_last_V_full_n & out_V_id_V_full_n & out_V_dest_V_full_n & out_V_data_V_full_n);

assign io_acc_block_signal_op16 = (in_V_user_V_empty_n & in_V_last_V_empty_n & in_V_id_V_empty_n & in_V_dest_V_empty_n & in_V_data_V_empty_n);

assign io_acc_block_signal_op20 = (out_V_user_V_full_n & out_V_last_V_full_n & out_V_id_V_full_n & out_V_dest_V_full_n & out_V_data_V_full_n);

assign io_acc_block_signal_op33 = (in_V_user_V_empty_n & in_V_last_V_empty_n & in_V_id_V_empty_n & in_V_dest_V_empty_n & in_V_data_V_empty_n);

assign out_V_dest_V_din = 8'd40;

assign out_V_id_V_din = 8'd1;

assign out_V_user_V_din = 16'd49;

assign out_data_data_V_fu_576_p1 = N_fu_572_p1;

assign out_data_last_V_fu_993_p2 = ((select_ln527_reg_1013 == 6'd47) ? 1'b1 : 1'b0);

assign p_shl94_fu_597_p1 = tmp_1_fu_589_p3;

assign p_shl_fu_581_p3 = {{N_fu_572_p1}, {6'd0}};

assign select_ln527_fu_624_p3 = ((icmp_ln527_fu_618_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_i_0_phi_fu_560_p4);

assign sext_ln215_509_fu_821_p1 = $signed(bias_1_q0);

assign sext_ln215_510_fu_830_p1 = $signed(bias_2_q0);

assign sext_ln215_511_fu_839_p1 = $signed(bias_3_q0);

assign sext_ln215_512_fu_848_p1 = $signed(bias_4_q0);

assign sext_ln215_513_fu_857_p1 = $signed(bias_5_q0);

assign sext_ln215_514_fu_866_p1 = $signed(bias_6_q0);

assign sext_ln215_515_fu_875_p1 = $signed(bias_7_q0);

assign sext_ln215_516_fu_884_p1 = $signed(bias_8_q0);

assign sext_ln215_517_fu_893_p1 = $signed(bias_9_q0);

assign sext_ln215_518_fu_902_p1 = $signed(bias_10_q0);

assign sext_ln215_519_fu_911_p1 = $signed(bias_11_q0);

assign sext_ln215_520_fu_920_p1 = $signed(bias_12_q0);

assign sext_ln215_521_fu_929_p1 = $signed(bias_13_q0);

assign sext_ln215_522_fu_938_p1 = $signed(bias_14_q0);

assign sext_ln215_523_fu_947_p1 = $signed(bias_15_q0);

assign sext_ln215_fu_812_p1 = $signed(bias_0_q0);

assign tmp_1_fu_589_p3 = {{N_fu_572_p1}, {4'd0}};

assign tmp_data_V_9_fu_956_p17 = {{{{{{{{{{{{{{{{add_ln215_15_fu_951_p2}, {add_ln215_14_fu_942_p2}}, {add_ln215_13_fu_933_p2}}, {add_ln215_12_fu_924_p2}}, {add_ln215_11_fu_915_p2}}, {add_ln215_10_fu_906_p2}}, {add_ln215_9_fu_897_p2}}, {add_ln215_8_fu_888_p2}}, {add_ln215_7_fu_879_p2}}, {add_ln215_6_fu_870_p2}}, {add_ln215_5_fu_861_p2}}, {add_ln215_4_fu_852_p2}}, {add_ln215_3_fu_843_p2}}, {add_ln215_2_fu_834_p2}}, {add_ln215_1_fu_825_p2}}, {add_ln215_fu_816_p2}};

assign trunc_ln647_fu_652_p1 = in_V_data_V_dout[31:0];

assign zext_ln533_fu_632_p1 = select_ln527_fu_624_p3;

always @ (posedge ap_clk) begin
    bound_reg_999[3:0] <= 4'b0000;
end

endmodule //AddBias
