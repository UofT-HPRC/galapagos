// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ReadB (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        in_r_TID,
        in_r_TDEST,
        in_r_TUSER,
        in_r_TLAST,
        b_pipes_1_V_V_din,
        b_pipes_1_V_V_full_n,
        b_pipes_1_V_V_write,
        b_pipes_2_V_V_din,
        b_pipes_2_V_V_full_n,
        b_pipes_2_V_V_write,
        N_pipes_0_V_V_din,
        N_pipes_0_V_V_full_n,
        N_pipes_0_V_V_write,
        N_pipes_1_V_V_din,
        N_pipes_1_V_V_full_n,
        N_pipes_1_V_V_write,
        N_pipes_2_V_V_din,
        N_pipes_2_V_V_full_n,
        N_pipes_2_V_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [511:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
input  [7:0] in_r_TID;
input  [7:0] in_r_TDEST;
input  [15:0] in_r_TUSER;
input  [0:0] in_r_TLAST;
output  [255:0] b_pipes_1_V_V_din;
input   b_pipes_1_V_V_full_n;
output   b_pipes_1_V_V_write;
output  [255:0] b_pipes_2_V_V_din;
input   b_pipes_2_V_V_full_n;
output   b_pipes_2_V_V_write;
output  [31:0] N_pipes_0_V_V_din;
input   N_pipes_0_V_V_full_n;
output   N_pipes_0_V_V_write;
output  [31:0] N_pipes_1_V_V_din;
input   N_pipes_1_V_V_full_n;
output   N_pipes_1_V_V_write;
output  [31:0] N_pipes_2_V_V_din;
input   N_pipes_2_V_V_full_n;
output   N_pipes_2_V_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg b_pipes_1_V_V_write;
reg b_pipes_2_V_V_write;
reg N_pipes_0_V_V_write;
reg N_pipes_1_V_V_write;
reg N_pipes_2_V_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [511:0] in_V_data_V_0_data_out;
wire    in_V_data_V_0_vld_in;
wire    in_V_data_V_0_vld_out;
wire    in_V_data_V_0_ack_in;
reg    in_V_data_V_0_ack_out;
reg   [511:0] in_V_data_V_0_payload_A;
reg   [511:0] in_V_data_V_0_payload_B;
reg    in_V_data_V_0_sel_rd;
reg    in_V_data_V_0_sel_wr;
wire    in_V_data_V_0_sel;
wire    in_V_data_V_0_load_A;
wire    in_V_data_V_0_load_B;
reg   [1:0] in_V_data_V_0_state;
wire    in_V_data_V_0_state_cmp_full;
wire    in_V_last_V_0_vld_in;
reg    in_V_last_V_0_ack_out;
reg   [1:0] in_V_last_V_0_state;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
wire   [0:0] icmp_ln373_fu_235_p2;
reg    b_pipes_1_V_V_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln373_reg_265;
reg    b_pipes_2_V_V_blk_n;
reg    N_pipes_0_V_V_blk_n;
reg    N_pipes_1_V_V_blk_n;
reg    N_pipes_2_V_V_blk_n;
reg   [35:0] indvar_flatten_reg_187;
wire   [35:0] bound_fu_229_p2;
reg   [35:0] bound_reg_260;
reg    ap_block_state1;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [35:0] add_ln373_fu_240_p2;
wire   [255:0] tmp_V_4_fu_246_p1;
reg   [255:0] tmp_V_4_reg_274;
reg   [255:0] tmp_V_5_reg_279;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire   [31:0] tmp_V_fu_202_p1;
reg    ap_block_pp0_stage0_01001;
wire   [33:0] tmp_4_fu_217_p3;
wire   [35:0] p_shl_fu_209_p3;
wire   [35:0] p_shl2_fu_225_p1;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 in_V_data_V_0_sel_rd = 1'b0;
#0 in_V_data_V_0_sel_wr = 1'b0;
#0 in_V_data_V_0_state = 2'd0;
#0 in_V_last_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((~((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((in_V_data_V_0_ack_out == 1'b1) & (in_V_data_V_0_vld_out == 1'b1))) begin
            in_V_data_V_0_sel_rd <= ~in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((in_V_data_V_0_ack_in == 1'b1) & (in_V_data_V_0_vld_in == 1'b1))) begin
            in_V_data_V_0_sel_wr <= ~in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_data_V_0_state == 2'd2) & (in_V_data_V_0_vld_in == 1'b0)) | ((in_V_data_V_0_state == 2'd3) & (in_V_data_V_0_vld_in == 1'b0) & (in_V_data_V_0_ack_out == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd2;
        end else if ((((in_V_data_V_0_state == 2'd1) & (in_V_data_V_0_ack_out == 1'b0)) | ((in_V_data_V_0_state == 2'd3) & (in_V_data_V_0_ack_out == 1'b0) & (in_V_data_V_0_vld_in == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd1;
        end else if (((~((in_V_data_V_0_vld_in == 1'b0) & (in_V_data_V_0_ack_out == 1'b1)) & ~((in_V_data_V_0_ack_out == 1'b0) & (in_V_data_V_0_vld_in == 1'b1)) & (in_V_data_V_0_state == 2'd3)) | ((in_V_data_V_0_state == 2'd1) & (in_V_data_V_0_ack_out == 1'b1)) | ((in_V_data_V_0_state == 2'd2) & (in_V_data_V_0_vld_in == 1'b1)))) begin
            in_V_data_V_0_state <= 2'd3;
        end else begin
            in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((in_V_last_V_0_state == 2'd2) & (in_V_last_V_0_vld_in == 1'b0)) | ((in_V_last_V_0_state == 2'd3) & (in_V_last_V_0_vld_in == 1'b0) & (in_V_last_V_0_ack_out == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd2;
        end else if ((((in_V_last_V_0_state == 2'd1) & (in_V_last_V_0_ack_out == 1'b0)) | ((in_V_last_V_0_state == 2'd3) & (in_V_last_V_0_ack_out == 1'b0) & (in_V_last_V_0_vld_in == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd1;
        end else if (((~((in_V_last_V_0_vld_in == 1'b0) & (in_V_last_V_0_ack_out == 1'b1)) & ~((in_V_last_V_0_ack_out == 1'b0) & (in_V_last_V_0_vld_in == 1'b1)) & (in_V_last_V_0_state == 2'd3)) | ((in_V_last_V_0_state == 2'd1) & (in_V_last_V_0_ack_out == 1'b1)) | ((in_V_last_V_0_state == 2'd2) & (in_V_last_V_0_vld_in == 1'b1)))) begin
            in_V_last_V_0_state <= 2'd3;
        end else begin
            in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln373_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_187 <= add_ln373_fu_240_p2;
    end else if ((~((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_187 <= 36'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_reg_260[35 : 2] <= bound_fu_229_p2[35 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln373_reg_265 <= icmp_ln373_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_V_0_load_A == 1'b1)) begin
        in_V_data_V_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((in_V_data_V_0_load_B == 1'b1)) begin
        in_V_data_V_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln373_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_V_4_reg_274 <= tmp_V_4_fu_246_p1;
        tmp_V_5_reg_279 <= {{in_V_data_V_0_data_out[511:256]}};
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_pipes_0_V_V_blk_n = N_pipes_0_V_V_full_n;
    end else begin
        N_pipes_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_pipes_0_V_V_write = 1'b1;
    end else begin
        N_pipes_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_pipes_1_V_V_blk_n = N_pipes_1_V_V_full_n;
    end else begin
        N_pipes_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_pipes_1_V_V_write = 1'b1;
    end else begin
        N_pipes_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_pipes_2_V_V_blk_n = N_pipes_2_V_V_full_n;
    end else begin
        N_pipes_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_pipes_2_V_V_write = 1'b1;
    end else begin
        N_pipes_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln373_fu_235_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln373_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_pipes_1_V_V_blk_n = b_pipes_1_V_V_full_n;
    end else begin
        b_pipes_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln373_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_pipes_1_V_V_write = 1'b1;
    end else begin
        b_pipes_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln373_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_pipes_2_V_V_blk_n = b_pipes_2_V_V_full_n;
    end else begin
        b_pipes_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln373_reg_265 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_pipes_2_V_V_write = 1'b1;
    end else begin
        b_pipes_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln373_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_data_V_0_ack_out = 1'b1;
    end else begin
        in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((in_V_data_V_0_sel == 1'b1)) begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_B;
    end else begin
        in_V_data_V_0_data_out = in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((icmp_ln373_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_V_last_V_0_ack_out = 1'b1;
    end else begin
        in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln373_fu_235_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        in_r_TDATA_blk_n = in_V_data_V_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln373_fu_235_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln373_fu_235_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign N_pipes_0_V_V_din = tmp_V_fu_202_p1;

assign N_pipes_1_V_V_din = tmp_V_fu_202_p1;

assign N_pipes_2_V_V_din = tmp_V_fu_202_p1;

assign add_ln373_fu_240_p2 = (indvar_flatten_reg_187 + 36'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln373_reg_265 == 1'd0) & (b_pipes_2_V_V_full_n == 1'b0)) | ((icmp_ln373_reg_265 == 1'd0) & (b_pipes_1_V_V_full_n == 1'b0)))) | ((icmp_ln373_fu_235_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln373_reg_265 == 1'd0) & (b_pipes_2_V_V_full_n == 1'b0)) | ((icmp_ln373_reg_265 == 1'd0) & (b_pipes_1_V_V_full_n == 1'b0)))) | ((icmp_ln373_fu_235_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (((icmp_ln373_reg_265 == 1'd0) & (b_pipes_2_V_V_full_n == 1'b0)) | ((icmp_ln373_reg_265 == 1'd0) & (b_pipes_1_V_V_full_n == 1'b0)))) | ((icmp_ln373_fu_235_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (in_V_data_V_0_vld_out == 1'b0) | (1'b0 == N_pipes_2_V_V_full_n) | (1'b0 == N_pipes_1_V_V_full_n) | (1'b0 == N_pipes_0_V_V_full_n) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((icmp_ln373_fu_235_p2 == 1'd0) & (in_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((icmp_ln373_reg_265 == 1'd0) & (b_pipes_2_V_V_full_n == 1'b0)) | ((icmp_ln373_reg_265 == 1'd0) & (b_pipes_1_V_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign b_pipes_1_V_V_din = tmp_V_4_reg_274;

assign b_pipes_2_V_V_din = tmp_V_5_reg_279;

assign bound_fu_229_p2 = (p_shl_fu_209_p3 - p_shl2_fu_225_p1);

assign icmp_ln373_fu_235_p2 = ((indvar_flatten_reg_187 == bound_reg_260) ? 1'b1 : 1'b0);

assign in_V_data_V_0_ack_in = in_V_data_V_0_state[1'd1];

assign in_V_data_V_0_load_A = (in_V_data_V_0_state_cmp_full & ~in_V_data_V_0_sel_wr);

assign in_V_data_V_0_load_B = (in_V_data_V_0_state_cmp_full & in_V_data_V_0_sel_wr);

assign in_V_data_V_0_sel = in_V_data_V_0_sel_rd;

assign in_V_data_V_0_state_cmp_full = ((in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_V_data_V_0_vld_in = in_r_TVALID;

assign in_V_data_V_0_vld_out = in_V_data_V_0_state[1'd0];

assign in_V_last_V_0_vld_in = in_r_TVALID;

assign in_r_TREADY = in_V_last_V_0_state[1'd1];

assign p_shl2_fu_225_p1 = tmp_4_fu_217_p3;

assign p_shl_fu_209_p3 = {{tmp_V_fu_202_p1}, {4'd0}};

assign start_out = real_start;

assign tmp_4_fu_217_p3 = {{tmp_V_fu_202_p1}, {2'd0}};

assign tmp_V_4_fu_246_p1 = in_V_data_V_0_data_out[255:0];

assign tmp_V_fu_202_p1 = in_V_data_V_0_data_out[31:0];

always @ (posedge ap_clk) begin
    bound_reg_260[1:0] <= 2'b00;
end

endmodule //ReadB
