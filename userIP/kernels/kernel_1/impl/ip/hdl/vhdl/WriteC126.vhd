-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity WriteC126 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    N_pipe_V_V1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    N_pipe_V_V1_empty_n : IN STD_LOGIC;
    N_pipe_V_V1_read : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_data_V_din : OUT STD_LOGIC_VECTOR (511 downto 0);
    out_V_data_V_full_n : IN STD_LOGIC;
    out_V_data_V_write : OUT STD_LOGIC;
    out_V_id_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_id_V_full_n : IN STD_LOGIC;
    out_V_id_V_write : OUT STD_LOGIC;
    out_V_dest_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_V_dest_V_full_n : IN STD_LOGIC;
    out_V_dest_V_write : OUT STD_LOGIC;
    out_V_user_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_user_V_full_n : IN STD_LOGIC;
    out_V_user_V_write : OUT STD_LOGIC;
    out_V_last_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    out_V_last_V_full_n : IN STD_LOGIC;
    out_V_last_V_write : OUT STD_LOGIC );
end;


architecture behav of WriteC126 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv41_0 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_28 : STD_LOGIC_VECTOR (7 downto 0) := "00101000";
    constant ap_const_lv16_31 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000110001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv41_1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_const_lv10_180 : STD_LOGIC_VECTOR (9 downto 0) := "0110000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_3F : STD_LOGIC_VECTOR (8 downto 0) := "000111111";
    constant ap_const_lv10_1FF : STD_LOGIC_VECTOR (9 downto 0) := "0111111111";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal N_pipe_V_V1_blk_n : STD_LOGIC;
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln437_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_data_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln440_1_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_V_id_V_blk_n : STD_LOGIC;
    signal out_V_dest_V_blk_n : STD_LOGIC;
    signal out_V_user_V_blk_n : STD_LOGIC;
    signal out_V_last_V_blk_n : STD_LOGIC;
    signal indvar_flatten13_reg_225 : STD_LOGIC_VECTOR (40 downto 0);
    signal i_0_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_247 : STD_LOGIC_VECTOR (9 downto 0);
    signal n_0_reg_258 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_data_V_1_reg_269 : STD_LOGIC_VECTOR (511 downto 0);
    signal j_0_reg_279 : STD_LOGIC_VECTOR (3 downto 0);
    signal out_data_data_V_fu_290_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal io_acc_block_signal_op15 : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal bound4_fu_315_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal bound4_reg_634 : STD_LOGIC_VECTOR (40 downto 0);
    signal icmp_ln437_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal io_acc_block_signal_op84 : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln437_reg_639_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln437_fu_340_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_user_V_1_fu_380_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_user_V_1_reg_648 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_user_V_1_reg_648_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln437_fu_406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln439_fu_434_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln439_reg_658 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln442_fu_442_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln442_reg_664 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_fu_446_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_669 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln439_1_fu_458_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_data_V_2_fu_605_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_data_V_2_reg_680 : STD_LOGIC_VECTOR (511 downto 0);
    signal icmp_ln440_1_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_last_V_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_data_last_V_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_n_0_phi_fu_262_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_tmp_data_V_1_phi_fu_272_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal ap_phi_mux_j_0_phi_fu_283_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln448_fu_624_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_303_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal p_shl_fu_295_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_shl16_fu_311_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal icmp_ln448_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln439_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln437_1_fu_360_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln448_1_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln302_1_fu_372_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_user_V_fu_327_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln440_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln448_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln448_fu_352_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln448_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln440_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal n_fu_414_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln440_fu_426_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln439_fu_452_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal Lo_assign_fu_466_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln442_fu_473_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln414_fu_489_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln414_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln414_1_fu_493_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln414_fu_497_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln414_fu_503_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln414_2_fu_519_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln414_1_fu_511_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal xor_ln414_1_fu_527_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_V_3_fu_479_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln414_2_fu_533_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln414_fu_545_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal tmp_2_fu_551_p4 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln414_3_fu_537_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal zext_ln414_4_fu_541_p1 : STD_LOGIC_VECTOR (511 downto 0);
    signal shl_ln414_1_fu_569_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal lshr_ln414_fu_575_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln414_fu_581_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal xor_ln414_2_fu_587_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln414_3_fu_561_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln414_1_fu_593_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal and_ln414_2_fu_599_p2 : STD_LOGIC_VECTOR (511 downto 0);
    signal sext_ln448_fu_621_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln437_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_236 <= select_ln437_fu_406_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_236 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln437_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten13_reg_225 <= add_ln437_fu_340_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_225 <= ap_const_lv41_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln437_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_247 <= select_ln439_1_fu_458_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_247 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    j_0_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln437_reg_639 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_279 <= j_reg_669;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_279 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    n_0_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln437_reg_639 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                n_0_reg_258 <= select_ln439_reg_658;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n_0_reg_258 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    tmp_data_V_1_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln437_reg_639_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                tmp_data_V_1_reg_269 <= tmp_data_V_2_reg_680;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_data_V_1_reg_269 <= out_data_data_V_fu_290_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    bound4_reg_634(40 downto 7) <= bound4_fu_315_p2(40 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln437_reg_639 <= icmp_ln437_fu_335_p2;
                icmp_ln437_reg_639_pp0_iter1_reg <= icmp_ln437_reg_639;
                    tmp_user_V_1_reg_648_pp0_iter1_reg(0) <= tmp_user_V_1_reg_648(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln437_reg_639 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln440_1_reg_686 <= icmp_ln440_1_fu_611_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln437_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                j_reg_669 <= j_fu_446_p2;
                select_ln439_reg_658 <= select_ln439_fu_434_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln440_1_fu_611_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                out_data_last_V_reg_690 <= out_data_last_V_fu_616_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln437_reg_639 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_data_V_2_reg_680 <= tmp_data_V_2_fu_605_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln437_fu_335_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    tmp_user_V_1_reg_648(0) <= tmp_user_V_1_fu_380_p3(0);
                trunc_ln442_reg_664 <= trunc_ln442_fu_442_p1;
            end if;
        end if;
    end process;
    bound4_reg_634(6 downto 0) <= "0000000";
    tmp_user_V_1_reg_648(4 downto 1) <= "1000";
    tmp_user_V_1_reg_648_pp0_iter1_reg(4 downto 1) <= "1000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, N_pipe_V_V1_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, io_acc_block_signal_op15, icmp_ln437_fu_335_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln437_fu_335_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((icmp_ln437_fu_335_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Lo_assign_fu_466_p3 <= (trunc_ln442_reg_664 & ap_const_lv6_0);

    N_pipe_V_V1_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_pipe_V_V1_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_pipe_V_V1_blk_n <= N_pipe_V_V1_empty_n;
        else 
            N_pipe_V_V1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    N_pipe_V_V1_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_pipe_V_V1_empty_n, io_acc_block_signal_op15)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            N_pipe_V_V1_read <= ap_const_logic_1;
        else 
            N_pipe_V_V1_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln437_1_fu_360_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(i_0_reg_236));
    add_ln437_fu_340_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_225) + unsigned(ap_const_lv41_1));
    add_ln439_fu_452_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_247) + unsigned(ap_const_lv10_1));
    and_ln414_1_fu_593_p2 <= (xor_ln414_2_fu_587_p2 and ap_phi_mux_tmp_data_V_1_phi_fu_272_p4);
    and_ln414_2_fu_599_p2 <= (select_ln414_3_fu_561_p3 and and_ln414_fu_581_p2);
    and_ln414_fu_581_p2 <= (shl_ln414_1_fu_569_p2 and lshr_ln414_fu_575_p2);
    and_ln448_fu_400_p2 <= (xor_ln448_fu_388_p2 and icmp_ln440_fu_394_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln437_reg_639, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, io_acc_block_signal_op84)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (io_acc_block_signal_op84 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln437_reg_639 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln437_reg_639, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, io_acc_block_signal_op84)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (io_acc_block_signal_op84 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln437_reg_639 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter1, icmp_ln437_reg_639, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, io_acc_block_signal_op84)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (io_acc_block_signal_op84 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln437_reg_639 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, N_pipe_V_V1_empty_n, io_acc_block_signal_op15)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n, icmp_ln437_reg_639)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((icmp_ln437_reg_639 = ap_const_lv1_0) and (in_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(icmp_ln440_1_reg_686, io_acc_block_signal_op84)
    begin
                ap_block_state4_pp0_stage0_iter2 <= ((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (io_acc_block_signal_op84 = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln437_fu_335_p2)
    begin
        if ((icmp_ln437_fu_335_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_283_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln437_reg_639, j_0_reg_279, j_reg_669)
    begin
        if (((icmp_ln437_reg_639 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_283_p4 <= j_reg_669;
        else 
            ap_phi_mux_j_0_phi_fu_283_p4 <= j_0_reg_279;
        end if; 
    end process;


    ap_phi_mux_n_0_phi_fu_262_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln437_reg_639, n_0_reg_258, select_ln439_reg_658)
    begin
        if (((icmp_ln437_reg_639 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_n_0_phi_fu_262_p4 <= select_ln439_reg_658;
        else 
            ap_phi_mux_n_0_phi_fu_262_p4 <= n_0_reg_258;
        end if; 
    end process;


    ap_phi_mux_tmp_data_V_1_phi_fu_272_p4_assign_proc : process(ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, tmp_data_V_1_reg_269, icmp_ln437_reg_639_pp0_iter1_reg, tmp_data_V_2_reg_680)
    begin
        if (((icmp_ln437_reg_639_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_tmp_data_V_1_phi_fu_272_p4 <= tmp_data_V_2_reg_680;
        else 
            ap_phi_mux_tmp_data_V_1_phi_fu_272_p4 <= tmp_data_V_1_reg_269;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound4_fu_315_p2 <= std_logic_vector(unsigned(p_shl_fu_295_p3) - unsigned(p_shl16_fu_311_p1));
    icmp_ln414_fu_483_p2 <= "1" when (unsigned(Lo_assign_fu_466_p3) > unsigned(or_ln442_fu_473_p2)) else "0";
    icmp_ln437_fu_335_p2 <= "1" when (indvar_flatten13_reg_225 = bound4_reg_634) else "0";
    icmp_ln439_fu_346_p2 <= "1" when (indvar_flatten_reg_247 = ap_const_lv10_180) else "0";
    icmp_ln440_1_fu_611_p2 <= "1" when (j_reg_669 = ap_const_lv4_8) else "0";
    icmp_ln440_fu_394_p2 <= "1" when (ap_phi_mux_j_0_phi_fu_283_p4 = ap_const_lv4_8) else "0";
    icmp_ln448_1_fu_366_p2 <= "1" when (add_ln437_1_fu_360_p2 = ap_const_lv32_0) else "0";
    icmp_ln448_fu_321_p2 <= "1" when (i_0_reg_236 = ap_const_lv32_0) else "0";

    in_V_V_blk_n_assign_proc : process(in_V_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln437_reg_639)
    begin
        if (((icmp_ln437_reg_639 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln437_reg_639, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln437_reg_639 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op15 <= (out_V_user_V_full_n and out_V_last_V_full_n and out_V_id_V_full_n and out_V_dest_V_full_n and out_V_data_V_full_n);
    io_acc_block_signal_op84 <= (out_V_user_V_full_n and out_V_last_V_full_n and out_V_id_V_full_n and out_V_dest_V_full_n and out_V_data_V_full_n);
    j_fu_446_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln440_fu_426_p3));
    lshr_ln414_fu_575_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln414_4_fu_541_p1(31-1 downto 0)))));
    n_fu_414_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln448_fu_352_p3));
    or_ln440_fu_420_p2 <= (icmp_ln439_fu_346_p2 or and_ln448_fu_400_p2);
    or_ln442_fu_473_p2 <= (ap_const_lv9_3F or Lo_assign_fu_466_p3);

    out_V_data_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_data_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686)
    begin
        if ((((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_data_V_blk_n <= out_V_data_V_full_n;
        else 
            out_V_data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_data_V_din_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_pipe_V_V1_empty_n, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, out_data_data_V_fu_290_p1, io_acc_block_signal_op15, tmp_data_V_2_reg_680, ap_block_pp0_stage0_01001)
    begin
        if (((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            out_V_data_V_din <= tmp_data_V_2_reg_680;
        elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_data_V_din <= out_data_data_V_fu_290_p1;
        else 
            out_V_data_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_V_data_V_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_pipe_V_V1_empty_n, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, io_acc_block_signal_op15, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_data_V_write <= ap_const_logic_1;
        else 
            out_V_data_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_V_dest_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_dest_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686)
    begin
        if ((((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_dest_V_blk_n <= out_V_dest_V_full_n;
        else 
            out_V_dest_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_dest_V_din <= ap_const_lv8_28;

    out_V_dest_V_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_pipe_V_V1_empty_n, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, io_acc_block_signal_op15, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_dest_V_write <= ap_const_logic_1;
        else 
            out_V_dest_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_V_id_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_id_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686)
    begin
        if ((((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_id_V_blk_n <= out_V_id_V_full_n;
        else 
            out_V_id_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_id_V_din <= ap_const_lv8_1;

    out_V_id_V_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_pipe_V_V1_empty_n, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, io_acc_block_signal_op15, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_id_V_write <= ap_const_logic_1;
        else 
            out_V_id_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_V_last_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_last_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686)
    begin
        if ((((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_last_V_blk_n <= out_V_last_V_full_n;
        else 
            out_V_last_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_last_V_din_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_pipe_V_V1_empty_n, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, io_acc_block_signal_op15, out_data_last_V_reg_690, ap_block_pp0_stage0_01001)
    begin
        if (((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            out_V_last_V_din <= out_data_last_V_reg_690;
        elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_last_V_din <= ap_const_lv1_0;
        else 
            out_V_last_V_din <= "X";
        end if; 
    end process;


    out_V_last_V_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_pipe_V_V1_empty_n, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, io_acc_block_signal_op15, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_last_V_write <= ap_const_logic_1;
        else 
            out_V_last_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_V_user_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_V_user_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686)
    begin
        if ((((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_user_V_blk_n <= out_V_user_V_full_n;
        else 
            out_V_user_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_user_V_din_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_pipe_V_V1_empty_n, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, io_acc_block_signal_op15, ap_block_pp0_stage0_01001, zext_ln448_fu_624_p1)
    begin
        if (((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            out_V_user_V_din <= zext_ln448_fu_624_p1;
        elsif ((not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_V_user_V_din <= ap_const_lv16_31;
        else 
            out_V_user_V_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_V_user_V_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, N_pipe_V_V1_empty_n, ap_enable_reg_pp0_iter2, icmp_ln440_1_reg_686, io_acc_block_signal_op15, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln440_1_reg_686 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((ap_start = ap_const_logic_0) or (ap_const_logic_0 = N_pipe_V_V1_empty_n) or (io_acc_block_signal_op15 = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            out_V_user_V_write <= ap_const_logic_1;
        else 
            out_V_user_V_write <= ap_const_logic_0;
        end if; 
    end process;

    out_data_data_V_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(N_pipe_V_V1_dout),512));
    out_data_last_V_fu_616_p2 <= "1" when (select_ln439_reg_658 = ap_const_lv6_2F) else "0";
    p_shl16_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_303_p3),41));
    p_shl_fu_295_p3 <= (N_pipe_V_V1_dout & ap_const_lv9_0);
    select_ln302_1_fu_372_p3 <= 
        ap_const_lv5_11 when (icmp_ln448_1_fu_366_p2(0) = '1') else 
        ap_const_lv5_10;
    select_ln414_1_fu_511_p3 <= 
        zext_ln414_1_fu_493_p1 when (icmp_ln414_fu_483_p2(0) = '1') else 
        zext_ln414_fu_489_p1;
    select_ln414_2_fu_519_p3 <= 
        xor_ln414_fu_497_p2 when (icmp_ln414_fu_483_p2(0) = '1') else 
        zext_ln414_fu_489_p1;
    select_ln414_3_fu_561_p3 <= 
        tmp_2_fu_551_p4 when (icmp_ln414_fu_483_p2(0) = '1') else 
        shl_ln414_fu_545_p2;
    select_ln414_fu_503_p3 <= 
        zext_ln414_fu_489_p1 when (icmp_ln414_fu_483_p2(0) = '1') else 
        zext_ln414_1_fu_493_p1;
    select_ln437_fu_406_p3 <= 
        add_ln437_1_fu_360_p2 when (icmp_ln439_fu_346_p2(0) = '1') else 
        i_0_reg_236;
    select_ln439_1_fu_458_p3 <= 
        ap_const_lv10_1 when (icmp_ln439_fu_346_p2(0) = '1') else 
        add_ln439_fu_452_p2;
    select_ln439_fu_434_p3 <= 
        n_fu_414_p2 when (and_ln448_fu_400_p2(0) = '1') else 
        select_ln448_fu_352_p3;
    select_ln440_fu_426_p3 <= 
        ap_const_lv4_0 when (or_ln440_fu_420_p2(0) = '1') else 
        ap_phi_mux_j_0_phi_fu_283_p4;
    select_ln448_fu_352_p3 <= 
        ap_const_lv6_0 when (icmp_ln439_fu_346_p2(0) = '1') else 
        ap_phi_mux_n_0_phi_fu_262_p4;
        sext_ln448_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_user_V_1_reg_648_pp0_iter1_reg),6));

    shl_ln414_1_fu_569_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv512_lc_1),to_integer(unsigned('0' & zext_ln414_3_fu_537_p1(31-1 downto 0)))));
    shl_ln414_fu_545_p2 <= std_logic_vector(shift_left(unsigned(tmp_V_3_fu_479_p1),to_integer(unsigned('0' & zext_ln414_2_fu_533_p1(31-1 downto 0)))));
    
    tmp_2_fu_551_p4_proc : process(shl_ln414_fu_545_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(512+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_2_fu_551_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(512 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(9 - 1 downto 0) := ap_const_lv32_1FF(9 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(9 - 1 downto 0) := ap_const_lv32_0(9 - 1 downto 0);
        v0_cpy := shl_ln414_fu_545_p2;
        if (vlo_cpy(9 - 1 downto 0) > vhi_cpy(9 - 1 downto 0)) then
            vhi_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_0(9-1 downto 0)));
            vlo_cpy(9-1 downto 0) := std_logic_vector(512-1-unsigned(ap_const_lv32_1FF(9-1 downto 0)));
            for tmp_2_fu_551_p4_i in 0 to 512-1 loop
                v0_cpy(tmp_2_fu_551_p4_i) := shl_ln414_fu_545_p2(512-1-tmp_2_fu_551_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(9-1 downto 0)))));

        section := (others=>'0');
        section(9-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(9-1 downto 0)) - unsigned(vlo_cpy(9-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(512-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_2_fu_551_p4 <= resvalue(512-1 downto 0);
    end process;

    tmp_V_3_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_V_V_dout),512));
    tmp_data_V_2_fu_605_p2 <= (and_ln414_2_fu_599_p2 or and_ln414_1_fu_593_p2);
    tmp_fu_303_p3 <= (N_pipe_V_V1_dout & ap_const_lv7_0);
    tmp_user_V_1_fu_380_p3 <= 
        select_ln302_1_fu_372_p3 when (icmp_ln439_fu_346_p2(0) = '1') else 
        tmp_user_V_fu_327_p3;
    tmp_user_V_fu_327_p3 <= 
        ap_const_lv5_11 when (icmp_ln448_fu_321_p2(0) = '1') else 
        ap_const_lv5_10;
    trunc_ln442_fu_442_p1 <= select_ln440_fu_426_p3(3 - 1 downto 0);
    xor_ln414_1_fu_527_p2 <= (select_ln414_fu_503_p3 xor ap_const_lv10_1FF);
    xor_ln414_2_fu_587_p2 <= (ap_const_lv512_lc_1 xor and_ln414_fu_581_p2);
    xor_ln414_fu_497_p2 <= (zext_ln414_fu_489_p1 xor ap_const_lv10_1FF);
    xor_ln448_fu_388_p2 <= (icmp_ln439_fu_346_p2 xor ap_const_lv1_1);
    zext_ln414_1_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln442_fu_473_p2),10));
    zext_ln414_2_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_2_fu_519_p3),512));
    zext_ln414_3_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln414_1_fu_511_p3),512));
    zext_ln414_4_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln414_1_fu_527_p2),512));
    zext_ln414_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Lo_assign_fu_466_p3),10));
    zext_ln448_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln448_fu_621_p1),16));
end behav;
