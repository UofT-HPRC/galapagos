// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module WriteC126 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        N_pipe_V_V1_dout,
        N_pipe_V_V1_empty_n,
        N_pipe_V_V1_read,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_data_V_din,
        out_V_data_V_full_n,
        out_V_data_V_write,
        out_V_id_V_din,
        out_V_id_V_full_n,
        out_V_id_V_write,
        out_V_dest_V_din,
        out_V_dest_V_full_n,
        out_V_dest_V_write,
        out_V_user_V_din,
        out_V_user_V_full_n,
        out_V_user_V_write,
        out_V_last_V_din,
        out_V_last_V_full_n,
        out_V_last_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] N_pipe_V_V1_dout;
input   N_pipe_V_V1_empty_n;
output   N_pipe_V_V1_read;
input  [63:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [511:0] out_V_data_V_din;
input   out_V_data_V_full_n;
output   out_V_data_V_write;
output  [7:0] out_V_id_V_din;
input   out_V_id_V_full_n;
output   out_V_id_V_write;
output  [7:0] out_V_dest_V_din;
input   out_V_dest_V_full_n;
output   out_V_dest_V_write;
output  [15:0] out_V_user_V_din;
input   out_V_user_V_full_n;
output   out_V_user_V_write;
output  [0:0] out_V_last_V_din;
input   out_V_last_V_full_n;
output   out_V_last_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg N_pipe_V_V1_read;
reg in_V_V_read;
reg[511:0] out_V_data_V_din;
reg out_V_data_V_write;
reg out_V_id_V_write;
reg out_V_dest_V_write;
reg[15:0] out_V_user_V_din;
reg out_V_user_V_write;
reg[0:0] out_V_last_V_din;
reg out_V_last_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    N_pipe_V_V1_blk_n;
reg    in_V_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln437_reg_639;
reg    out_V_data_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln440_1_reg_686;
reg    out_V_id_V_blk_n;
reg    out_V_dest_V_blk_n;
reg    out_V_user_V_blk_n;
reg    out_V_last_V_blk_n;
reg   [40:0] indvar_flatten13_reg_225;
reg   [31:0] i_0_reg_236;
reg   [9:0] indvar_flatten_reg_247;
reg   [5:0] n_0_reg_258;
reg   [511:0] tmp_data_V_1_reg_269;
reg   [3:0] j_0_reg_279;
wire   [511:0] out_data_data_V_fu_290_p1;
wire    io_acc_block_signal_op15;
reg    ap_block_state1;
wire   [40:0] bound4_fu_315_p2;
reg   [40:0] bound4_reg_634;
wire   [0:0] icmp_ln437_fu_335_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    io_acc_block_signal_op84;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln437_reg_639_pp0_iter1_reg;
wire   [40:0] add_ln437_fu_340_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] tmp_user_V_1_fu_380_p3;
reg   [4:0] tmp_user_V_1_reg_648;
reg   [4:0] tmp_user_V_1_reg_648_pp0_iter1_reg;
wire   [31:0] select_ln437_fu_406_p3;
wire   [5:0] select_ln439_fu_434_p3;
reg   [5:0] select_ln439_reg_658;
wire   [2:0] trunc_ln442_fu_442_p1;
reg   [2:0] trunc_ln442_reg_664;
wire   [3:0] j_fu_446_p2;
reg   [3:0] j_reg_669;
wire   [9:0] select_ln439_1_fu_458_p3;
wire   [511:0] tmp_data_V_2_fu_605_p2;
reg   [511:0] tmp_data_V_2_reg_680;
wire   [0:0] icmp_ln440_1_fu_611_p2;
wire   [0:0] out_data_last_V_fu_616_p2;
reg   [0:0] out_data_last_V_reg_690;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [5:0] ap_phi_mux_n_0_phi_fu_262_p4;
reg   [511:0] ap_phi_mux_tmp_data_V_1_phi_fu_272_p4;
reg   [3:0] ap_phi_mux_j_0_phi_fu_283_p4;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln448_fu_624_p1;
wire   [38:0] tmp_fu_303_p3;
wire   [40:0] p_shl_fu_295_p3;
wire   [40:0] p_shl16_fu_311_p1;
wire   [0:0] icmp_ln448_fu_321_p2;
wire   [0:0] icmp_ln439_fu_346_p2;
wire   [31:0] add_ln437_1_fu_360_p2;
wire   [0:0] icmp_ln448_1_fu_366_p2;
wire   [4:0] select_ln302_1_fu_372_p3;
wire   [4:0] tmp_user_V_fu_327_p3;
wire   [0:0] icmp_ln440_fu_394_p2;
wire   [0:0] xor_ln448_fu_388_p2;
wire   [5:0] select_ln448_fu_352_p3;
wire   [0:0] and_ln448_fu_400_p2;
wire   [0:0] or_ln440_fu_420_p2;
wire   [5:0] n_fu_414_p2;
wire   [3:0] select_ln440_fu_426_p3;
wire   [9:0] add_ln439_fu_452_p2;
wire   [8:0] Lo_assign_fu_466_p3;
wire   [8:0] or_ln442_fu_473_p2;
wire   [9:0] zext_ln414_fu_489_p1;
wire   [0:0] icmp_ln414_fu_483_p2;
wire   [9:0] zext_ln414_1_fu_493_p1;
wire   [9:0] xor_ln414_fu_497_p2;
wire   [9:0] select_ln414_fu_503_p3;
wire   [9:0] select_ln414_2_fu_519_p3;
wire   [9:0] select_ln414_1_fu_511_p3;
wire   [9:0] xor_ln414_1_fu_527_p2;
wire   [511:0] tmp_V_3_fu_479_p1;
wire   [511:0] zext_ln414_2_fu_533_p1;
wire   [511:0] shl_ln414_fu_545_p2;
reg   [511:0] tmp_2_fu_551_p4;
wire   [511:0] zext_ln414_3_fu_537_p1;
wire   [511:0] zext_ln414_4_fu_541_p1;
wire   [511:0] shl_ln414_1_fu_569_p2;
wire   [511:0] lshr_ln414_fu_575_p2;
wire   [511:0] and_ln414_fu_581_p2;
wire   [511:0] xor_ln414_2_fu_587_p2;
wire   [511:0] select_ln414_3_fu_561_p3;
wire   [511:0] and_ln414_1_fu_593_p2;
wire   [511:0] and_ln414_2_fu_599_p2;
wire  signed [5:0] sext_ln448_fu_621_p1;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_236 <= select_ln437_fu_406_p3;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_236 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten13_reg_225 <= add_ln437_fu_340_p2;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_225 <= 41'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_247 <= select_ln439_1_fu_458_p3;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_247 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_reg_639 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_279 <= j_reg_669;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_279 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_reg_639 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        n_0_reg_258 <= select_ln439_reg_658;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_0_reg_258 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_reg_639_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_1_reg_269 <= tmp_data_V_2_reg_680;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_data_V_1_reg_269 <= out_data_data_V_fu_290_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound4_reg_634[40 : 7] <= bound4_fu_315_p2[40 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln437_reg_639 <= icmp_ln437_fu_335_p2;
        icmp_ln437_reg_639_pp0_iter1_reg <= icmp_ln437_reg_639;
        tmp_user_V_1_reg_648_pp0_iter1_reg[0] <= tmp_user_V_1_reg_648[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_reg_639 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln440_1_reg_686 <= icmp_ln440_1_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_reg_669 <= j_fu_446_p2;
        select_ln439_reg_658 <= select_ln439_fu_434_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln440_1_fu_611_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_data_last_V_reg_690 <= out_data_last_V_fu_616_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_reg_639 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_data_V_2_reg_680 <= tmp_data_V_2_fu_605_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln437_fu_335_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_user_V_1_reg_648[0] <= tmp_user_V_1_fu_380_p3[0];
        trunc_ln442_reg_664 <= trunc_ln442_fu_442_p1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_pipe_V_V1_blk_n = N_pipe_V_V1_empty_n;
    end else begin
        N_pipe_V_V1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_pipe_V_V1_read = 1'b1;
    end else begin
        N_pipe_V_V1_read = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln437_fu_335_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln437_reg_639 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_0_phi_fu_283_p4 = j_reg_669;
    end else begin
        ap_phi_mux_j_0_phi_fu_283_p4 = j_0_reg_279;
    end
end

always @ (*) begin
    if (((icmp_ln437_reg_639 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_n_0_phi_fu_262_p4 = select_ln439_reg_658;
    end else begin
        ap_phi_mux_n_0_phi_fu_262_p4 = n_0_reg_258;
    end
end

always @ (*) begin
    if (((icmp_ln437_reg_639_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_tmp_data_V_1_phi_fu_272_p4 = tmp_data_V_2_reg_680;
    end else begin
        ap_phi_mux_tmp_data_V_1_phi_fu_272_p4 = tmp_data_V_1_reg_269;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln437_reg_639 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln437_reg_639 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln440_1_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_data_V_blk_n = out_V_data_V_full_n;
    end else begin
        out_V_data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln440_1_reg_686 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        out_V_data_V_din = tmp_data_V_2_reg_680;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_data_V_din = out_data_data_V_fu_290_p1;
    end else begin
        out_V_data_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln440_1_reg_686 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_data_V_write = 1'b1;
    end else begin
        out_V_data_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln440_1_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_dest_V_blk_n = out_V_dest_V_full_n;
    end else begin
        out_V_dest_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln440_1_reg_686 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_dest_V_write = 1'b1;
    end else begin
        out_V_dest_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln440_1_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_id_V_blk_n = out_V_id_V_full_n;
    end else begin
        out_V_id_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((icmp_ln440_1_reg_686 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_id_V_write = 1'b1;
    end else begin
        out_V_id_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln440_1_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_last_V_blk_n = out_V_last_V_full_n;
    end else begin
        out_V_last_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln440_1_reg_686 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        out_V_last_V_din = out_data_last_V_reg_690;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_last_V_din = 1'd0;
    end else begin
        out_V_last_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln440_1_reg_686 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_last_V_write = 1'b1;
    end else begin
        out_V_last_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln440_1_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_user_V_blk_n = out_V_user_V_full_n;
    end else begin
        out_V_user_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln440_1_reg_686 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        out_V_user_V_din = zext_ln448_fu_624_p1;
    end else if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_V_user_V_din = 16'd49;
    end else begin
        out_V_user_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln440_1_reg_686 == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)) | (~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        out_V_user_V_write = 1'b1;
    end else begin
        out_V_user_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln437_fu_335_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((icmp_ln437_fu_335_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Lo_assign_fu_466_p3 = {{trunc_ln442_reg_664}, {6'd0}};

assign add_ln437_1_fu_360_p2 = (32'd1 + i_0_reg_236);

assign add_ln437_fu_340_p2 = (indvar_flatten13_reg_225 + 41'd1);

assign add_ln439_fu_452_p2 = (indvar_flatten_reg_247 + 10'd1);

assign and_ln414_1_fu_593_p2 = (xor_ln414_2_fu_587_p2 & ap_phi_mux_tmp_data_V_1_phi_fu_272_p4);

assign and_ln414_2_fu_599_p2 = (select_ln414_3_fu_561_p3 & and_ln414_fu_581_p2);

assign and_ln414_fu_581_p2 = (shl_ln414_1_fu_569_p2 & lshr_ln414_fu_575_p2);

assign and_ln448_fu_400_p2 = (xor_ln448_fu_388_p2 & icmp_ln440_fu_394_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln440_1_reg_686 == 1'd1) & (io_acc_block_signal_op84 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln437_reg_639 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln440_1_reg_686 == 1'd1) & (io_acc_block_signal_op84 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln437_reg_639 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln440_1_reg_686 == 1'd1) & (io_acc_block_signal_op84 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln437_reg_639 == 1'd0) & (in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (1'b0 == N_pipe_V_V1_empty_n) | (io_acc_block_signal_op15 == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((icmp_ln437_reg_639 == 1'd0) & (in_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = ((icmp_ln440_1_reg_686 == 1'd1) & (io_acc_block_signal_op84 == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bound4_fu_315_p2 = (p_shl_fu_295_p3 - p_shl16_fu_311_p1);

assign icmp_ln414_fu_483_p2 = ((Lo_assign_fu_466_p3 > or_ln442_fu_473_p2) ? 1'b1 : 1'b0);

assign icmp_ln437_fu_335_p2 = ((indvar_flatten13_reg_225 == bound4_reg_634) ? 1'b1 : 1'b0);

assign icmp_ln439_fu_346_p2 = ((indvar_flatten_reg_247 == 10'd384) ? 1'b1 : 1'b0);

assign icmp_ln440_1_fu_611_p2 = ((j_reg_669 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln440_fu_394_p2 = ((ap_phi_mux_j_0_phi_fu_283_p4 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln448_1_fu_366_p2 = ((add_ln437_1_fu_360_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln448_fu_321_p2 = ((i_0_reg_236 == 32'd0) ? 1'b1 : 1'b0);

assign io_acc_block_signal_op15 = (out_V_user_V_full_n & out_V_last_V_full_n & out_V_id_V_full_n & out_V_dest_V_full_n & out_V_data_V_full_n);

assign io_acc_block_signal_op84 = (out_V_user_V_full_n & out_V_last_V_full_n & out_V_id_V_full_n & out_V_dest_V_full_n & out_V_data_V_full_n);

assign j_fu_446_p2 = (4'd1 + select_ln440_fu_426_p3);

assign lshr_ln414_fu_575_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 >> zext_ln414_4_fu_541_p1;

assign n_fu_414_p2 = (6'd1 + select_ln448_fu_352_p3);

assign or_ln440_fu_420_p2 = (icmp_ln439_fu_346_p2 | and_ln448_fu_400_p2);

assign or_ln442_fu_473_p2 = (9'd63 | Lo_assign_fu_466_p3);

assign out_V_dest_V_din = 8'd40;

assign out_V_id_V_din = 8'd1;

assign out_data_data_V_fu_290_p1 = N_pipe_V_V1_dout;

assign out_data_last_V_fu_616_p2 = ((select_ln439_reg_658 == 6'd47) ? 1'b1 : 1'b0);

assign p_shl16_fu_311_p1 = tmp_fu_303_p3;

assign p_shl_fu_295_p3 = {{N_pipe_V_V1_dout}, {9'd0}};

assign select_ln302_1_fu_372_p3 = ((icmp_ln448_1_fu_366_p2[0:0] === 1'b1) ? 5'd17 : 5'd16);

assign select_ln414_1_fu_511_p3 = ((icmp_ln414_fu_483_p2[0:0] === 1'b1) ? zext_ln414_1_fu_493_p1 : zext_ln414_fu_489_p1);

assign select_ln414_2_fu_519_p3 = ((icmp_ln414_fu_483_p2[0:0] === 1'b1) ? xor_ln414_fu_497_p2 : zext_ln414_fu_489_p1);

assign select_ln414_3_fu_561_p3 = ((icmp_ln414_fu_483_p2[0:0] === 1'b1) ? tmp_2_fu_551_p4 : shl_ln414_fu_545_p2);

assign select_ln414_fu_503_p3 = ((icmp_ln414_fu_483_p2[0:0] === 1'b1) ? zext_ln414_fu_489_p1 : zext_ln414_1_fu_493_p1);

assign select_ln437_fu_406_p3 = ((icmp_ln439_fu_346_p2[0:0] === 1'b1) ? add_ln437_1_fu_360_p2 : i_0_reg_236);

assign select_ln439_1_fu_458_p3 = ((icmp_ln439_fu_346_p2[0:0] === 1'b1) ? 10'd1 : add_ln439_fu_452_p2);

assign select_ln439_fu_434_p3 = ((and_ln448_fu_400_p2[0:0] === 1'b1) ? n_fu_414_p2 : select_ln448_fu_352_p3);

assign select_ln440_fu_426_p3 = ((or_ln440_fu_420_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_j_0_phi_fu_283_p4);

assign select_ln448_fu_352_p3 = ((icmp_ln439_fu_346_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_n_0_phi_fu_262_p4);

assign sext_ln448_fu_621_p1 = $signed(tmp_user_V_1_reg_648_pp0_iter1_reg);

assign shl_ln414_1_fu_569_p2 = 512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 << zext_ln414_3_fu_537_p1;

assign shl_ln414_fu_545_p2 = tmp_V_3_fu_479_p1 << zext_ln414_2_fu_533_p1;

integer ap_tvar_int_0;

always @ (shl_ln414_fu_545_p2) begin
    for (ap_tvar_int_0 = 512 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 511 - 0) begin
            tmp_2_fu_551_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_2_fu_551_p4[ap_tvar_int_0] = shl_ln414_fu_545_p2[511 - ap_tvar_int_0];
        end
    end
end

assign tmp_V_3_fu_479_p1 = in_V_V_dout;

assign tmp_data_V_2_fu_605_p2 = (and_ln414_2_fu_599_p2 | and_ln414_1_fu_593_p2);

assign tmp_fu_303_p3 = {{N_pipe_V_V1_dout}, {7'd0}};

assign tmp_user_V_1_fu_380_p3 = ((icmp_ln439_fu_346_p2[0:0] === 1'b1) ? select_ln302_1_fu_372_p3 : tmp_user_V_fu_327_p3);

assign tmp_user_V_fu_327_p3 = ((icmp_ln448_fu_321_p2[0:0] === 1'b1) ? 5'd17 : 5'd16);

assign trunc_ln442_fu_442_p1 = select_ln440_fu_426_p3[2:0];

assign xor_ln414_1_fu_527_p2 = (select_ln414_fu_503_p3 ^ 10'd511);

assign xor_ln414_2_fu_587_p2 = (512'd13407807929942597099574024998205846127479365820592393377723561443721764030073546976801874298166903427690031858186486050853753882811946569946433649006084095 ^ and_ln414_fu_581_p2);

assign xor_ln414_fu_497_p2 = (zext_ln414_fu_489_p1 ^ 10'd511);

assign xor_ln448_fu_388_p2 = (icmp_ln439_fu_346_p2 ^ 1'd1);

assign zext_ln414_1_fu_493_p1 = or_ln442_fu_473_p2;

assign zext_ln414_2_fu_533_p1 = select_ln414_2_fu_519_p3;

assign zext_ln414_3_fu_537_p1 = select_ln414_1_fu_511_p3;

assign zext_ln414_4_fu_541_p1 = xor_ln414_1_fu_527_p2;

assign zext_ln414_fu_489_p1 = Lo_assign_fu_466_p3;

assign zext_ln448_fu_624_p1 = $unsigned(sext_ln448_fu_621_p1);

always @ (posedge ap_clk) begin
    bound4_reg_634[6:0] <= 7'b0000000;
    tmp_user_V_1_reg_648[4:1] <= 4'b1000;
    tmp_user_V_1_reg_648_pp0_iter1_reg[4:1] <= 4'b1000;
end

endmodule //WriteC126
