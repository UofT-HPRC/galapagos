// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ether_protocol_spliter,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.350750,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1833,HLS_SYN_LUT=1348,HLS_VERSION=2019_1}" *)

module ether_protocol_spliter (
        ap_clk,
        ap_rst,
        myMacAddr_V,
        s_axis_data_V,
        s_axis_keep_V,
        s_axis_last_V,
        s_axis_valid_V,
        arp_data_V,
        arp_valid_V,
        ip_data_V,
        ip_valid_V,
        payload_data_V,
        payload_valid_V,
        payload_last_V,
        payload_len_data_V,
        payload_len_valid_V
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input  [47:0] myMacAddr_V;
input  [511:0] s_axis_data_V;
input  [63:0] s_axis_keep_V;
input  [0:0] s_axis_last_V;
input  [0:0] s_axis_valid_V;
output  [335:0] arp_data_V;
output  [0:0] arp_valid_V;
output  [335:0] ip_data_V;
output  [0:0] ip_valid_V;
output  [511:0] payload_data_V;
output  [0:0] payload_valid_V;
output  [0:0] payload_last_V;
output  [15:0] payload_len_data_V;
output  [0:0] payload_len_valid_V;

reg   [335:0] arp_output_reg_data_s;
reg   [0:0] arp_output_reg_valid;
reg   [335:0] ip_output_reg_data_V;
reg   [0:0] ip_output_reg_valid_s;
reg   [511:0] payload_output_reg_d;
reg   [0:0] payload_output_reg_v;
reg   [0:0] payload_output_reg_l;
reg   [15:0] payload_len_reg_data;
reg   [0:0] payload_len_reg_vali;
reg   [0:0] axis_input_reg_valid;
reg   [511:0] axis_input_reg_data_s;
reg   [47:0] myMacAddr_reg_V;
reg   [0:0] in_ip_packet_V;
reg   [0:0] axis_input_reg_last_s;
reg   [63:0] axis_input_reg_keep_s;
reg   [0:0] ap_phi_mux_val_assign_1_phi_fu_232_p6;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] lhs_V_3_load_fu_330_p1;
wire   [0:0] or_ln63_fu_415_p2;
wire   [0:0] and_ln63_fu_427_p2;
reg   [0:0] ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4;
wire   [0:0] ret_V_4_fu_568_p2;
wire   [511:0] p_Result_s_10_fu_648_p5;
reg   [511:0] ap_phi_mux_p_Val2_3_phi_fu_256_p4;
wire   [0:0] ret_V_10_fu_771_p2;
reg   [0:0] ap_phi_mux_storemerge1171_phi_fu_265_p6;
wire   [0:0] ret_V_8_fu_759_p2;
wire   [0:0] or_ln70_fu_580_p2;
wire   [0:0] or_ln73_fu_620_p2;
wire   [0:0] or_ln73_1_fu_632_p2;
wire   [0:0] icmp_ln879_4_fu_450_p2;
wire   [0:0] and_ln879_1_fu_397_p2;
wire   [511:0] select_ln1355_1_fu_727_p3;
wire   [0:0] or_ln1355_1_fu_713_p2;
wire   [0:0] ret_V_fu_556_p2;
wire   [15:0] add_ln214_fu_602_p2;
wire   [0:0] and_ln879_3_fu_490_p2;
wire   [0:0] and_ln96_fu_784_p2;
wire   [0:0] or_ln96_1_fu_802_p2;
wire   [47:0] p_Result_s_fu_353_p4;
wire   [15:0] p_Result_1_fu_369_p4;
wire   [0:0] icmp_ln879_fu_363_p2;
wire   [0:0] xor_ln761_fu_385_p2;
wire   [0:0] and_ln879_fu_391_p2;
wire   [0:0] icmp_ln879_1_fu_379_p2;
wire   [0:0] icmp_ln879_2_fu_409_p2;
wire   [0:0] icmp_ln879_3_fu_421_p2;
wire   [47:0] p_Result_5_fu_440_p4;
wire   [15:0] p_Result_6_fu_456_p4;
wire   [0:0] icmp_ln879_5_fu_466_p2;
wire   [0:0] xor_ln761_1_fu_472_p2;
wire   [0:0] and_ln64_fu_478_p2;
wire   [0:0] and_ln879_2_fu_484_p2;
wire   [0:0] ret_V_14_fu_506_p2;
wire   [0:0] tmp_fu_516_p3;
wire   [0:0] tmp_1_fu_530_p3;
wire   [0:0] xor_ln1355_fu_538_p2;
wire   [0:0] and_ln1355_fu_544_p2;
wire   [0:0] ret_V_15_fu_524_p2;
wire   [0:0] ret_V_16_fu_550_p2;
wire   [0:0] icmp_ln70_fu_574_p2;
wire   [15:0] p_Result_4_fu_592_p4;
wire   [0:0] icmp_ln879_6_fu_614_p2;
wire   [0:0] icmp_ln73_fu_626_p2;
wire   [175:0] trunc_ln647_fu_644_p1;
wire   [0:0] rhs_V_fu_661_p2;
wire   [335:0] p_Result_8_fu_673_p4;
wire   [0:0] or_ln1355_fu_707_p2;
wire   [0:0] ret_V_6_fu_667_p2;
wire   [511:0] p_Result_2_fu_683_p5;
wire   [511:0] p_Result_3_fu_695_p5;
wire   [511:0] select_ln1355_fu_719_p3;
wire   [0:0] ret_V_18_fu_741_p2;
wire   [0:0] and_ln1355_4_fu_753_p2;
wire   [0:0] and_ln1355_3_fu_747_p2;
wire   [0:0] ret_V_17_fu_765_p2;
wire   [0:0] icmp_ln96_fu_790_p2;
wire   [0:0] or_ln96_fu_796_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_condition_158;

// power-on initialization
initial begin
#0 arp_output_reg_data_s = 336'd0;
#0 arp_output_reg_valid = 1'd0;
#0 ip_output_reg_data_V = 336'd0;
#0 ip_output_reg_valid_s = 1'd0;
#0 payload_output_reg_d = 512'd0;
#0 payload_output_reg_v = 1'd0;
#0 payload_output_reg_l = 1'd0;
#0 payload_len_reg_data = 16'd0;
#0 payload_len_reg_vali = 1'd0;
#0 axis_input_reg_valid = 1'd0;
#0 axis_input_reg_data_s = 512'd0;
#0 myMacAddr_reg_V = 48'd0;
#0 in_ip_packet_V = 1'd0;
#0 axis_input_reg_last_s = 1'd0;
#0 axis_input_reg_keep_s = 64'd0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        arp_output_reg_data_s <= 336'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (((or_ln73_fu_620_p2 == 1'd1) & (ret_V_4_fu_568_p2 == 1'd1) & (lhs_V_3_load_fu_330_p1 == 1'd1) & (or_ln73_1_fu_632_p2 == 1'd0) & (icmp_ln879_4_fu_450_p2 == 1'd0)) | ((or_ln73_fu_620_p2 == 1'd1) & (or_ln70_fu_580_p2 == 1'd1) & (ret_V_4_fu_568_p2 == 1'd1) & (lhs_V_3_load_fu_330_p1 == 1'd1) & (or_ln73_1_fu_632_p2 == 1'd0))))) begin
            arp_output_reg_data_s <= {{axis_input_reg_data_s[511:176]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        arp_output_reg_valid <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            arp_output_reg_valid <= ap_phi_mux_val_assign_1_phi_fu_232_p6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_input_reg_data_s <= 512'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            axis_input_reg_data_s <= s_axis_data_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_input_reg_keep_s <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            axis_input_reg_keep_s <= s_axis_keep_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_input_reg_last_s <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            axis_input_reg_last_s <= s_axis_last_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        axis_input_reg_valid <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            axis_input_reg_valid <= s_axis_valid_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in_ip_packet_V <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((1'b1 == ap_condition_158)) begin
                in_ip_packet_V <= 1'd0;
            end else if (((1'd1 == and_ln96_fu_784_p2) & (or_ln96_1_fu_802_p2 == 1'd0))) begin
                in_ip_packet_V <= 1'd1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_output_reg_data_V <= 336'd0;
    end else begin
        if (((ret_V_4_fu_568_p2 == 1'd1) & (icmp_ln879_4_fu_450_p2 == 1'd1) & (lhs_V_3_load_fu_330_p1 == 1'd1) & (or_ln70_fu_580_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            ip_output_reg_data_V <= {{axis_input_reg_data_s[511:176]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ip_output_reg_valid_s <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            if ((lhs_V_3_load_fu_330_p1 == 1'd1)) begin
                ip_output_reg_valid_s <= and_ln879_1_fu_397_p2;
            end else if ((lhs_V_3_load_fu_330_p1 == 1'd0)) begin
                ip_output_reg_valid_s <= 1'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        myMacAddr_reg_V <= 48'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            myMacAddr_reg_V <= myMacAddr_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        payload_len_reg_data <= 16'd0;
    end else begin
        if (((ret_V_4_fu_568_p2 == 1'd1) & (icmp_ln879_4_fu_450_p2 == 1'd1) & (lhs_V_3_load_fu_330_p1 == 1'd1) & (or_ln70_fu_580_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
            payload_len_reg_data <= add_ln214_fu_602_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        payload_len_reg_vali <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            payload_len_reg_vali <= and_ln879_3_fu_490_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        payload_output_reg_d <= 512'd0;
    end else begin
        if (((ret_V_4_fu_568_p2 == 1'd1) & (or_ln1355_1_fu_713_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            payload_output_reg_d <= select_ln1355_1_fu_727_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        payload_output_reg_l <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            payload_output_reg_l <= ret_V_fu_556_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        payload_output_reg_v <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            payload_output_reg_v <= ap_phi_mux_storemerge1171_phi_fu_265_p6;
        end
    end
end

always @ (*) begin
    if (((ret_V_4_fu_568_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((lhs_V_3_load_fu_330_p1 == 1'd0)) begin
            ap_phi_mux_p_Val2_3_phi_fu_256_p4 = payload_output_reg_d;
        end else if ((lhs_V_3_load_fu_330_p1 == 1'd1)) begin
            ap_phi_mux_p_Val2_3_phi_fu_256_p4 = p_Result_s_10_fu_648_p5;
        end else begin
            ap_phi_mux_p_Val2_3_phi_fu_256_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_p_Val2_3_phi_fu_256_p4 = 'bx;
    end
end

always @ (*) begin
    if (((ret_V_4_fu_568_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((lhs_V_3_load_fu_330_p1 == 1'd0)) begin
            ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 = 1'd0;
        end else if ((lhs_V_3_load_fu_330_p1 == 1'd1)) begin
            ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 = 1'd1;
        end else begin
            ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if (((ret_V_8_fu_759_p2 == 1'd1) & (ret_V_4_fu_568_p2 == 1'd1))) begin
            ap_phi_mux_storemerge1171_phi_fu_265_p6 = 1'd1;
        end else if ((ret_V_4_fu_568_p2 == 1'd0)) begin
            ap_phi_mux_storemerge1171_phi_fu_265_p6 = 1'd0;
        end else if (((ret_V_4_fu_568_p2 == 1'd1) & (ret_V_8_fu_759_p2 == 1'd0))) begin
            ap_phi_mux_storemerge1171_phi_fu_265_p6 = ret_V_10_fu_771_p2;
        end else begin
            ap_phi_mux_storemerge1171_phi_fu_265_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge1171_phi_fu_265_p6 = 'bx;
    end
end

always @ (*) begin
    if (((or_ln63_fu_415_p2 == 1'd1) & (lhs_V_3_load_fu_330_p1 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_phi_mux_val_assign_1_phi_fu_232_p6 = and_ln63_fu_427_p2;
    end else if ((((lhs_V_3_load_fu_330_p1 == 1'd1) & (or_ln63_fu_415_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((lhs_V_3_load_fu_330_p1 == 1'd0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_phi_mux_val_assign_1_phi_fu_232_p6 = 1'd0;
    end else begin
        ap_phi_mux_val_assign_1_phi_fu_232_p6 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_fu_602_p2 = ($signed(p_Result_4_fu_592_p4) + $signed(16'd65508));

assign and_ln1355_3_fu_747_p2 = (icmp_ln879_4_fu_450_p2 & axis_input_reg_valid);

assign and_ln1355_4_fu_753_p2 = (ret_V_18_fu_741_p2 & and_ln64_fu_478_p2);

assign and_ln1355_fu_544_p2 = (xor_ln1355_fu_538_p2 & s_axis_last_V);

assign and_ln63_fu_427_p2 = (xor_ln761_fu_385_p2 & icmp_ln879_3_fu_421_p2);

assign and_ln64_fu_478_p2 = (xor_ln761_1_fu_472_p2 & icmp_ln879_5_fu_466_p2);

assign and_ln879_1_fu_397_p2 = (icmp_ln879_1_fu_379_p2 & and_ln879_fu_391_p2);

assign and_ln879_2_fu_484_p2 = (icmp_ln879_4_fu_450_p2 & and_ln64_fu_478_p2);

assign and_ln879_3_fu_490_p2 = (axis_input_reg_valid & and_ln879_2_fu_484_p2);

assign and_ln879_fu_391_p2 = (xor_ln761_fu_385_p2 & icmp_ln879_fu_363_p2);

assign and_ln96_fu_784_p2 = (icmp_ln879_4_fu_450_p2 & axis_input_reg_valid);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_condition_158 = (((ret_V_fu_556_p2 == 1'd1) & (1'd0 == and_ln96_fu_784_p2)) | ((or_ln96_1_fu_802_p2 == 1'd1) & (ret_V_fu_556_p2 == 1'd1)));
end

assign arp_data_V = arp_output_reg_data_s;

assign arp_valid_V = arp_output_reg_valid;

assign icmp_ln70_fu_574_p2 = ((p_Result_6_fu_456_p4 != 16'd2048) ? 1'b1 : 1'b0);

assign icmp_ln73_fu_626_p2 = ((p_Result_6_fu_456_p4 != 16'd2054) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_379_p2 = ((p_Result_1_fu_369_p4 == 16'd2048) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_409_p2 = ((p_Result_s_fu_353_p4 == 48'd281474976710655) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_421_p2 = ((p_Result_1_fu_369_p4 == 16'd2054) ? 1'b1 : 1'b0);

assign icmp_ln879_4_fu_450_p2 = ((p_Result_5_fu_440_p4 == myMacAddr_reg_V) ? 1'b1 : 1'b0);

assign icmp_ln879_5_fu_466_p2 = ((p_Result_6_fu_456_p4 == 16'd2048) ? 1'b1 : 1'b0);

assign icmp_ln879_6_fu_614_p2 = ((p_Result_5_fu_440_p4 == 48'd281474976710655) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_363_p2 = ((p_Result_s_fu_353_p4 == myMacAddr_reg_V) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_790_p2 = ((p_Result_6_fu_456_p4 != 16'd2048) ? 1'b1 : 1'b0);

assign ip_data_V = ip_output_reg_data_V;

assign ip_valid_V = ip_output_reg_valid_s;

assign lhs_V_3_load_fu_330_p1 = axis_input_reg_valid;

assign or_ln1355_1_fu_713_p2 = (ret_V_6_fu_667_p2 | or_ln1355_fu_707_p2);

assign or_ln1355_fu_707_p2 = (ret_V_14_fu_506_p2 | ap_phi_mux_payload_output_reg_d_1_phi_fu_245_p4);

assign or_ln63_fu_415_p2 = (icmp_ln879_fu_363_p2 | icmp_ln879_2_fu_409_p2);

assign or_ln70_fu_580_p2 = (in_ip_packet_V | icmp_ln70_fu_574_p2);

assign or_ln73_1_fu_632_p2 = (in_ip_packet_V | icmp_ln73_fu_626_p2);

assign or_ln73_fu_620_p2 = (icmp_ln879_6_fu_614_p2 | icmp_ln879_4_fu_450_p2);

assign or_ln96_1_fu_802_p2 = (or_ln96_fu_796_p2 | axis_input_reg_last_s);

assign or_ln96_fu_796_p2 = (ret_V_16_fu_550_p2 | icmp_ln96_fu_790_p2);

assign p_Result_1_fu_369_p4 = {{axis_input_reg_data_s[415:400]}};

assign p_Result_2_fu_683_p5 = {{ap_phi_mux_p_Val2_3_phi_fu_256_p4[511:336]}, {p_Result_8_fu_673_p4}};

assign p_Result_3_fu_695_p5 = {{ap_phi_mux_p_Val2_3_phi_fu_256_p4[511:336]}, {336'd0}};

assign p_Result_4_fu_592_p4 = {{axis_input_reg_data_s[383:368]}};

assign p_Result_5_fu_440_p4 = {{axis_input_reg_data_s[511:464]}};

assign p_Result_6_fu_456_p4 = {{axis_input_reg_data_s[415:400]}};

assign p_Result_8_fu_673_p4 = {{s_axis_data_V[511:176]}};

assign p_Result_s_10_fu_648_p5 = {{trunc_ln647_fu_644_p1}, {payload_output_reg_d[335:0]}};

assign p_Result_s_fu_353_p4 = {{axis_input_reg_data_s[511:464]}};

assign payload_data_V = payload_output_reg_d;

assign payload_last_V = payload_output_reg_l;

assign payload_len_data_V = payload_len_reg_data;

assign payload_len_valid_V = payload_len_reg_vali;

assign payload_valid_V = payload_output_reg_v;

assign ret_V_10_fu_771_p2 = (ret_V_17_fu_765_p2 & in_ip_packet_V);

assign ret_V_14_fu_506_p2 = (axis_input_reg_valid & axis_input_reg_last_s);

assign ret_V_15_fu_524_p2 = (tmp_fu_516_p3 & ret_V_14_fu_506_p2);

assign ret_V_16_fu_550_p2 = (s_axis_valid_V & and_ln1355_fu_544_p2);

assign ret_V_17_fu_765_p2 = (s_axis_valid_V | ret_V_14_fu_506_p2);

assign ret_V_18_fu_741_p2 = (s_axis_valid_V | axis_input_reg_last_s);

assign ret_V_4_fu_568_p2 = (s_axis_valid_V | axis_input_reg_valid);

assign ret_V_6_fu_667_p2 = (s_axis_valid_V & rhs_V_fu_661_p2);

assign ret_V_8_fu_759_p2 = (and_ln1355_4_fu_753_p2 & and_ln1355_3_fu_747_p2);

assign ret_V_fu_556_p2 = (ret_V_16_fu_550_p2 | ret_V_15_fu_524_p2);

assign rhs_V_fu_661_p2 = (ret_V_14_fu_506_p2 ^ 1'd1);

assign select_ln1355_1_fu_727_p3 = ((ret_V_14_fu_506_p2[0:0] === 1'b1) ? p_Result_3_fu_695_p5 : select_ln1355_fu_719_p3);

assign select_ln1355_fu_719_p3 = ((ret_V_6_fu_667_p2[0:0] === 1'b1) ? p_Result_2_fu_683_p5 : ap_phi_mux_p_Val2_3_phi_fu_256_p4);

assign tmp_1_fu_530_p3 = s_axis_keep_V[32'd21];

assign tmp_fu_516_p3 = axis_input_reg_keep_s[32'd21];

assign trunc_ln647_fu_644_p1 = axis_input_reg_data_s[175:0];

assign xor_ln1355_fu_538_p2 = (tmp_1_fu_530_p3 ^ 1'd1);

assign xor_ln761_1_fu_472_p2 = (in_ip_packet_V ^ 1'd1);

assign xor_ln761_fu_385_p2 = (in_ip_packet_V ^ 1'd1);

endmodule //ether_protocol_spliter
