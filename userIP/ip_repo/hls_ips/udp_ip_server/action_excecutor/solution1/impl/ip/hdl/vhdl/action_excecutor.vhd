-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity action_excecutor is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    action : IN STD_LOGIC_VECTOR (64 downto 0);
    action_valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    action_empty_V : IN STD_LOGIC_VECTOR (0 downto 0);
    action_re_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    payload_in_data_V : IN STD_LOGIC_VECTOR (511 downto 0);
    payload_in_keep_V : IN STD_LOGIC_VECTOR (63 downto 0);
    payload_in_valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    payload_in_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
    payload_ready_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    payload_out_data_V : OUT STD_LOGIC_VECTOR (511 downto 0);
    payload_out_keep_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    payload_out_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    payload_out_last_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    src_ip_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    src_port_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    dst_port_V : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of action_excecutor is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "action_excecutor,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.188000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=643,HLS_SYN_LUT=614,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal payload_out_reg_data : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal payload_out_reg_keep : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal payload_out_reg_vali : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal payload_out_reg_last : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal src_ip_reg_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal src_port_reg_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dst_port_reg_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_phi_mux_storemerge_phi_fu_211_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ret_V_1_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln68_fu_273_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal select_ln68_1_fu_281_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln68_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln321_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    dst_port_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dst_port_reg_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    dst_port_reg_V <= ap_phi_mux_storemerge_phi_fu_211_p4;
                end if; 
            end if;
        end if;
    end process;


    payload_out_reg_data_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_out_reg_data <= ap_const_lv512_lc_1;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    payload_out_reg_data <= select_ln68_fu_273_p3;
                end if; 
            end if;
        end if;
    end process;


    payload_out_reg_keep_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_out_reg_keep <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    payload_out_reg_keep <= select_ln68_1_fu_281_p3;
                end if; 
            end if;
        end if;
    end process;


    payload_out_reg_last_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_out_reg_last <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    payload_out_reg_last <= and_ln68_fu_289_p2;
                end if; 
            end if;
        end if;
    end process;


    payload_out_reg_vali_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_out_reg_vali <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    payload_out_reg_vali <= ret_V_fu_267_p2;
                end if; 
            end if;
        end if;
    end process;


    src_ip_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_ip_reg_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_1_fu_261_p2 = ap_const_lv1_1)) then 
                        src_ip_reg_V <= trunc_ln321_fu_331_p1;
                    elsif ((ret_V_1_fu_261_p2 = ap_const_lv1_0)) then 
                        src_ip_reg_V <= ap_const_lv32_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    src_port_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_port_reg_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ret_V_1_fu_261_p2 = ap_const_lv1_1)) then 
                        src_port_reg_V <= action(47 downto 32);
                    elsif ((ret_V_1_fu_261_p2 = ap_const_lv1_0)) then 
                        src_port_reg_V <= ap_const_lv16_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    action_re_V <= (payload_in_valid_V and and_ln1355_fu_380_p2);
    and_ln1355_fu_380_p2 <= (payload_in_last_V and lhs_V_fu_374_p2);
    and_ln68_fu_289_p2 <= (ret_V_fu_267_p2 and payload_in_last_V);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_phi_mux_storemerge_phi_fu_211_p4_assign_proc : process(action, ap_CS_fsm_state1, ret_V_1_fu_261_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((ret_V_1_fu_261_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_phi_fu_211_p4 <= action(63 downto 48);
            elsif ((ret_V_1_fu_261_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_phi_fu_211_p4 <= ap_const_lv16_0;
            else 
                ap_phi_mux_storemerge_phi_fu_211_p4 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_phi_fu_211_p4 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dst_port_V <= dst_port_reg_V;
    lhs_V_fu_374_p2 <= (ap_const_lv1_1 xor action_empty_V);
    payload_out_data_V <= payload_out_reg_data;
    payload_out_keep_V <= payload_out_reg_keep;
    payload_out_last_V <= payload_out_reg_last;
    payload_out_valid_V <= payload_out_reg_vali;
    payload_ready_V <= action_valid_V;
    ret_V_1_fu_261_p2 <= (rhs_V_fu_253_p3 and action_valid_V);
    ret_V_fu_267_p2 <= (ret_V_1_fu_261_p2 and payload_in_valid_V);
    rhs_V_fu_253_p3 <= action(64 downto 64);
    select_ln68_1_fu_281_p3 <= 
        payload_in_keep_V when (ret_V_fu_267_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln68_fu_273_p3 <= 
        payload_in_data_V when (ret_V_fu_267_p2(0) = '1') else 
        ap_const_lv512_lc_1;
    src_ip_V <= src_ip_reg_V;
    src_port_V <= src_port_reg_V;
    trunc_ln321_fu_331_p1 <= action(32 - 1 downto 0);
end behav;
