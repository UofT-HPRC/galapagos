-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity udp_eth_assemble is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    myMac_V : IN STD_LOGIC_VECTOR (47 downto 0);
    myIP_V : IN STD_LOGIC_VECTOR (31 downto 0);
    action : IN STD_LOGIC_VECTOR (160 downto 0);
    action_valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    action_empty_V : IN STD_LOGIC_VECTOR (0 downto 0);
    action_re_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    payload_in_data_V : IN STD_LOGIC_VECTOR (511 downto 0);
    payload_in_keep_V : IN STD_LOGIC_VECTOR (63 downto 0);
    payload_in_valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    payload_in_last_V : IN STD_LOGIC_VECTOR (0 downto 0);
    payload_ready_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    packet_out_data_V : OUT STD_LOGIC_VECTOR (511 downto 0);
    packet_out_keep_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    packet_out_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    packet_out_last_V : OUT STD_LOGIC_VECTOR (0 downto 0);
    packet_out_ready_V : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of udp_eth_assemble is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "udp_eth_assemble,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.714750,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1239,HLS_SYN_LUT=392,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_150 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv176_lc_1 : STD_LOGIC_VECTOR (175 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv16_1C : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011100";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_8004500 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000100010100000000";
    constant ap_const_lv48_40004011 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000100000000010001";
    constant ap_const_lv22_3FFFF0 : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111110000";
    constant ap_const_lv42_3FFFFFFFFFF : STD_LOGIC_VECTOR (41 downto 0) := "111111111111111111111111111111111111111111";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal packet_out_reg_data_s : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal packet_out_reg_keep_s : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal packet_out_reg_valid : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal packet_out_reg_last_s : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal payloadin_pause_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal IN_PACKET_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal myMac_reg_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal myIP_reg_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal payload_in_reg_data_s : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal payload_in_reg_last_s : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal payload_in_reg_keep_s : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal payload_in_reg_valid : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal packet_out_ready_V_r_read_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_5_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal IN_PACKET_V_load_load_fu_392_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_464_p3 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_s_8_fu_650_p14 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_5_fu_494_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_692_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_8_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_15_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_1_load_fu_344_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_11_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_9_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal action_valid_V_read_read_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_7_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_318_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1355_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_12_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_13_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_2_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_3_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_4_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_14_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_4_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_272_p4 : STD_LOGIC_VECTOR (175 downto 0);
    signal trunc_ln647_fu_436_p1 : STD_LOGIC_VECTOR (335 downto 0);
    signal select_ln1355_fu_456_p3 : STD_LOGIC_VECTOR (175 downto 0);
    signal grp_fu_282_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln647_1_fu_482_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal select_ln1355_1_fu_486_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal action_payload_lengt_fu_556_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln215_fu_634_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_s_fu_616_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln215_2_fu_638_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal action_dst_mac_V_loa_fu_542_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln215_fu_566_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal action_ip_cksum_V_lo_fu_572_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln215_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal action_src_port_V_lo_fu_590_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal action_dst_port_V_lo_fu_600_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln215_1_fu_610_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln215_fu_644_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1356_fu_686_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal and_ln1355_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_354 : BOOLEAN;


begin




    IN_PACKET_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                IN_PACKET_V <= ap_const_lv1_0;
            else
                if (((packet_out_ready_V_r_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    if ((ret_V_5_fu_402_p2 = ap_const_lv1_1)) then 
                        IN_PACKET_V <= payload_in_keep_V(41 downto 41);
                    elsif ((ap_const_boolean_1 = ap_condition_354)) then 
                        IN_PACKET_V <= ap_const_lv1_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    myIP_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                myIP_reg_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    myIP_reg_V <= myIP_V;
                end if; 
            end if;
        end if;
    end process;


    myMac_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                myMac_reg_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    myMac_reg_V <= myMac_V;
                end if; 
            end if;
        end if;
    end process;


    packet_out_reg_data_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                packet_out_reg_data_s <= ap_const_lv512_lc_1;
            else
                if (((packet_out_ready_V_r_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    if ((ret_V_5_fu_402_p2 = ap_const_lv1_1)) then 
                        packet_out_reg_data_s <= p_Result_s_8_fu_650_p14;
                    elsif (((ap_const_lv1_1 = IN_PACKET_V_load_load_fu_392_p1) and (ret_V_5_fu_402_p2 = ap_const_lv1_0))) then 
                        packet_out_reg_data_s <= p_Result_4_fu_464_p3;
                    elsif (((ap_const_lv1_0 = IN_PACKET_V_load_load_fu_392_p1) and (ret_V_5_fu_402_p2 = ap_const_lv1_0))) then 
                        packet_out_reg_data_s <= ap_const_lv512_lc_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    packet_out_reg_keep_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                packet_out_reg_keep_s <= ap_const_lv64_0;
            else
                if (((packet_out_ready_V_r_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    if ((ret_V_5_fu_402_p2 = ap_const_lv1_1)) then 
                        packet_out_reg_keep_s <= p_Result_2_fu_692_p3;
                    elsif (((ap_const_lv1_1 = IN_PACKET_V_load_load_fu_392_p1) and (ret_V_5_fu_402_p2 = ap_const_lv1_0))) then 
                        packet_out_reg_keep_s <= p_Result_5_fu_494_p3;
                    elsif (((ap_const_lv1_0 = IN_PACKET_V_load_load_fu_392_p1) and (ret_V_5_fu_402_p2 = ap_const_lv1_0))) then 
                        packet_out_reg_keep_s <= ap_const_lv64_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    packet_out_reg_last_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                packet_out_reg_last_s <= ap_const_lv1_0;
            else
                if (((packet_out_ready_V_r_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    if ((ret_V_5_fu_402_p2 = ap_const_lv1_1)) then 
                        packet_out_reg_last_s <= ret_V_15_fu_332_p2;
                    elsif (((ap_const_lv1_1 = IN_PACKET_V_load_load_fu_392_p1) and (ret_V_5_fu_402_p2 = ap_const_lv1_0))) then 
                        packet_out_reg_last_s <= ret_V_8_fu_508_p2;
                    elsif (((ap_const_lv1_0 = IN_PACKET_V_load_load_fu_392_p1) and (ret_V_5_fu_402_p2 = ap_const_lv1_0))) then 
                        packet_out_reg_last_s <= ap_const_lv1_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    packet_out_reg_valid_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                packet_out_reg_valid <= ap_const_lv1_0;
            else
                if (((packet_out_ready_V_r_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    if ((ret_V_5_fu_402_p2 = ap_const_lv1_1)) then 
                        packet_out_reg_valid <= ap_const_lv1_1;
                    elsif (((ap_const_lv1_1 = IN_PACKET_V_load_load_fu_392_p1) and (ret_V_5_fu_402_p2 = ap_const_lv1_0))) then 
                        packet_out_reg_valid <= payload_in_reg_valid;
                    elsif (((ap_const_lv1_0 = IN_PACKET_V_load_load_fu_392_p1) and (ret_V_5_fu_402_p2 = ap_const_lv1_0))) then 
                        packet_out_reg_valid <= ap_const_lv1_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    payload_in_reg_data_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_in_reg_data_s <= ap_const_lv512_lc_1;
            else
                if (((ap_const_lv1_1 = action_valid_V_read_read_fu_206_p2) and (packet_out_ready_V_r_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    payload_in_reg_data_s <= payload_in_data_V;
                end if; 
            end if;
        end if;
    end process;


    payload_in_reg_keep_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_in_reg_keep_s <= ap_const_lv64_0;
            else
                if (((ap_const_lv1_1 = action_valid_V_read_read_fu_206_p2) and (packet_out_ready_V_r_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    payload_in_reg_keep_s <= payload_in_keep_V;
                end if; 
            end if;
        end if;
    end process;


    payload_in_reg_last_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_in_reg_last_s <= ap_const_lv1_0;
            else
                if (((ap_const_lv1_1 = action_valid_V_read_read_fu_206_p2) and (packet_out_ready_V_r_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    payload_in_reg_last_s <= payload_in_last_V;
                end if; 
            end if;
        end if;
    end process;


    payload_in_reg_valid_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payload_in_reg_valid <= ap_const_lv1_0;
            else
                if (((ap_const_lv1_1 = action_valid_V_read_read_fu_206_p2) and (packet_out_ready_V_r_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    payload_in_reg_valid <= payload_in_valid_V;
                end if; 
            end if;
        end if;
    end process;


    payloadin_pause_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                payloadin_pause_V <= ap_const_lv1_0;
            else
                if (((packet_out_ready_V_r_read_fu_170_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    if ((rhs_V_1_load_fu_344_p1 = ap_const_lv1_1)) then 
                        payloadin_pause_V <= ap_const_lv1_0;
                    elsif (((ret_V_11_fu_762_p2 = ap_const_lv1_1) and (rhs_V_1_load_fu_344_p1 = ap_const_lv1_0))) then 
                        payloadin_pause_V <= ap_const_lv1_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    IN_PACKET_V_load_load_fu_392_p1 <= IN_PACKET_V;
    action_dst_mac_V_loa_fu_542_p4 <= action(79 downto 32);
    action_dst_port_V_lo_fu_600_p4 <= action(111 downto 96);
    action_ip_cksum_V_lo_fu_572_p4 <= action(144 downto 129);
    action_payload_lengt_fu_556_p4 <= action(160 downto 145);
    action_re_V <= (packet_out_ready_V and and_ln1355_2_fu_354_p2);
    action_src_port_V_lo_fu_590_p4 <= action(95 downto 80);
    action_valid_V_read_read_fu_206_p2 <= action_valid_V;
    add_ln215_1_fu_610_p2 <= std_logic_vector(unsigned(ap_const_lv16_8) + unsigned(action_payload_lengt_fu_556_p4));
    add_ln215_2_fu_638_p2 <= std_logic_vector(unsigned(zext_ln215_fu_634_p1) + unsigned(p_Result_s_fu_616_p4));
    add_ln215_fu_566_p2 <= std_logic_vector(unsigned(ap_const_lv16_1C) + unsigned(action_payload_lengt_fu_556_p4));
    and_ln1355_2_fu_354_p2 <= (rhs_V_fu_312_p2 and ret_V_13_fu_348_p2);
    and_ln1355_4_fu_373_p2 <= (rhs_V_3_fu_367_p2 and action_valid_V);
    and_ln1355_fu_756_p2 <= (tmp_fu_318_p3 and payload_in_last_V);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_condition_354_assign_proc : process(ret_V_5_fu_402_p2, IN_PACKET_V_load_load_fu_392_p1, ret_V_9_fu_530_p2)
    begin
                ap_condition_354 <= ((ret_V_9_fu_530_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = IN_PACKET_V_load_load_fu_392_p1) and (ret_V_5_fu_402_p2 = ap_const_lv1_0));
    end process;

    grp_fu_272_p4 <= payload_in_data_V(511 downto 336);
    grp_fu_282_p4 <= payload_in_keep_V(63 downto 42);
    lhs_V_fu_444_p2 <= (payload_in_reg_last_s xor ap_const_lv1_1);
    or_ln1356_fu_686_p2 <= (grp_fu_282_p4 or ap_const_lv22_3FFFF0);
    p_Result_2_fu_692_p3 <= (ap_const_lv42_3FFFFFFFFFF & or_ln1356_fu_686_p2);
    p_Result_4_fu_464_p3 <= (trunc_ln647_fu_436_p1 & select_ln1355_fu_456_p3);
    p_Result_5_fu_494_p3 <= (trunc_ln647_1_fu_482_p1 & select_ln1355_1_fu_486_p3);
    p_Result_s_8_fu_650_p14 <= ((((((((((((action_dst_mac_V_loa_fu_542_p4 & myMac_reg_V) & ap_const_lv32_8004500) & add_ln215_fu_566_p2) & ap_const_lv48_40004011) & action_ip_cksum_V_lo_fu_572_p4) & myIP_reg_V) & trunc_ln215_fu_586_p1) & action_src_port_V_lo_fu_590_p4) & action_dst_port_V_lo_fu_600_p4) & add_ln215_1_fu_610_p2) & xor_ln215_fu_644_p2) & grp_fu_272_p4);
    p_Result_s_fu_616_p4 <= action(127 downto 112);
    packet_out_data_V <= packet_out_reg_data_s;
    packet_out_keep_V <= packet_out_reg_keep_s;
    packet_out_last_V <= packet_out_reg_last_s;
    packet_out_ready_V_r_read_fu_170_p2 <= packet_out_ready_V;
    packet_out_valid_V <= packet_out_reg_valid;
    payload_ready_V <= (packet_out_ready_V and and_ln1355_4_fu_373_p2);
    ret_V_11_fu_762_p2 <= (ret_V_14_fu_386_p2 and and_ln1355_fu_756_p2);
    ret_V_12_fu_338_p2 <= (ret_V_15_fu_332_p2 and payload_in_valid_V);
    ret_V_13_fu_348_p2 <= (ret_V_12_fu_338_p2 or payloadin_pause_V);
    ret_V_14_fu_386_p2 <= (payload_in_valid_V and action_valid_V);
    ret_V_15_fu_332_p2 <= (xor_ln1355_fu_326_p2 and payload_in_last_V);
    ret_V_5_fu_402_p2 <= (rhs_V_4_fu_396_p2 and ret_V_14_fu_386_p2);
    ret_V_7_fu_450_p2 <= (payload_in_valid_V and lhs_V_fu_444_p2);
    ret_V_8_fu_508_p2 <= (ret_V_15_fu_332_p2 or payload_in_reg_last_s);
    ret_V_9_fu_530_p2 <= (xor_ln1355_fu_326_p2 or payload_in_reg_last_s);
    rhs_V_1_load_fu_344_p1 <= payloadin_pause_V;
    rhs_V_3_fu_367_p2 <= (payloadin_pause_V xor ap_const_lv1_1);
    rhs_V_4_fu_396_p2 <= (ap_const_lv1_1 xor IN_PACKET_V);
    rhs_V_fu_312_p2 <= (ap_const_lv1_1 xor action_empty_V);
    select_ln1355_1_fu_486_p3 <= 
        grp_fu_282_p4 when (ret_V_7_fu_450_p2(0) = '1') else 
        ap_const_lv22_0;
    select_ln1355_fu_456_p3 <= 
        grp_fu_272_p4 when (ret_V_7_fu_450_p2(0) = '1') else 
        ap_const_lv176_lc_1;
    tmp_1_fu_626_p3 <= action(128 downto 128);
    tmp_fu_318_p3 <= payload_in_keep_V(41 downto 41);
    trunc_ln215_fu_586_p1 <= action(32 - 1 downto 0);
    trunc_ln647_1_fu_482_p1 <= payload_in_reg_keep_s(42 - 1 downto 0);
    trunc_ln647_fu_436_p1 <= payload_in_reg_data_s(336 - 1 downto 0);
    xor_ln1355_fu_326_p2 <= (tmp_fu_318_p3 xor ap_const_lv1_1);
    xor_ln215_fu_644_p2 <= (ap_const_lv16_FFFF xor add_ln215_2_fu_638_p2);
    zext_ln215_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_626_p3),16));
end behav;
