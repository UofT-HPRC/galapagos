-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity udp_ip_receive is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    myIP_V : IN STD_LOGIC_VECTOR (31 downto 0);
    ip_in_data_V : IN STD_LOGIC_VECTOR (335 downto 0);
    ip_in_valid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    meta_out_src_ip_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    meta_out_protocol_header_V : OUT STD_LOGIC_VECTOR (63 downto 0);
    meta_out_checksum_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    meta_out_action_V : OUT STD_LOGIC_VECTOR (1 downto 0);
    arp_internal_resp_Mac_IP_V : OUT STD_LOGIC_VECTOR (79 downto 0);
    arp_internal_resp_valid_V : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of udp_ip_receive is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "udp_ip_receive,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu19eg-ffvc1760-2-i,HLS_INPUT_CLOCK=3.103000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.332000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2159,HLS_SYN_LUT=649,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv80_0 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_4500 : STD_LOGIC_VECTOR (15 downto 0) := "0100010100000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv16_4000 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv18_4500 : STD_LOGIC_VECTOR (17 downto 0) := "000100010100000000";
    constant ap_const_lv17_11 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal arp_internal_resp_re_1 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal arp_internal_resp_re : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal meta_out_reg_src_ip_s : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal meta_out_reg_protoco : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal meta_out_reg_checksu : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal meta_out_reg_action_s : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ip_in_reg5_src_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal eth_src_mac5_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal ip_in_reg5_valid_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ip_in_reg5_dst_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal myIP_reg_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal checksum_reg_final_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg5_proto_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ip_in_reg5_proto_hea : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ip_in_reg5_fixed_hea : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg5_fragment_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal udp_ignore_flag4_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal udp_cksum4_V : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal checksum_reg3_0_V : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal udp_cksum3_V : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    signal udp_ignore_flag3_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ip_in_reg4_fixed_hea : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg4_fragment_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg4_proto_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ip_in_reg4_src_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ip_in_reg4_dst_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ip_in_reg4_proto_hea : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ip_in_reg4_valid_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal eth_src_mac4_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal checksum_reg2_0_V : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal checksum_reg2_1_V : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal udp_cksum2_0_V : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    signal udp_cksum2_1_V : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal udp_ignore_flag2_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ip_in_reg3_fixed_hea : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg3_fragment_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg3_proto_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ip_in_reg3_src_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ip_in_reg3_dst_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ip_in_reg3_proto_hea : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ip_in_reg3_valid_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal eth_src_mac3_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal checksum_reg1_2_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal checksum_reg1_3_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal checksum_reg1_0_V : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal checksum_reg1_1_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal udp_cksum1_0_V : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal udp_cksum1_1_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal udp_cksum1_2_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal udp_cksum1_3_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal udp_ignore_flag1_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ip_in_reg2_proto_hea : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ip_in_reg2_fixed_hea : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg2_fragment_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg2_proto_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ip_in_reg2_src_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ip_in_reg2_dst_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ip_in_reg2_valid_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal eth_src_mac2_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal checksum_reg0_6_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal checksum_reg0_7_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal checksum_reg0_4_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal checksum_reg0_5_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal checksum_reg0_2_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal checksum_reg0_3_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal checksum_reg0_0_V : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    signal checksum_reg0_1_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal udp_cksum0_0_V : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal udp_cksum0_1_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal udp_cksum0_2_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal udp_cksum0_3_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal udp_cksum0_4_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal udp_cksum0_5_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal udp_cksum0_6_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal udp_cksum0_7_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal udp_ignore_flag0_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ip_in_reg1_fixed_hea : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg1_fragment_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg1_proto_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ip_in_reg1_src_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ip_in_reg1_dst_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ip_in_reg1_proto_hea : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ip_in_reg1_valid_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal eth_src_mac1_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal ip_in_reg0_src_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ip_in_reg0_checksum_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg0_proto_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ip_in_reg0_ttl_V : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ip_in_reg0_fragment_s : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg0_id_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg0_length_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal checksum_precompute_s : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal ip_in_reg0_proto_hea : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ip_in_reg0_fixed_hea : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ip_in_reg0_dst_ip_V : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ip_in_reg0_valid_V : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal eth_src_mac0_V : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    signal p_Result_s_fu_461_p3 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ip_in_reg5_valid_V_l_load_fu_475_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_assign_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln84_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_11_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln301_fu_626_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln209_fu_672_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_fu_800_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_1_fu_828_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ret_V_3_fu_974_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_2_fu_946_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_4_fu_1002_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_5_fu_1030_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal or_ln544_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_7_fu_1196_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_6_fu_1168_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_9_fu_1248_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_8_fu_1224_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_10_fu_1276_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal ret_V_11_fu_1304_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_12_fu_1332_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_13_fu_1360_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln647_1_fu_1466_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_2_fu_1510_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_14_fu_1562_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln209_1_fu_1574_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln647_2_fu_1656_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln879_6_fu_1666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln209_2_fu_1764_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln647_3_fu_1936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln879_1_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_4_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_1_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln74_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_10_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_654_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln364_fu_664_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln647_fu_668_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln215_4_fu_788_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln215_5_fu_796_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal lhs_V_fu_816_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal rhs_V_fu_824_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln215_fu_934_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln215_1_fu_942_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln215_2_fu_962_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln215_3_fu_970_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal lhs_V_1_fu_990_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal rhs_V_1_fu_998_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln215_6_fu_1018_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln215_7_fu_1026_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln357_fu_1050_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln357_fu_1054_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_ln879_5_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln215_8_fu_1156_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_9_fu_1164_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_10_fu_1184_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_11_fu_1192_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_12_fu_1212_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_13_fu_1220_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_14_fu_1244_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_2_fu_1264_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_2_fu_1272_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln215_17_fu_1292_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_18_fu_1300_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_19_fu_1320_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_20_fu_1328_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_21_fu_1348_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln215_22_fu_1356_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_3_fu_1558_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal p_Result_8_fu_1742_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln357_1_fu_1752_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln209_fu_1756_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln209_1_fu_1760_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_165 : BOOLEAN;
    signal ap_condition_171 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    arp_internal_resp_re_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_internal_resp_re <= ap_const_lv1_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln879_fu_504_p2 = ap_const_lv1_1) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_1))) then 
                    arp_internal_resp_re <= val_assign_fu_574_p2;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln879_fu_504_p2 = ap_const_lv1_0) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_0)))) then 
                    arp_internal_resp_re <= ap_const_lv1_0;
                end if; 
            end if;
        end if;
    end process;


    arp_internal_resp_re_1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                arp_internal_resp_re_1 <= ap_const_lv80_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    arp_internal_resp_re_1 <= p_Result_s_fu_461_p3;
                end if; 
            end if;
        end if;
    end process;


    checksum_precompute_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_precompute_s <= ap_const_lv17_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_precompute_s <= add_ln209_2_fu_1764_p2;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg0_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg0_0_V <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg0_0_V <= ret_V_14_fu_1562_p2;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg0_1_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg0_1_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg0_1_V <= ip_in_reg0_length_V;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg0_2_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg0_2_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg0_2_V <= ip_in_reg0_id_V;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg0_3_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg0_3_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg0_3_V <= ip_in_reg0_fragment_s;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg0_4_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg0_4_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg0_4_V <= p_Result_2_fu_1510_p3;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg0_5_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg0_5_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg0_5_V <= ip_in_reg0_checksum_s;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg0_6_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg0_6_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg0_6_V <= ip_in_reg0_src_ip_V(31 downto 16);
                end if; 
            end if;
        end if;
    end process;


    checksum_reg0_7_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg0_7_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg0_7_V <= trunc_ln647_1_fu_1466_p1;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg1_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg1_0_V <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg1_0_V <= ret_V_9_fu_1248_p2;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg1_1_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg1_1_V <= ap_const_lv17_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg1_1_V <= ret_V_8_fu_1224_p2;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg1_2_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg1_2_V <= ap_const_lv17_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg1_2_V <= ret_V_7_fu_1196_p2;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg1_3_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg1_3_V <= ap_const_lv17_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg1_3_V <= ret_V_6_fu_1168_p2;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg2_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg2_0_V <= ap_const_lv19_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg2_0_V <= ret_V_3_fu_974_p2;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg2_1_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg2_1_V <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg2_1_V <= ret_V_2_fu_946_p2;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg3_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg3_0_V <= ap_const_lv20_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg3_0_V <= ret_V_fu_800_p2;
                end if; 
            end if;
        end if;
    end process;


    checksum_reg_final_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                checksum_reg_final_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    checksum_reg_final_V <= add_ln209_fu_672_p2;
                end if; 
            end if;
        end if;
    end process;


    eth_src_mac0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                eth_src_mac0_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    eth_src_mac0_V <= ip_in_data_V(287 downto 240);
                end if; 
            end if;
        end if;
    end process;


    eth_src_mac1_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                eth_src_mac1_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    eth_src_mac1_V <= eth_src_mac0_V;
                end if; 
            end if;
        end if;
    end process;


    eth_src_mac2_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                eth_src_mac2_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    eth_src_mac2_V <= eth_src_mac1_V;
                end if; 
            end if;
        end if;
    end process;


    eth_src_mac3_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                eth_src_mac3_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    eth_src_mac3_V <= eth_src_mac2_V;
                end if; 
            end if;
        end if;
    end process;


    eth_src_mac4_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                eth_src_mac4_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    eth_src_mac4_V <= eth_src_mac3_V;
                end if; 
            end if;
        end if;
    end process;


    eth_src_mac5_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                eth_src_mac5_V <= ap_const_lv48_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    eth_src_mac5_V <= eth_src_mac4_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_checksum_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_checksum_s <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_checksum_s <= ip_in_data_V(143 downto 128);
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_dst_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_dst_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_dst_ip_V <= ip_in_data_V(95 downto 64);
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_fixed_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_fixed_hea <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_fixed_hea <= ip_in_data_V(223 downto 208);
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_fragment_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_fragment_s <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_fragment_s <= ip_in_data_V(175 downto 160);
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_id_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_id_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_id_V <= ip_in_data_V(191 downto 176);
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_length_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_length_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_length_V <= ip_in_data_V(207 downto 192);
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_proto_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_proto_V <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_proto_V <= ip_in_data_V(151 downto 144);
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_proto_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_proto_hea <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_proto_hea <= trunc_ln647_3_fu_1936_p1;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_src_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_src_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_src_ip_V <= ip_in_data_V(127 downto 96);
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_ttl_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_ttl_V <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_ttl_V <= ip_in_data_V(159 downto 152);
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg0_valid_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg0_valid_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg0_valid_V <= ip_in_valid_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg1_dst_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg1_dst_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg1_dst_ip_V <= ip_in_reg0_dst_ip_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg1_fixed_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg1_fixed_hea <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg1_fixed_hea <= ip_in_reg0_fixed_hea;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg1_fragment_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg1_fragment_s <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg1_fragment_s <= ip_in_reg0_fragment_s;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg1_proto_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg1_proto_V <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg1_proto_V <= ip_in_reg0_proto_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg1_proto_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg1_proto_hea <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg1_proto_hea <= ip_in_reg0_proto_hea;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg1_src_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg1_src_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg1_src_ip_V <= ip_in_reg0_src_ip_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg1_valid_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg1_valid_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg1_valid_V <= ip_in_reg0_valid_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg2_dst_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg2_dst_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg2_dst_ip_V <= ip_in_reg1_dst_ip_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg2_fixed_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg2_fixed_hea <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg2_fixed_hea <= ip_in_reg1_fixed_hea;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg2_fragment_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg2_fragment_s <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg2_fragment_s <= ip_in_reg1_fragment_s;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg2_proto_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg2_proto_V <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg2_proto_V <= ip_in_reg1_proto_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg2_proto_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg2_proto_hea <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg2_proto_hea <= ip_in_reg1_proto_hea;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg2_src_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg2_src_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg2_src_ip_V <= ip_in_reg1_src_ip_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg2_valid_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg2_valid_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg2_valid_V <= ip_in_reg1_valid_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg3_dst_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg3_dst_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg3_dst_ip_V <= ip_in_reg2_dst_ip_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg3_fixed_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg3_fixed_hea <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg3_fixed_hea <= ip_in_reg2_fixed_hea;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg3_fragment_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg3_fragment_s <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg3_fragment_s <= ip_in_reg2_fragment_s;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg3_proto_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg3_proto_V <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg3_proto_V <= ip_in_reg2_proto_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg3_proto_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg3_proto_hea <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg3_proto_hea <= ip_in_reg2_proto_hea;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg3_src_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg3_src_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg3_src_ip_V <= ip_in_reg2_src_ip_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg3_valid_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg3_valid_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg3_valid_V <= ip_in_reg2_valid_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg4_dst_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg4_dst_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg4_dst_ip_V <= ip_in_reg3_dst_ip_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg4_fixed_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg4_fixed_hea <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg4_fixed_hea <= ip_in_reg3_fixed_hea;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg4_fragment_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg4_fragment_s <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg4_fragment_s <= ip_in_reg3_fragment_s;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg4_proto_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg4_proto_V <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg4_proto_V <= ip_in_reg3_proto_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg4_proto_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg4_proto_hea <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg4_proto_hea <= ip_in_reg3_proto_hea;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg4_src_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg4_src_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg4_src_ip_V <= ip_in_reg3_src_ip_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg4_valid_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg4_valid_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg4_valid_V <= ip_in_reg3_valid_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg5_dst_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg5_dst_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg5_dst_ip_V <= ip_in_reg4_dst_ip_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg5_fixed_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg5_fixed_hea <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg5_fixed_hea <= ip_in_reg4_fixed_hea;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg5_fragment_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg5_fragment_s <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg5_fragment_s <= ip_in_reg4_fragment_s;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg5_proto_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg5_proto_V <= ap_const_lv8_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg5_proto_V <= ip_in_reg4_proto_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg5_proto_hea_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg5_proto_hea <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg5_proto_hea <= ip_in_reg4_proto_hea;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg5_src_ip_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg5_src_ip_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg5_src_ip_V <= ip_in_reg4_src_ip_V;
                end if; 
            end if;
        end if;
    end process;


    ip_in_reg5_valid_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ip_in_reg5_valid_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ip_in_reg5_valid_V <= ip_in_reg4_valid_V;
                end if; 
            end if;
        end if;
    end process;


    meta_out_reg_action_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_out_reg_action_s <= ap_const_lv2_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ap_const_boolean_1 = ap_condition_171)) then 
                        meta_out_reg_action_s <= select_ln301_fu_626_p3;
                    elsif ((ap_const_boolean_1 = ap_condition_165)) then 
                        meta_out_reg_action_s <= ap_const_lv2_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    meta_out_reg_checksu_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_out_reg_checksu <= ap_const_lv20_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                    if ((ap_const_boolean_1 = ap_condition_171)) then 
                        meta_out_reg_checksu <= udp_cksum4_V;
                    elsif ((ap_const_boolean_1 = ap_condition_165)) then 
                        meta_out_reg_checksu <= ap_const_lv20_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    meta_out_reg_protoco_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_out_reg_protoco <= ap_const_lv64_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln879_fu_504_p2 = ap_const_lv1_1) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln879_fu_504_p2 = ap_const_lv1_0) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_0)))) then 
                    meta_out_reg_protoco <= ip_in_reg5_proto_hea;
                end if; 
            end if;
        end if;
    end process;


    meta_out_reg_src_ip_s_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                meta_out_reg_src_ip_s <= ap_const_lv32_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln879_fu_504_p2 = ap_const_lv1_1) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (icmp_ln879_fu_504_p2 = ap_const_lv1_0) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_0)))) then 
                    meta_out_reg_src_ip_s <= ip_in_reg5_src_ip_V;
                end if; 
            end if;
        end if;
    end process;


    myIP_reg_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                myIP_reg_V <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    myIP_reg_V <= myIP_V;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum0_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum0_0_V <= ap_const_lv17_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum0_0_V <= add_ln209_1_fu_1574_p2;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum0_1_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum0_1_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum0_1_V <= ip_in_reg0_src_ip_V(31 downto 16);
                end if; 
            end if;
        end if;
    end process;


    udp_cksum0_2_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum0_2_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum0_2_V <= trunc_ln647_1_fu_1466_p1;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum0_3_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum0_3_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum0_3_V <= ip_in_reg0_proto_hea(31 downto 16);
                end if; 
            end if;
        end if;
    end process;


    udp_cksum0_4_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum0_4_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum0_4_V <= ip_in_reg0_proto_hea(63 downto 48);
                end if; 
            end if;
        end if;
    end process;


    udp_cksum0_5_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum0_5_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum0_5_V <= ip_in_reg0_proto_hea(47 downto 32);
                end if; 
            end if;
        end if;
    end process;


    udp_cksum0_6_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum0_6_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum0_6_V <= ip_in_reg0_proto_hea(31 downto 16);
                end if; 
            end if;
        end if;
    end process;


    udp_cksum0_7_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum0_7_V <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum0_7_V <= trunc_ln647_2_fu_1656_p1;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum1_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum1_0_V <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum1_0_V <= ret_V_10_fu_1276_p2;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum1_1_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum1_1_V <= ap_const_lv17_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum1_1_V <= ret_V_11_fu_1304_p2;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum1_2_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum1_2_V <= ap_const_lv17_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum1_2_V <= ret_V_12_fu_1332_p2;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum1_3_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum1_3_V <= ap_const_lv17_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum1_3_V <= ret_V_13_fu_1360_p2;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum2_0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum2_0_V <= ap_const_lv19_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum2_0_V <= ret_V_4_fu_1002_p2;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum2_1_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum2_1_V <= ap_const_lv18_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum2_1_V <= ret_V_5_fu_1030_p2;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum3_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum3_V <= ap_const_lv20_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum3_V <= ret_V_1_fu_828_p2;
                end if; 
            end if;
        end if;
    end process;


    udp_cksum4_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_cksum4_V <= ap_const_lv20_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_cksum4_V <= udp_cksum3_V;
                end if; 
            end if;
        end if;
    end process;


    udp_ignore_flag0_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_ignore_flag0_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_ignore_flag0_V <= icmp_ln879_6_fu_1666_p2;
                end if; 
            end if;
        end if;
    end process;


    udp_ignore_flag1_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_ignore_flag1_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_ignore_flag1_V <= udp_ignore_flag0_V;
                end if; 
            end if;
        end if;
    end process;


    udp_ignore_flag2_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_ignore_flag2_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_ignore_flag2_V <= or_ln544_fu_1064_p2;
                end if; 
            end if;
        end if;
    end process;


    udp_ignore_flag3_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_ignore_flag3_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_ignore_flag3_V <= udp_ignore_flag2_V;
                end if; 
            end if;
        end if;
    end process;


    udp_ignore_flag4_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                udp_ignore_flag4_V <= ap_const_lv1_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    udp_ignore_flag4_V <= udp_ignore_flag3_V;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln209_1_fu_1574_p2 <= std_logic_vector(unsigned(ap_const_lv17_11) + unsigned(checksum_precompute_s));
    add_ln209_2_fu_1764_p2 <= std_logic_vector(unsigned(zext_ln209_fu_1756_p1) + unsigned(zext_ln209_1_fu_1760_p1));
    add_ln209_fu_672_p2 <= std_logic_vector(unsigned(zext_ln364_fu_664_p1) + unsigned(trunc_ln647_fu_668_p1));
    and_ln75_fu_526_p2 <= (icmp_ln879_2_fu_520_p2 and icmp_ln879_1_fu_514_p2);
    and_ln84_fu_604_p2 <= (icmp_ln879_4_fu_538_p2 and and_ln75_fu_526_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_condition_165_assign_proc : process(ip_in_reg5_valid_V_l_load_fu_475_p1, icmp_ln879_fu_504_p2, and_ln84_fu_604_p2, empty_11_fu_598_p2)
    begin
                ap_condition_165 <= ((((empty_11_fu_598_p2 = ap_const_lv1_0) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln84_fu_604_p2) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_1))) or ((icmp_ln879_fu_504_p2 = ap_const_lv1_0) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_1)));
    end process;


    ap_condition_171_assign_proc : process(ip_in_reg5_valid_V_l_load_fu_475_p1, icmp_ln879_fu_504_p2, and_ln84_fu_604_p2, empty_11_fu_598_p2)
    begin
                ap_condition_171 <= ((empty_11_fu_598_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln84_fu_604_p2) and (icmp_ln879_fu_504_p2 = ap_const_lv1_1) and (ip_in_reg5_valid_V_l_load_fu_475_p1 = ap_const_lv1_1));
    end process;

    arp_internal_resp_Mac_IP_V <= arp_internal_resp_re_1;
    arp_internal_resp_valid_V <= arp_internal_resp_re;
    empty_10_fu_592_p2 <= "1" when (ip_in_reg5_fragment_s = ap_const_lv16_0) else "0";
    empty_11_fu_598_p2 <= (empty_fu_586_p2 or empty_10_fu_592_p2);
    empty_fu_586_p2 <= "1" when (ip_in_reg5_fragment_s = ap_const_lv16_4000) else "0";
    icmp_ln74_1_fu_556_p2 <= "1" when (ip_in_reg5_fragment_s = ap_const_lv16_0) else "0";
    icmp_ln74_fu_550_p2 <= "1" when (ip_in_reg5_fragment_s = ap_const_lv16_4000) else "0";
    icmp_ln879_1_fu_514_p2 <= "1" when (ip_in_reg5_dst_ip_V = myIP_reg_V) else "0";
    icmp_ln879_2_fu_520_p2 <= "1" when (checksum_reg_final_V = ap_const_lv16_FFFF) else "0";
    icmp_ln879_3_fu_532_p2 <= "1" when (ip_in_reg5_proto_V = ap_const_lv8_1) else "0";
    icmp_ln879_4_fu_538_p2 <= "1" when (ip_in_reg5_proto_V = ap_const_lv8_11) else "0";
    icmp_ln879_5_fu_1058_p2 <= "1" when (ret_V_4_fu_1002_p2 = zext_ln357_fu_1054_p1) else "0";
    icmp_ln879_6_fu_1666_p2 <= "1" when (trunc_ln647_2_fu_1656_p1 = ap_const_lv16_0) else "0";
    icmp_ln879_fu_504_p2 <= "1" when (ip_in_reg5_fixed_hea = ap_const_lv16_4500) else "0";
    ip_in_reg5_valid_V_l_load_fu_475_p1 <= ip_in_reg5_valid_V;
    lhs_V_1_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum1_0_V),19));
    lhs_V_2_fu_1264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum0_0_V),18));
    lhs_V_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum2_0_V),20));
    meta_out_action_V <= meta_out_reg_action_s;
    meta_out_checksum_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(meta_out_reg_checksu),32));
    meta_out_protocol_header_V <= meta_out_reg_protoco;
    meta_out_src_ip_V <= meta_out_reg_src_ip_s;
    or_ln544_fu_1064_p2 <= (udp_ignore_flag1_V or icmp_ln879_5_fu_1058_p2);
    or_ln74_fu_562_p2 <= (icmp_ln74_fu_550_p2 or icmp_ln74_1_fu_556_p2);
    or_ln76_fu_544_p2 <= (icmp_ln879_4_fu_538_p2 or icmp_ln879_3_fu_532_p2);
    p_Result_2_fu_1510_p3 <= (ip_in_reg0_ttl_V & ip_in_reg0_proto_V);
    p_Result_8_fu_1742_p4 <= myIP_reg_V(31 downto 16);
    p_Result_s_fu_461_p3 <= (eth_src_mac5_V & ip_in_reg5_src_ip_V);
    ret_V_10_fu_1276_p2 <= std_logic_vector(unsigned(lhs_V_2_fu_1264_p1) + unsigned(rhs_V_2_fu_1272_p1));
    ret_V_11_fu_1304_p2 <= std_logic_vector(unsigned(zext_ln215_17_fu_1292_p1) + unsigned(zext_ln215_18_fu_1300_p1));
    ret_V_12_fu_1332_p2 <= std_logic_vector(unsigned(zext_ln215_19_fu_1320_p1) + unsigned(zext_ln215_20_fu_1328_p1));
    ret_V_13_fu_1360_p2 <= std_logic_vector(unsigned(zext_ln215_21_fu_1348_p1) + unsigned(zext_ln215_22_fu_1356_p1));
    ret_V_14_fu_1562_p2 <= std_logic_vector(unsigned(ap_const_lv18_4500) + unsigned(rhs_V_3_fu_1558_p1));
    ret_V_1_fu_828_p2 <= std_logic_vector(unsigned(lhs_V_fu_816_p1) + unsigned(rhs_V_fu_824_p1));
    ret_V_2_fu_946_p2 <= std_logic_vector(unsigned(zext_ln215_fu_934_p1) + unsigned(zext_ln215_1_fu_942_p1));
    ret_V_3_fu_974_p2 <= std_logic_vector(unsigned(zext_ln215_2_fu_962_p1) + unsigned(zext_ln215_3_fu_970_p1));
    ret_V_4_fu_1002_p2 <= std_logic_vector(unsigned(lhs_V_1_fu_990_p1) + unsigned(rhs_V_1_fu_998_p1));
    ret_V_5_fu_1030_p2 <= std_logic_vector(unsigned(zext_ln215_6_fu_1018_p1) + unsigned(zext_ln215_7_fu_1026_p1));
    ret_V_6_fu_1168_p2 <= std_logic_vector(unsigned(zext_ln215_8_fu_1156_p1) + unsigned(zext_ln215_9_fu_1164_p1));
    ret_V_7_fu_1196_p2 <= std_logic_vector(unsigned(zext_ln215_10_fu_1184_p1) + unsigned(zext_ln215_11_fu_1192_p1));
    ret_V_8_fu_1224_p2 <= std_logic_vector(unsigned(zext_ln215_12_fu_1212_p1) + unsigned(zext_ln215_13_fu_1220_p1));
    ret_V_9_fu_1248_p2 <= std_logic_vector(unsigned(checksum_reg0_0_V) + unsigned(zext_ln215_14_fu_1244_p1));
    ret_V_fu_800_p2 <= std_logic_vector(unsigned(zext_ln215_4_fu_788_p1) + unsigned(zext_ln215_5_fu_796_p1));
    rhs_V_1_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum1_1_V),19));
    rhs_V_2_fu_1272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum0_1_V),18));
    rhs_V_3_fu_1558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_precompute_s),18));
    rhs_V_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum2_1_V),20));
    select_ln301_fu_626_p3 <= 
        ap_const_lv2_2 when (udp_ignore_flag4_V(0) = '1') else 
        ap_const_lv2_1;
    tmp_1_fu_654_p4 <= checksum_reg3_0_V(19 downto 16);
    tmp_fu_568_p2 <= (or_ln76_fu_544_p2 and and_ln75_fu_526_p2);
    trunc_ln357_1_fu_1752_p1 <= myIP_reg_V(16 - 1 downto 0);
    trunc_ln357_fu_1050_p1 <= ip_in_reg2_proto_hea(16 - 1 downto 0);
    trunc_ln647_1_fu_1466_p1 <= ip_in_reg0_src_ip_V(16 - 1 downto 0);
    trunc_ln647_2_fu_1656_p1 <= ip_in_reg0_proto_hea(16 - 1 downto 0);
    trunc_ln647_3_fu_1936_p1 <= ip_in_data_V(64 - 1 downto 0);
    trunc_ln647_fu_668_p1 <= checksum_reg3_0_V(16 - 1 downto 0);
    val_assign_fu_574_p2 <= (tmp_fu_568_p2 and or_ln74_fu_562_p2);
    zext_ln209_1_fu_1760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln357_1_fu_1752_p1),17));
    zext_ln209_fu_1756_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_fu_1742_p4),17));
    zext_ln215_10_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg0_4_V),17));
    zext_ln215_11_fu_1192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg0_5_V),17));
    zext_ln215_12_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg0_2_V),17));
    zext_ln215_13_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg0_3_V),17));
    zext_ln215_14_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg0_1_V),18));
    zext_ln215_17_fu_1292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum0_2_V),17));
    zext_ln215_18_fu_1300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum0_3_V),17));
    zext_ln215_19_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum0_4_V),17));
    zext_ln215_1_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg1_3_V),18));
    zext_ln215_20_fu_1328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum0_5_V),17));
    zext_ln215_21_fu_1348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum0_6_V),17));
    zext_ln215_22_fu_1356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum0_7_V),17));
    zext_ln215_2_fu_962_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg1_0_V),19));
    zext_ln215_3_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg1_1_V),19));
    zext_ln215_4_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg2_0_V),20));
    zext_ln215_5_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg2_1_V),20));
    zext_ln215_6_fu_1018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum1_2_V),18));
    zext_ln215_7_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(udp_cksum1_3_V),18));
    zext_ln215_8_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg0_6_V),17));
    zext_ln215_9_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg0_7_V),17));
    zext_ln215_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(checksum_reg1_2_V),18));
    zext_ln357_fu_1054_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln357_fu_1050_p1),19));
    zext_ln364_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_654_p4),16));
end behav;
